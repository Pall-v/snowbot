<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20192.20.0119.2115                               -->
<workbook original-version='18.1' source-build='2019.2.8 (20192.20.0119.2115)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <SheetIdentifierTracking ignorable='true' predowngraded='true' />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='data copy (2)' inline='true' name='federated.0zhkbyo1mslrtt1ghsz8u1ynl7tl' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='data copy' name='semistructpassivestore-direct.0kvg3nx1kz3d570zsc5sa03u2x5k'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/dev/snowbot' filename='data copy.json' password='' server=''>
              <semistruct-schemas />
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.0kvg3nx1kz3d570zsc5sa03u2x5k' name='data copy.json' table='[data copy.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[data copy.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[data copy.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[data copy.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[data copy.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[data copy.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[data copy.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[data copy.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[data copy.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='string' name='[timestamp]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Data Copy' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.573758' measure-ordering='alphabetic' measure-percentage='0.426242' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='2020_01_02_14_32_wb_lifts' inline='true' name='federated.08opw1o1eo1nck11s6rpo1owp9ss' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='2020_01_02_14_32_wb_lifts' name='semistructpassivestore-direct.1dtv35r0u4esro1fk07v0187u0xa'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/Downloads' filename='2020_01_02_14_32_wb_lifts.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[2020_01_02_14_32_wb_lifts.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.1dtv35r0u4esro1fk07v0187u0xa' name='2020_01_02_14_32_wb_lifts.json' table='[2020_01_02_14_32_wb_lifts.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[2020_01_02_14_32_wb_lifts.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[2020_01_02_14_32_wb_lifts.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per 2020_01_02_14_32_wb_lifts.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at 2020_01_02_14_32_wb_lifts.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per lifts]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([lifts Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at lifts level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='2020 01 02 14 32 Wb Lifts' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.558011' measure-ordering='alphabetic' measure-percentage='0.441989' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='data copy' inline='true' name='federated.0jlna3j08tgpzl11pw1dy1ruxk4h' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='data_2019_20' name='semistructpassivestore-direct.186jri006b94kh18mih311yzp959'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/Downloads' filename='/Users/paul/Downloads/data_2019_20.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[data copy.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='terrain' value='false' />
                  <map key='terrain.Value' value='false' />
                  <map key='weather' value='false' />
                  <map key='weather.Value' value='false' />
                  <map key='weather.Value.weatherForecast' value='false' />
                  <map key='weather.Value.weatherForecast.Value' value='false' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
                <semistruct-schema table='[data_2019_20.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='terrain' value='false' />
                  <map key='terrain.Value' value='false' />
                  <map key='weather' value='false' />
                  <map key='weather.Value' value='false' />
                  <map key='weather.Value.weatherForecast' value='false' />
                  <map key='weather.Value.weatherForecast.Value' value='false' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.186jri006b94kh18mih311yzp959' name='data_2019_20.json' table='[data_2019_20.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[data_2019_20.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[data_2019_20.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[data_2019_20.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[data_2019_20.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[data_2019_20.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[data_2019_20.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[data_2019_20.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[data_2019_20.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per data_2019_20.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at data_2019_20.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per lifts]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([lifts Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at lifts level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' datatype-customized='true' default-role='measure' default-type='quantitative' name='[Number of Records]' role='dimension' type='nominal' user:auto-column='numrec'>
        <calculation class='tableau' formula='STR(1)' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='string' name='[timestamp]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Data 2019 20' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <folder name='Terrain' role='dimensions' />
      <folder name='Weather' role='dimensions' />
      <folder name='Weather Forecast' role='dimensions' />
      <folder name='Source Measures' role='measures' />
      <layout dim-ordering='alphabetic' dim-percentage='0.681905' measure-ordering='alphabetic' measure-percentage='0.318095' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='data_2019_20 (2)' inline='true' name='federated.0eybhs500l9ylc1gsy6ck1v4ikyq' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='data_2019_20' name='semistructpassivestore-direct.0osfbb209jkg4v1giubl70heh35e'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/Downloads' filename='data_2019_20.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[data_2019_20.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='terrain' value='false' />
                  <map key='terrain.Value' value='false' />
                  <map key='weather' value='false' />
                  <map key='weather.Value' value='false' />
                  <map key='weather.Value.weatherForecast' value='false' />
                  <map key='weather.Value.weatherForecast.Value' value='false' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.0osfbb209jkg4v1giubl70heh35e' name='data_2019_20.json' table='[data_2019_20.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[data_2019_20.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[data_2019_20.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[data_2019_20.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[data_2019_20.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[data_2019_20.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[data_2019_20.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[data_2019_20.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[data_2019_20.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per data_2019_20.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at data_2019_20.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per lifts]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([lifts Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at lifts level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='string' name='[timestamp]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Data 2019 20' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.556914' measure-ordering='alphabetic' measure-percentage='0.443086' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='merged_file' inline='true' name='federated.1wvy67g1wt3g6h1ew11of0gyjrne' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='merged_file' name='semistructpassivestore-direct.02oo5wi11mul0x1dlv3tb0vfen1p'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/dev/snowbot/data' filename='merged_file.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[merged_file.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.02oo5wi11mul0x1dlv3tb0vfen1p' name='merged_file.json' table='[merged_file.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[merged_file.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[merged_file.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[merged_file.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[merged_file.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[merged_file.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[merged_file.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[merged_file.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[merged_file.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Placeholder' datatype='integer' name='[Calculation_1068338277994426371]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='min(0)' />
      </column>
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Area' datatype='string' name='[Lift Name (group)]' role='dimension' type='nominal'>
        <calculation class='categorical-bin' column='[liftName]' new-bin='true'>
          <bin default-name='false' value='&quot;Alpine&quot;'>
            <value>&quot;7th Heaven Express&quot;</value>
            <value>&quot;Glacier Express&quot;</value>
            <value>&quot;Harmony 6 Express&quot;</value>
            <value>&quot;Horstman T-Bar&quot;</value>
            <value>&quot;Peak Express&quot;</value>
            <value>&quot;Showcase T-Bar&quot;</value>
            <value>&quot;Symphony Express&quot;</value>
            <value>&quot;T-Bars&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Sub-alpine&quot;'>
            <value>&quot;Big Red Express&quot;</value>
            <value>&quot;Blackcomb Gondola Lower&quot;</value>
            <value>&quot;Blackcomb Gondola Upper&quot;</value>
            <value>&quot;Catskinner Express&quot;</value>
            <value>&quot;Coca-Cola Tube Park&quot;</value>
            <value>&quot;Creekside Gondola&quot;</value>
            <value>&quot;Crystal Ridge Express&quot;</value>
            <value>&quot;Emerald 6 Express&quot;</value>
            <value>&quot;Excalibur Gondola Lower&quot;</value>
            <value>&quot;Excalibur Gondola Upper&quot;</value>
            <value>&quot;Excelerator Express&quot;</value>
            <value>&quot;Fitzsimmons Express&quot;</value>
            <value>&quot;Franz&apos;s Chair&quot;</value>
            <value>&quot;Garbanzo Express&quot;</value>
            <value>&quot;Jersey Cream Express&quot;</value>
            <value>&quot;Magic Chair&quot;</value>
            <value>&quot;Olympic Chair&quot;</value>
            <value>&quot;Peak 2 Peak Gondola&quot;</value>
            <value>&quot;Whistler Village Gondola Lower&quot;</value>
            <value>&quot;Whistler Village Gondola Upper&quot;</value>
          </bin>
        </calculation>
      </column>
      <column datatype='string' name='[Mountain]' role='dimension' type='nominal'>
        <calculation class='categorical-bin' column='[liftName]' new-bin='true'>
          <bin default-name='false' value='&quot;Blackcomb&quot;'>
            <value>&quot;7th Heaven Express&quot;</value>
            <value>&quot;Blackcomb Gondola Lower&quot;</value>
            <value>&quot;Blackcomb Gondola Upper&quot;</value>
            <value>&quot;Catskinner Express&quot;</value>
            <value>&quot;Coca-Cola Tube Park&quot;</value>
            <value>&quot;Crystal Ridge Express&quot;</value>
            <value>&quot;Excalibur Gondola Lower&quot;</value>
            <value>&quot;Excalibur Gondola Upper&quot;</value>
            <value>&quot;Excelerator Express&quot;</value>
            <value>&quot;Glacier Express&quot;</value>
            <value>&quot;Horstman T-Bar&quot;</value>
            <value>&quot;Jersey Cream Express&quot;</value>
            <value>&quot;Magic Chair&quot;</value>
            <value>&quot;Showcase T-Bar&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Whistler&quot;'>
            <value>&quot;Big Red Express&quot;</value>
            <value>&quot;Creekside Gondola&quot;</value>
            <value>&quot;Emerald 6 Express&quot;</value>
            <value>&quot;Fitzsimmons Express&quot;</value>
            <value>&quot;Franz&apos;s Chair&quot;</value>
            <value>&quot;Garbanzo Express&quot;</value>
            <value>&quot;Harmony 6 Express&quot;</value>
            <value>&quot;Olympic Chair&quot;</value>
            <value>&quot;Peak Express&quot;</value>
            <value>&quot;Symphony Express&quot;</value>
            <value>&quot;T-Bars&quot;</value>
            <value>&quot;Whistler Village Gondola Lower&quot;</value>
            <value>&quot;Whistler Village Gondola Upper&quot;</value>
          </bin>
        </calculation>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per lifts]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([lifts Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at lifts level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per merged_file.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at merged_file.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;H&quot;' value='Standby' />
          <alias key='&quot;O&quot;' value='Open' />
          <alias key='&quot;X&quot;' value='Closed' />
        </aliases>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <column-instance column='[status]' derivation='Attribute' name='[attr:status:nk]' pivot='key' type='nominal' />
      <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <folder name='Merged File' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.65625' measure-ordering='alphabetic' measure-percentage='0.34375' show-structure='false' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[attr:status:nk]' type='palette'>
            <map to='#59a14f'>
              <bucket>&quot;O&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;X&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;H&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:status:nk]' type='palette'>
            <map to='#59a14f'>
              <bucket>&quot;O&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;X&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;H&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='lifts_status_changes' inline='true' name='federated.0cblcgu1ma86is13mk8l20yjsv8q' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='lifts_status_changes' name='textscan.018iy0n008r2et1gner7t1pzxyok'>
            <connection class='textscan' cleaning='yes' compat='no' csvFile='/Users/paul/dev/snowbot/data/lifts_status_changes.csv' dataRefreshTime='' directory='/Users/paul/dev/snowbot/data' filename='/var/folders/h8/_r_m3br529zglyh_yts3wf3c0000gp/T/tableau-temp/0mugkm218vq57o15s6h2r1ht0gz6/lifts_status_changes.csv.xlsx' interpretationMode='8' password='' port='0' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.018iy0n008r2et1gner7t1pzxyok' name='lifts_status_changes.csv' table='[/Users/paul/dev/snowbot/data/lifts_status_changes#csv]' type='table'>
          <columns character-set='UTF-8' gridOrigin='A1:G426:no:A1:G426:1' header='yes' locale='en_CA' separator=','>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='integer' name='liftID' ordinal='1' />
            <column datatype='integer' name='resortID' ordinal='2' />
            <column datatype='string' name='liftName' ordinal='3' />
            <column datatype='string' name='status' ordinal='4' />
            <column datatype='integer' name='timeToRide' ordinal='5' />
            <column datatype='datetime' date-parse-format='yyyy-dd-MM HH:mm:ss.SSSSSSZZZZZ|#|#|EEE MMM  dd HH:mm:ss yyyy' name='timestamp' ordinal='6' />
            <column datatype='string' name='time_diff' ordinal='7' />
            <column datatype='real' name='time_diff_seconds' ordinal='8' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[lifts_status_changes.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:G426:no:A1:G426:1&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_CA&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[lifts_status_changes.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>liftID</remote-name>
            <remote-type>20</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[lifts_status_changes.csv]</parent-name>
            <remote-alias>liftID</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>resortID</remote-name>
            <remote-type>20</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[lifts_status_changes.csv]</parent-name>
            <remote-alias>resortID</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>liftName</remote-name>
            <remote-type>129</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[lifts_status_changes.csv]</parent-name>
            <remote-alias>liftName</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>status</remote-name>
            <remote-type>129</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[lifts_status_changes.csv]</parent-name>
            <remote-alias>status</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timeToRide</remote-name>
            <remote-type>20</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[lifts_status_changes.csv]</parent-name>
            <remote-alias>timeToRide</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>7</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[lifts_status_changes.csv]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <ordinal>6</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>time_diff</remote-name>
            <remote-type>129</remote-type>
            <local-name>[time_diff]</local-name>
            <parent-name>[lifts_status_changes.csv]</parent-name>
            <remote-alias>time_diff</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>time_diff_seconds</remote-name>
            <remote-type>5</remote-type>
            <local-name>[time_diff_seconds]</local-name>
            <parent-name>[lifts_status_changes.csv]</parent-name>
            <remote-alias>time_diff_seconds</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='time_difference' datatype='datetime' datatype-customized='true' name='[Calculation_157625993330892800]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(DATEDIFF(&apos;second&apos;, [timestamp], LOOKUP([timestamp],1)))/86400'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='time_diff_days' datatype='real' name='[Calculation_265430909502623767]' role='dimension' type='ordinal' visual-totals='None'>
        <calculation class='tableau' formula='[time_diff_seconds]/86400' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Lift ID' datatype='integer' name='[liftID]' role='dimension' type='ordinal' />
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal' />
      <column caption='Resort ID' datatype='integer' name='[resortID]' role='dimension' type='ordinal' />
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal' />
      <column caption='Time To Ride' datatype='integer' name='[timeToRide]' role='measure' type='quantitative' />
      <column caption='Timestamp' datatype='datetime' name='[timestamp]' role='dimension' type='ordinal' />
      <column-instance column='[Calculation_265430909502623767]' derivation='None' name='[none:Calculation_265430909502623767:vtnone:ok]' pivot='key' type='ordinal' visual-totals='None' />
      <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
      <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
      <column-instance column='[timestamp]' derivation='None' name='[none:timestamp:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_157625993330892800]' derivation='User' name='[usr:Calculation_157625993330892800:ok]' pivot='key' type='ordinal'>
        <table-calc ordering-type='Rows' />
      </column-instance>
      <group hidden='true' name='[Exclusions (Lift Name,Status,time_diff_days,Timestamp)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:liftName:nk]' />
          <groupfilter function='level-members' level='[none:status:nk]' />
          <groupfilter function='level-members' level='[none:Calculation_265430909502623767:vtnone:ok]' />
          <groupfilter function='level-members' level='[none:timestamp:qk]' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.517657' measure-ordering='alphabetic' measure-percentage='0.482343' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[usr:Calculation_157625993330892800:ok]' type='palette'>
            <map to='#8cd17d'>
              <bucket>%missing%</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>%null%</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:status:nk]' type='palette'>
            <map to='#59a14f'>
              <bucket>&quot;O&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;X&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;H&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
      <default-date-format>L</default-date-format>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='data copy' name='federated.0jlna3j08tgpzl11pw1dy1ruxk4h' />
            <datasource caption='data_2019_20 (2)' name='federated.0eybhs500l9ylc1gsy6ck1v4ikyq' />
          </datasources>
          <datasource-dependencies datasource='federated.0eybhs500l9ylc1gsy6ck1v4ikyq'>
            <column-instance column='[resortID]' derivation='None' name='[none:resortID:ok]' pivot='key' type='ordinal' />
            <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
            <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.resortID</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.status</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0jlna3j08tgpzl11pw1dy1ruxk4h'>
            <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.liftName</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
            <column-instance column='[timestamp]' derivation='None' name='[none:timestamp:nk]' pivot='key' type='nominal' />
            <column caption='Timestamp' datatype='string' name='[timestamp]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>timestamp</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:resortID:ok]'>
            <groupfilter function='member' level='[none:resortID:ok]' member='13.0' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:resortID:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='background-color' field='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Text' />
            <encodings>
              <color column='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]' />
              <text column='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:liftName:nk]</rows>
        <cols>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:timestamp:nk]</cols>
      </table>
      <simple-id uuid='{8F8EEEED-A901-4EB9-B7ED-7B2903E48F21}' />
    </worksheet>
    <worksheet name='gantt_1'>
      <table>
        <view>
          <datasources>
            <datasource caption='merged_file' name='federated.1wvy67g1wt3g6h1ew11of0gyjrne' />
          </datasources>
          <datasource-dependencies datasource='federated.1wvy67g1wt3g6h1ew11of0gyjrne'>
            <column caption='Lift Area' datatype='string' name='[Lift Name (group)]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[liftName]' new-bin='true'>
                <bin default-name='false' value='&quot;Alpine&quot;'>
                  <value>&quot;7th Heaven Express&quot;</value>
                  <value>&quot;Glacier Express&quot;</value>
                  <value>&quot;Harmony 6 Express&quot;</value>
                  <value>&quot;Horstman T-Bar&quot;</value>
                  <value>&quot;Peak Express&quot;</value>
                  <value>&quot;Showcase T-Bar&quot;</value>
                  <value>&quot;Symphony Express&quot;</value>
                  <value>&quot;T-Bars&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Sub-alpine&quot;'>
                  <value>&quot;Big Red Express&quot;</value>
                  <value>&quot;Blackcomb Gondola Lower&quot;</value>
                  <value>&quot;Blackcomb Gondola Upper&quot;</value>
                  <value>&quot;Catskinner Express&quot;</value>
                  <value>&quot;Coca-Cola Tube Park&quot;</value>
                  <value>&quot;Creekside Gondola&quot;</value>
                  <value>&quot;Crystal Ridge Express&quot;</value>
                  <value>&quot;Emerald 6 Express&quot;</value>
                  <value>&quot;Excalibur Gondola Lower&quot;</value>
                  <value>&quot;Excalibur Gondola Upper&quot;</value>
                  <value>&quot;Excelerator Express&quot;</value>
                  <value>&quot;Fitzsimmons Express&quot;</value>
                  <value>&quot;Franz&apos;s Chair&quot;</value>
                  <value>&quot;Garbanzo Express&quot;</value>
                  <value>&quot;Jersey Cream Express&quot;</value>
                  <value>&quot;Magic Chair&quot;</value>
                  <value>&quot;Olympic Chair&quot;</value>
                  <value>&quot;Peak 2 Peak Gondola&quot;</value>
                  <value>&quot;Whistler Village Gondola Lower&quot;</value>
                  <value>&quot;Whistler Village Gondola Upper&quot;</value>
                </bin>
              </calculation>
            </column>
            <column datatype='string' name='[Mountain]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[liftName]' new-bin='true'>
                <bin default-name='false' value='&quot;Blackcomb&quot;'>
                  <value>&quot;7th Heaven Express&quot;</value>
                  <value>&quot;Blackcomb Gondola Lower&quot;</value>
                  <value>&quot;Blackcomb Gondola Upper&quot;</value>
                  <value>&quot;Catskinner Express&quot;</value>
                  <value>&quot;Coca-Cola Tube Park&quot;</value>
                  <value>&quot;Crystal Ridge Express&quot;</value>
                  <value>&quot;Excalibur Gondola Lower&quot;</value>
                  <value>&quot;Excalibur Gondola Upper&quot;</value>
                  <value>&quot;Excelerator Express&quot;</value>
                  <value>&quot;Glacier Express&quot;</value>
                  <value>&quot;Horstman T-Bar&quot;</value>
                  <value>&quot;Jersey Cream Express&quot;</value>
                  <value>&quot;Magic Chair&quot;</value>
                  <value>&quot;Showcase T-Bar&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Whistler&quot;'>
                  <value>&quot;Big Red Express&quot;</value>
                  <value>&quot;Creekside Gondola&quot;</value>
                  <value>&quot;Emerald 6 Express&quot;</value>
                  <value>&quot;Fitzsimmons Express&quot;</value>
                  <value>&quot;Franz&apos;s Chair&quot;</value>
                  <value>&quot;Garbanzo Express&quot;</value>
                  <value>&quot;Harmony 6 Express&quot;</value>
                  <value>&quot;Olympic Chair&quot;</value>
                  <value>&quot;Peak Express&quot;</value>
                  <value>&quot;Symphony Express&quot;</value>
                  <value>&quot;T-Bars&quot;</value>
                  <value>&quot;Whistler Village Gondola Lower&quot;</value>
                  <value>&quot;Whistler Village Gondola Upper&quot;</value>
                </bin>
              </calculation>
            </column>
            <column-instance column='[timestamp]' derivation='Day' name='[dy:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[timestamp]' derivation='Hour' name='[hr:timestamp:ok]' pivot='key' type='ordinal' />
            <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.liftName</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[timestamp]' derivation='Minute' name='[mi:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[timestamp]' derivation='Month' name='[mn:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
            <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
            <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;H&quot;' value='Standby' />
                <alias key='&quot;O&quot;' value='Open' />
                <alias key='&quot;X&quot;' value='Closed' />
              </aliases>
              <desc>
                <formatted-text>
                  <run>lifts.Value.status</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>timestamp</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[timestamp]' derivation='Year' name='[yr:timestamp:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[hr:timestamp:ok]' value='29' />
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mi:timestamp:ok]' value='28' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mi:timestamp:ok]' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Lift Name (group)] / ([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Mountain] / [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]))</rows>
        <cols>([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[yr:timestamp:ok] / ([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mn:timestamp:ok] / ([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[dy:timestamp:ok] / ([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[hr:timestamp:ok] / [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mi:timestamp:ok]))))</cols>
      </table>
      <simple-id uuid='{CF19F586-1043-4507-B393-15B04F09D8E8}' />
    </worksheet>
    <worksheet name='gantt_2'>
      <table>
        <view>
          <datasources>
            <datasource caption='merged_file' name='federated.1wvy67g1wt3g6h1ew11of0gyjrne' />
          </datasources>
          <datasource-dependencies datasource='federated.1wvy67g1wt3g6h1ew11of0gyjrne'>
            <column caption='ATTR([Timestamp])-LOOKUP(ATTR([Timestamp]), -1)' datatype='real' name='[Calculation_26669759692615683]' role='measure' type='quantitative' user:unnamed='Sheet 6'>
              <calculation class='tableau' formula='ATTR([timestamp])-LOOKUP(ATTR([timestamp]), -1)'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='DATEDIFF(&apos;minute&apos;, LOOKUP(ATTR([Timestamp]), 0), LOOKUP(ATTR(...' datatype='integer' name='[Calculation_26669759696773131]' role='measure' type='quantitative' user:unnamed='Sheet 6'>
              <calculation class='tableau' formula='DATEDIFF(&apos;minute&apos;, LOOKUP(ATTR([timestamp]), 0), LOOKUP(ATTR([timestamp]), 0))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Lift Area' datatype='string' name='[Lift Name (group)]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[liftName]' new-bin='true'>
                <bin default-name='false' value='&quot;Alpine&quot;'>
                  <value>&quot;7th Heaven Express&quot;</value>
                  <value>&quot;Glacier Express&quot;</value>
                  <value>&quot;Harmony 6 Express&quot;</value>
                  <value>&quot;Horstman T-Bar&quot;</value>
                  <value>&quot;Peak Express&quot;</value>
                  <value>&quot;Showcase T-Bar&quot;</value>
                  <value>&quot;Symphony Express&quot;</value>
                  <value>&quot;T-Bars&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Sub-alpine&quot;'>
                  <value>&quot;Big Red Express&quot;</value>
                  <value>&quot;Blackcomb Gondola Lower&quot;</value>
                  <value>&quot;Blackcomb Gondola Upper&quot;</value>
                  <value>&quot;Catskinner Express&quot;</value>
                  <value>&quot;Coca-Cola Tube Park&quot;</value>
                  <value>&quot;Creekside Gondola&quot;</value>
                  <value>&quot;Crystal Ridge Express&quot;</value>
                  <value>&quot;Emerald 6 Express&quot;</value>
                  <value>&quot;Excalibur Gondola Lower&quot;</value>
                  <value>&quot;Excalibur Gondola Upper&quot;</value>
                  <value>&quot;Excelerator Express&quot;</value>
                  <value>&quot;Fitzsimmons Express&quot;</value>
                  <value>&quot;Franz&apos;s Chair&quot;</value>
                  <value>&quot;Garbanzo Express&quot;</value>
                  <value>&quot;Jersey Cream Express&quot;</value>
                  <value>&quot;Magic Chair&quot;</value>
                  <value>&quot;Olympic Chair&quot;</value>
                  <value>&quot;Peak 2 Peak Gondola&quot;</value>
                  <value>&quot;Whistler Village Gondola Lower&quot;</value>
                  <value>&quot;Whistler Village Gondola Upper&quot;</value>
                </bin>
              </calculation>
            </column>
            <column datatype='string' name='[Mountain]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[liftName]' new-bin='true'>
                <bin default-name='false' value='&quot;Blackcomb&quot;'>
                  <value>&quot;7th Heaven Express&quot;</value>
                  <value>&quot;Blackcomb Gondola Lower&quot;</value>
                  <value>&quot;Blackcomb Gondola Upper&quot;</value>
                  <value>&quot;Catskinner Express&quot;</value>
                  <value>&quot;Coca-Cola Tube Park&quot;</value>
                  <value>&quot;Crystal Ridge Express&quot;</value>
                  <value>&quot;Excalibur Gondola Lower&quot;</value>
                  <value>&quot;Excalibur Gondola Upper&quot;</value>
                  <value>&quot;Excelerator Express&quot;</value>
                  <value>&quot;Glacier Express&quot;</value>
                  <value>&quot;Horstman T-Bar&quot;</value>
                  <value>&quot;Jersey Cream Express&quot;</value>
                  <value>&quot;Magic Chair&quot;</value>
                  <value>&quot;Showcase T-Bar&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Whistler&quot;'>
                  <value>&quot;Big Red Express&quot;</value>
                  <value>&quot;Creekside Gondola&quot;</value>
                  <value>&quot;Emerald 6 Express&quot;</value>
                  <value>&quot;Fitzsimmons Express&quot;</value>
                  <value>&quot;Franz&apos;s Chair&quot;</value>
                  <value>&quot;Garbanzo Express&quot;</value>
                  <value>&quot;Harmony 6 Express&quot;</value>
                  <value>&quot;Olympic Chair&quot;</value>
                  <value>&quot;Peak Express&quot;</value>
                  <value>&quot;Symphony Express&quot;</value>
                  <value>&quot;T-Bars&quot;</value>
                  <value>&quot;Whistler Village Gondola Lower&quot;</value>
                  <value>&quot;Whistler Village Gondola Upper&quot;</value>
                </bin>
              </calculation>
            </column>
            <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.liftName</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
            <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
            <column-instance column='[timestamp]' derivation='None' name='[none:timestamp:qk]' pivot='key' type='quantitative' />
            <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;H&quot;' value='Standby' />
                <alias key='&quot;O&quot;' value='Open' />
                <alias key='&quot;X&quot;' value='Closed' />
              </aliases>
              <desc>
                <formatted-text>
                  <run>lifts.Value.status</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>timestamp</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Calculation_26669759692615683]' derivation='User' name='[usr:Calculation_26669759692615683:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' />
            </column-instance>
            <column-instance column='[Calculation_26669759696773131]' derivation='User' name='[usr:Calculation_26669759696773131:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' />
            </column-instance>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='GanttBar' />
            <encodings>
              <color column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
            </encodings>
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:timestamp:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='GanttBar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.1974033117294312' />
              </style-rule>
            </style>
          </pane>
          <pane id='5' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[usr:Calculation_26669759692615683:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='GanttBar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.6041989326477051' />
              </style-rule>
            </style>
          </pane>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[usr:Calculation_26669759696773131:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='GanttBar' />
            <encodings>
              <color column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Lift Name (group)] / ([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Mountain] / [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]))</rows>
        <cols>([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:timestamp:qk] + ([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[usr:Calculation_26669759692615683:qk] + [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[usr:Calculation_26669759696773131:qk]))</cols>
      </table>
      <simple-id uuid='{660FC254-837E-4D64-990B-D506E7D38672}' />
    </worksheet>
    <worksheet name='new'>
      <table>
        <view>
          <datasources>
            <datasource caption='merged_file' name='federated.1wvy67g1wt3g6h1ew11of0gyjrne' />
          </datasources>
          <datasource-dependencies datasource='federated.1wvy67g1wt3g6h1ew11of0gyjrne'>
            <column-instance column='[timestamp]' derivation='Day' name='[dy:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[timestamp]' derivation='Hour' name='[hr:timestamp:ok]' pivot='key' type='ordinal' />
            <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.liftName</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[timestamp]' derivation='Minute' name='[mi:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[timestamp]' derivation='Month' name='[mn:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
            <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
            <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;H&quot;' value='Standby' />
                <alias key='&quot;O&quot;' value='Open' />
                <alias key='&quot;X&quot;' value='Closed' />
              </aliases>
              <desc>
                <formatted-text>
                  <run>lifts.Value.status</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>timestamp</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[timestamp]' derivation='Minute-Trunc' name='[tmi:timestamp:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mi:timestamp:ok]' value='27' />
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[hr:timestamp:ok]' value='27' />
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[tmi:timestamp:qk]' value='27' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
              <text column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</rows>
        <cols>(([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mn:timestamp:ok] / [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[dy:timestamp:ok]) * [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[tmi:timestamp:qk])</cols>
      </table>
      <simple-id uuid='{8AF9394B-D388-40C1-AAF3-CD0A3FC0B2C5}' />
    </worksheet>
    <worksheet name='timeline'>
      <table>
        <view>
          <datasources>
            <datasource caption='merged_file' name='federated.1wvy67g1wt3g6h1ew11of0gyjrne' />
          </datasources>
          <datasource-dependencies datasource='federated.1wvy67g1wt3g6h1ew11of0gyjrne'>
            <column caption='Placeholder' datatype='integer' name='[Calculation_1068338277994426371]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='min(0)' />
            </column>
            <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.liftName</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
            <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
            <column-instance column='[timestamp]' derivation='None' name='[none:timestamp:qk]' pivot='key' type='quantitative' />
            <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;H&quot;' value='Standby' />
                <alias key='&quot;O&quot;' value='Open' />
                <alias key='&quot;X&quot;' value='Closed' />
              </aliases>
              <desc>
                <formatted-text>
                  <run>lifts.Value.status</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>timestamp</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Calculation_1068338277994426371]' derivation='User' name='[usr:Calculation_1068338277994426371:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[usr:Calculation_1068338277994426371:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]' value='172' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
              <text column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
                <format attr='shape' value=':filled/square' />
                <format attr='size' value='6.3166670799255371' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='27' />
                <format attr='maxheight' value='27' />
                <format attr='minwidth' value='1275' />
                <format attr='maxwidth' value='1275' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk] * [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[usr:Calculation_1068338277994426371:qk])</rows>
        <cols>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:timestamp:qk]</cols>
      </table>
      <simple-id uuid='{72607584-BE1D-403D-87F4-C59FDBCA1B2A}' />
    </worksheet>
    <worksheet name='via_status _changes_old'>
      <table>
        <view>
          <datasources>
            <datasource caption='lifts_status_changes' name='federated.0cblcgu1ma86is13mk8l20yjsv8q' />
          </datasources>
          <datasource-dependencies datasource='federated.0cblcgu1ma86is13mk8l20yjsv8q'>
            <column caption='time_diff_days' datatype='real' name='[Calculation_265430909502623767]' role='dimension' type='ordinal' visual-totals='None'>
              <calculation class='tableau' formula='[time_diff_seconds]/86400' />
            </column>
            <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_265430909502623767]' derivation='None' name='[none:Calculation_265430909502623767:vtnone:ok]' pivot='key' type='ordinal' visual-totals='None' />
            <column-instance column='[Calculation_265430909502623767]' derivation='None' name='[none:Calculation_265430909502623767:vtnone:qk]' pivot='key' type='quantitative' visual-totals='None' />
            <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
            <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
            <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal' />
            <column-instance column='[timestamp]' derivation='Day-Trunc' name='[tdy:timestamp:qk]' pivot='key' type='quantitative' />
            <column datatype='real' name='[time_diff_seconds]' role='measure' type='quantitative' />
            <column caption='Timestamp' datatype='datetime' name='[timestamp]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0cblcgu1ma86is13mk8l20yjsv8q].[tdy:timestamp:qk]' field-type='quantitative' major-origin='#2020-01-03 12:00:00#' major-spacing='5.0' major-units='minutes' max='#2020-01-09 22:49:44.900#' min='#2020-01-02 00:14:49#' range-type='fixed' scope='cols' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='GanttBar' />
            <encodings>
              <size column='[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:Calculation_265430909502623767:vtnone:qk]' />
              <text column='[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:Calculation_265430909502623767:vtnone:ok]' />
              <color column='[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:liftName:nk]</rows>
        <cols>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[tdy:timestamp:qk]</cols>
      </table>
      <simple-id uuid='{26B279BE-9A99-46D2-BEFD-852392CDA8B6}' />
    </worksheet>
    <worksheet name='via_status_changes'>
      <table>
        <view>
          <datasources>
            <datasource caption='lifts_status_changes' name='federated.0cblcgu1ma86is13mk8l20yjsv8q' />
          </datasources>
          <datasource-dependencies datasource='federated.0cblcgu1ma86is13mk8l20yjsv8q'>
            <column caption='time_diff_days' datatype='real' name='[Calculation_265430909502623767]' role='dimension' type='ordinal' visual-totals='None'>
              <calculation class='tableau' formula='[time_diff_seconds]/86400' />
            </column>
            <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_265430909502623767]' derivation='None' name='[none:Calculation_265430909502623767:vtnone:qk]' pivot='key' type='quantitative' visual-totals='None' />
            <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
            <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
            <column-instance column='[timestamp]' derivation='None' name='[none:timestamp:qk]' pivot='key' type='quantitative' />
            <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal' />
            <column datatype='real' name='[time_diff_seconds]' role='measure' type='quantitative' />
            <column caption='Timestamp' datatype='datetime' name='[timestamp]' role='dimension' type='ordinal' />
            <column-instance column='[timestamp]' derivation='Minute-Trunc' name='[tmi:timestamp:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:timestamp:qk]' field-type='quantitative' major-origin='#2020-01-06 11:47:13.115#' major-spacing='1.0' major-units='days' minor-origin='#2020-01-06 11:47:13.115#' minor-spacing='1.0' minor-units='hours' scope='cols' type='space' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='text-format' data-class='total' field='[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:timestamp:qk]' value='*' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='GanttBar' />
            <encodings>
              <color column='[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:status:nk]' />
              <size column='[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:Calculation_265430909502623767:vtnone:qk]' />
              <lod column='[federated.0cblcgu1ma86is13mk8l20yjsv8q].[tmi:timestamp:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:liftName:nk]</rows>
        <cols>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:timestamp:qk]</cols>
        <table-calculations>
          <partitionable-measures>
            <column>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[attr:timestamp:ok]</column>
          </partitionable-measures>
        </table-calculations>
      </table>
      <simple-id uuid='{D755F4BB-BA74-469B-89DD-0C92D6E9C2B0}' />
    </worksheet>
  </worksheets>
  <windows source-height='135'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:resortID:ok]</field>
            <field>[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]</field>
            <field>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:liftName:nk]</field>
            <field>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:resortID (lifts):ok]</field>
            <field>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:status (lifts):nk]</field>
            <field>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:timestamp:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{AC71A15C-2472-495D-A4B5-6332B4494A2A}' />
    </window>
    <window class='worksheet' name='new'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[yr:timestamp:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{9BE1E5AD-5C4D-49AA-9B75-02211099098F}' />
    </window>
    <window class='worksheet' name='gantt_1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <tuple-selection>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[yr:timestamp:ok]</field>
                    <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mn:timestamp:ok]</field>
                    <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[dy:timestamp:ok]</field>
                    <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[hr:timestamp:ok]</field>
                    <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mi:timestamp:ok]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Lift Name (group)]</field>
                    <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Mountain]</field>
                    <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Lift Name (group)]</field>
                  <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Mountain]</field>
                  <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[dy:timestamp:ok]</field>
                  <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[hr:timestamp:ok]</field>
                  <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mi:timestamp:ok]</field>
                  <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mn:timestamp:ok]</field>
                  <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</field>
                  <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]</field>
                  <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[yr:timestamp:ok]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Alpine&quot;</value>
                <value>&quot;Blackcomb&quot;</value>
                <value>4</value>
                <value>14</value>
                <value>49</value>
                <value>1</value>
                <value>&quot;7th Heaven Express&quot;</value>
                <value>&quot;X&quot;</value>
                <value>2020</value>
              </tuple>
            </tuple-reference>
          </tuple-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Lift Area]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Lift Name (group)]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Mountain]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mn:timestamp:ok]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftID:ok]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[qr:timestamp:ok]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[yr:timestamp:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{10BA01CD-F85F-472E-875C-123E143BA18D}' />
    </window>
    <window class='worksheet' name='gantt_2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='4' param='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Lift Name (group)]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Mountain]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:timestamp:qk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[yr:timestamp:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5102F243-A273-4572-83AE-ED7556A95883}' />
    </window>
    <window class='worksheet' name='timeline'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08opw1o1eo1nck11s6rpo1owp9ss].[none:liftName:nk]</field>
            <field>[federated.08opw1o1eo1nck11s6rpo1owp9ss].[none:status:nk]</field>
            <field>[federated.08opw1o1eo1nck11s6rpo1owp9ss].[yr:timestamp:ok]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:Calculation_1068338277993893889:qk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[yr:timestamp:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{18471A19-C3BC-4BB0-9682-D90FB603A4C9}' />
    </window>
    <window class='worksheet' name='via_status _changes_old'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[dy:timestamp:ok]</field>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[mn:timestamp:ok]</field>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:Calculation_265430909502623767:ok]</field>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:Calculation_265430909502623767:vtnone:ok]</field>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:liftName:nk]</field>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:status:nk]</field>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:time_diff:nk]</field>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:timestamp:nk]</field>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:timestamp:ok]</field>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[qr:timestamp:ok]</field>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[tdy:timestamp:ok]</field>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[thr:timestamp:ok]</field>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[tmi:timestamp:qk]</field>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[usr:Calculation_157625993330892800:ok]</field>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[yr:timestamp:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{99AB0283-DFAF-4F96-BA71-19401F9CD55A}' />
    </window>
    <window class='worksheet' maximized='true' name='via_status_changes'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:Calculation_265430909502623767:vtnone:ok]</field>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:liftID:ok]</field>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:liftName:nk]</field>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:status:nk]</field>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[none:timestamp:qk]</field>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[thr:timestamp:qk]</field>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[tmi:timestamp:qk]</field>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[usr:Calculation_157625993330892800:ok:2]</field>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[usr:Calculation_157625993330892800:ok]</field>
            <field>[federated.0cblcgu1ma86is13mk8l20yjsv8q].[yr:timestamp:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{028257BE-7615-46B0-8661-7F5D3895BE3D}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Sheet 1' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOy9d3wU17n//56tWq206r2hCkICIdF7ERgwzRWXYPva/G58k9iOY8fX8TeJ
      2+vayc29KThxw4ZrTHEB0wSYZnoHgUA0Aeq9r3a1fXfm94esCUWAcLCFYd//gHZnZp/ZnWfO
      mXM+5/MIkiRJePFyByIIgqDo6SC8eOlJvAng5Y7GmwBe7mi8CeDljsabAF7uaLwJ4OWOxpsA
      Xu5ovAng5bp4PB6cTie345SRqqcD8HLrIIoie/bsIT8/X34tLS2NqKgoysvLmT59Omq1+jsd
      2263U1RURL9+/VAobp37rjcBvMgIgkBCQgIWi4Xly5cza9YsUlJS0Ov1KJVKPB4PdXV1uN1u
      VCoVGo0Gs9lMeHg4BoMBo9FIQ0MDer2e6OhoHA4H1dXV+Pv709LSwvz583n++ecJDw9HqVTS
      0NCAIAhERESgUqlobm7G4XAgCAK+vr60tbURGhqKwWCgtrYWj8eD2+0mKioKnU53U87ZmwBe
      ZDoTQK/Xs337dnJycoiLiyM/P59Dhw4RGBjI73//e2JjY6mvryc6OpqWlhays7OZPXs28+fP
      p6mpCZvNxm9/+1v27t3Lvn37yMrKQqPRUFpayhdffMFdd92F1Wpl586dmEwmhg0bRnZ2NvPm
      zcPPz4/6+npiY2NpbW0lMTGRX/ziF/zhD38gODiY2tpapk+fzowZM25KS3LrtEVeblmcTidm
      sxm3201YWBhPP/00MTExTJw4kYceeojKykrOnTtHZWUljz/+OJGRkezdu5fz58+TlJTEmDFj
      GD58OAkJCfz85z9nwIABZGRkcM8995CVlcXhw4exWq34+fnxzDPPkJKSwuDBg3n66acpKytD
      FEVEUeTxxx/nP/7jPzh8+DAWi+WmnJs3AbzcEFqtFoPBgE6nw2Aw4OfnB4DNZsNoNLJr1y50
      Oh2hoaE8+uijOJ1O8vLy0Gg0KJVK/Pz80Gg0rFu3jry8PNra2nC73YiiiEajISAgAB8fHwwG
      AwaDQf5cpVKJwWAgIiICt9uN0+m8KefjTQAv10UQhOtuExUVhb+/P/Hx8eTk5KDX6zl79izj
      x4/Hbrej1+vR6/Vs27aNhoYGqqqq6N27N+Hh4YiieN3j2+12Tp06RV5eHpGRkej1+ptxaihf
      f/3112/KkbzcViiVSpKTk/Hx8UGSJPni1mq1JCUloVQqiY+Px8/PD71eT05ODuHh4Rw/fpzW
      1lb69++Py+Vi586dDBw4UL7Yjxw5QlBQEOnp6Zw4cQKdTkdGRgapqan4+vqSlJSEIAjExsYS
      GBiIWq0mOTmZ1atX43A4CAoK4t577yUwMPBfPsc33njjDcG7HsDLzUKSJERRRBAEFAoFkiTh
      8XgQBAGlUgkg/y0IAh6PB6VSed0Wxul08uqrr/KrX/2KsLCwmzaMKgiC4E0AL7c8kiRRXl5O
      TEzMd56H6ApvAni5o/GuCPNyx+NNAC93NN4E8HJH400AL3c03gTwckfjFcPdhlw8sCcIwhV/
      3+h2l2/f1TG6M1t8tX26+txrvXat2G40Pm8C3EZIkkRdXR1Hjx7FarXSv39/0tLSKC8v5/Dh
      wwQHBzNkyBC0Wi1FRUVcuHABtVrNiBEjCAgI4PDhw5SXl5OWlkZWVpY84SRJEpWVlRw5cgQ/
      Pz+GDRuGwWDA4XBQUFBAcHAwqamp3YqvsLCQ4uJiNBoNgwcPJigoiMLCQs6dOyd/rtVqpaCg
      gLq6OqKjoxk0aBAOh4O9e/dit9sZMmQI0dHR8kXt8Xg4fvw4586dIzExkcGDByMIAs3NzZw8
      eZLs7GwCAgK6jMkrhbiNcLlcfPrppxiNRlwuFxs2bCA7O5u///3vKBQKjh07htvtRq/Xs3Tp
      UrRaLceOHaOxsRG1Ws2iRYsIDw9nw4YNpKenExQUBIDFYuG9997D7XZz6tQpLBYLSUlJzJ8/
      n6VLl6LX6xkwYMB147NarfzlL3/BYDBw8uRJKioq8Pf3Z/78+YSFhZGXl0d2djbHjh1j3759
      6PV6NmzYQGRkJIcOHSI/Px+Px8Phw4fJzs5Gq9UCcP78eT766CMiIiL4+uuvSU1Nxe1289Zb
      b5GXl8fo0aMJCQm5Ip433njjDW8C3EYIgkD//v0ZOXIkkZGRbN++nbCwME6fPs3LL79MdHQ0
      mzZtYtKkSYwbN47s7Gyam5tpamqirq6O9PR0Hn30UcrLy2lpaSEzMxOAhoYGvvnmG5555hmi
      o6P5+uuvyc3NJSgoiLCwMFwuV7cSQKlUMm7cOAYPHkxrayu1tbW0tLSQkJDAY489Rk1NDY2N
      jUyaNInx48eTnJzM8ePHCQ8P55tvvuGpp55ixIgRbN68mX79+hEYGIgkSWzevJmgoCCeeuop
      jEYjFy5coF+/fvTr14+SkhIGDx581QTwPgTfRigUCnx9fTl58iR/+MMfmDBhAj4+Pvj7++Pj
      44Ovry+iKKJQKNBoNKxatYodO3YwceJE2tvbCQsLAyAkJASz2UxtbS0lJSU0Nzej1+vx8fEh
      ICAAm82Gj48P6enpl+hyGhsbKSkpuapWX6lUolKp+Prrr9m8eTMTJ07EZrMRFBSEUqkkJCQE
      k8mEr68vRqORf/zjHwBkZGQgiiJBQUGo1WpUKhU2m43y8nLKy8sxmUyEh4cDEBoaSltbG0FB
      QbKwDv4ppygtLb3kecH7DHCbcfr0ad555x3mzJnD6NGjOXv2LDabDZfLhcPhQKlU4nK5WLRo
      EaWlpbz22mtERUWxe/duTCYTAO3t7eh0OlatWkVxcTEzZ87E4XDgcrmw2Wxy1+NyNm/ezNGj
      R5kzZw7Z2dldbrNs2TKOHz/O66+/TmRkJCdOnMBisSCKIu3t7ej1elpbW/nTn/5EcnIyc+bM
      QaPRIAgCFosFnU6HKIpYrVaWLFmCVqslNjZWjt1sNuPr63vF57rdbj7++GPsdjtvvfUWGo0G
      8CbAbYXb7Wb58uUMHz6cuLg4ampqiIiIoLW1lRMnTnDs2DHCw8Npbm7m4MGDPPbYY7hcLhob
      G0lMTOTAgQP079+fwsJCHnjgAYYOHQqA0Wjkyy+/5OzZs5w5c4bo6GhcLhcmkwmz2YzNZqO1
      tZXZs2fz8MMPX1Wtabfb2bJlC0888QQOh4OGhgYSExPZsGEDAwcO5NixYzz22GMcOHAAj8fD
      6NGjaWhoIDg4mKioKA4ePEhycjIOh4O4uDjefPNNAHbv3s26desYM2YMhw8fZtKkSdjtdtra
      2nA6nbS2thIVFUVnb79TmQrgFcPdRphMJj755BPKy8sRBIHg4GDmzJlDSUkJa9asISwsTL74
      /vGPf8gXalpaGo8//jgLFy7kzJkzDBkyhEceeQSVquP+KIoi+/btY/Xq1RgMBp588kkkSWLJ
      kiU0NTUBkJSUxE9+8hP5wbkrqqqq+Otf/wp0PK+kpaUxe/ZsVq9ezdGjR8nOzuaRRx5h8+bN
      7NixA4VCgVKpZMaMGcTHx/PRRx9ht9u5//77GTJkiBy/w+Hg888/58iRI2RkZDB37lyOHDnC
      ypUrcblcqFQqRo0axT333HNJPF416B2CJEnY7Xa5/3w1RFHEbrfj4+PT5V3cbrejVCpvqiS5
      M77O54praf2dTieiKOLj43PDsXeFNwG83NF45dBe7ni8CXAb0mkgdXHj3rlc8XJEUbzC9lAU
      RVwu11WtEEVR/M42iZIk4XK5rojlasd0u92XnEvn/h6P56rHv5H4vKNAtxnNzc0sWrQIu93O
      7NmzSUlJwWw2s337dkJCQhg5cqS8rclkYs2aNVRWVjJ27FiGDRtGe3s7y5cvp76+nrvuuovB
      gwfL24uiSHl5OTt37mTatGnyvMGNkJ+fz+bNm4mMjGTWrFmy2dX27dsZMWIEiYmJ8ralpaWs
      WrUKSZKYPXs2cXFxXLhwgZUrV+Lr68sDDzxAVFSUvL3b7SY/P5/q6mqmTJnS5XDo5XhbgNsI
      l8vFggULCA4OJicnhw8++IC2tjb+9re/8eWXX3LmzJlLtv/mm28oLS1lxIgRfP7559TU1LB6
      9Wra2toYMWIEixYtoqmpiaNHj1JYWEhJSQnz5s1j7dq18rj7jWCz2fjoo48YMmQIzc3N5OXl
      UVxczN/+9jc2btxIQ0ODvK3ZbGbRokXEx8cTGRnJwoULsVqtfPTRR/Tu3Rt/f3+WLFlCW1sb
      W7ZsobGxkby8PJYtW8auXbu67RvkTYDbiNbWVoqLi7nvvvuYPHkyTqeT6upq5syZw/Tp068Y
      HTl9+jSjRo1i2LBhhIeHU1RURFFREVOnTmXcuHEEBQVx/vx5amtraWhoICIigt/85jfExcV9
      p/hKSkrw9/dn7NixTJw4kQsXLhAUFMQLL7xASkrKJd0Wo9GI2Wxm3LhxTJkyhfr6ek6dOoXN
      ZmPq1KlMnjyZuro6WlpaKCkpwW63M3z4cF544YUb6p55u0C3ERcbywqCgF6vx26307dv30sc
      nzux2+2yU5ufnx8tLS2yWE4QBAwGAxaLhVGjRiEIAv7+/vJ73wWTyYRer0etVqPVavF4PPj6
      +qLT6a44ptvtlodtO7syjY2NaDQatFotKpVKllbcd999BAQEoNFo5HmJ7uJtAW4jOsfHzWYz
      oiheVRbQiU6no62tDYfDgclkIjQ0FLVajclkQhRFjEYj/v7+bNu2jb179/7L8QUGBmI2m3E4
      HNhsNpRK5VXH7NVqNU6nE5fLhdFoBCAyMhKHw4HVasXpdMoPyEuXLqWuru47xeRtAW4jgoOD
      ycjIYPHixbJleUREBAcPHqSkpASr1crRo0fp378/KpWKAQMGsH37dmw2G01NTaSnp9PQ0MDq
      1aspLi7GbDbL/W2lUimL41pbWykoKEClUtHU1ERZWRm5ubl89dVXzJo1i9DQ0C7jS05Oxm63
      s379egoLC8nIyMBoNFJcXExDQwNnzpwhLCyM5ORkWWm6bt06HA4H8fHxZGRkEBgYyIoVK2hr
      a6NXr16EhYUxePBg9Ho9Z86coaysjNbWVvLz8xk0aBBff/01ffv2JSAggF27dnH//fdfclPw
      tgC3EUqlkjlz5qDVaqmvr+enP/0pGo2GkydPYjAYiIyMpKioCLfbDcCYMWPIycmhuLiYxx9/
      nPDwcKZNm0ZycjKlpaXMnTuXwMBA+vbtS+/evWloaKCwsJDhw4fT2NhIXV0dvr6+BAYGymrO
      a800azQann76aSoqKujduzdTpkzBaDRy4sQJMjMzcTgcVFVVAaDX65kzZw4OhwNJknj88cfR
      arXMnTuXtrY2fH19eeihh/Dz82PkyJH4+/tTWlpKeXk5I0aMoKysjPb2doKCgtDpdGg0GoKD
      g69ocbwzwbchHo8HSZK6ZTsoiiIejweVSiVv22lH3p39bxRJknC73dfs/lxM53i/QqGQl21e
      brf4XfFKIbzc0QiCIHTZXrnd7qvOtHnxcjvRZQKYTKabVoHDi5dbGW8XyMsdi1cN6uWOp1vz
      AG63+5IukVKpRKfT4fF4UKvVCILAqVOniIiIuGIMWBRFbDYbOp0OhUKB1WpFrVbf9EUVl9O5
      xrSzgdNoNPj4+Nz0UY1bCUn0gNsB6o6ZVcntAEGBoFQBPX/ekscFogdB7YMkieC2g+rKWeAf
      km61ABUVFfzhD3/gtdde42c/+xn/7//9P8rLy1m2bBnt7e0A5OXlcf78+Sv2bWpq4ve//z3N
      zc0A/OUvf+HgwYM38RS6pq6ujrlz5/Laa6/x5ptvsnHjxtv+wV6yt+HY9w6SuRZJdOM8/DFi
      w5nr7/gDIRrLcez/B5LDjNhahvPABx0J24N0qwWIj4/nlVdeQZIk3n//fWJjY9m+fTsbN26k
      ubmZKVOm4Ha72b17N9u3b2fUqFGMHDlSHqft1Gh3jk93LtH77LPPKC8vZ9q0aWRnZ7N06VLK
      y8vJyclhwoQJbNmyhezsbMLDw1m/fj1jx47l2LFj7N69m0GDBjFlyhS2b98ui8CGDBnCxIkT
      5TtKaGgov/nNb/Dx8UGr1XLkyBEcDgdZWVl88803DBgwgK1bt9Le3o6/vz8PPPAAra2tlJSU
      4HK5CAgIQK/Xk5eXR2xsLPfeey8Wi4XVq1djtVqZNGkSSUlJbNiwgZKSErKzs5k0adI1J4O+
      TxS+QajTZ+A8/jnKsD4IumAU4encCnd/AGVIMh7/KNyluxGNFSh7jQRV1w4TPxTdagFUKhUB
      AQGYTCYqKyuZMGECKSkphIaGyhdo56KFvn37snbtWlm/AVBTU8PixYv58MMPuXDhAgBbt27l
      woULjBkzhsWLF1NdXU1gYCC5ubl8/fXXnD59mrq6Og4dOkRVVRX79u2jpKSEvLw8JkyYwPr1
      6yktLeXIkSNUVlaSlZXFihUr5BYJOkazli9fzueff05hYSGxsbGsXLmSd999l7a2NqDDUaBf
      v34UFRVx4MABamtrWbJkCXv27EGj0fDBBx+Qk5NDRUUFW7ZsYd26dbS0tMgCsVOnTrF9+3Ym
      TJhw0yoXfncElBEZCFoDrhNfos68D0H5/XY1bwwBVe8puM9vASRUsUN6vEva7YdgURTZunUr
      /fr1IyoqisTERMLCwsjOziYsLAwfHx/GjBnDsGHD0Gg0l3Q3tFot0dHRxMXFyTqMM2fO0NbW
      xvHjx2lra8NoNNLc3MzGjRtpbGzEZDKRmZnJ+fPnqaioIDY2lsbGRpqbmykoKMBms1FaWgpA
      bm4uubm5qFQqHI5/NqlqtZqkpCSSk5MJDg4mMjKSrKwsjh8/zsyZM1GpVMTFxTFy5Ehyc3Mp
      KSkBICgoiJdeeomEhAQqKys5efIkbW1tlJWVkZycTFlZGXv27MHPz4+wsDCUSiXr1q1DpVLd
      tAJu3xVJksBlQxIU4LL1aCxd4rKBRo/kMCOJrp6OpvsJUFVVRX5+PrNmzZLtKhwOB+3t7bK2
      pJPLszokJIRJkyYxY8YMYmJigA7hVnh4OLm5uTz77LO0tLRQWFjI888/T79+/QBISUmhvr6e
      gwcPkpOTQ0BAAIGBgYwcOZLnnnuOjIyMa8as0+nIzs5m4MCBREdHYzabKS0txWAwsH//fkRR
      xO12Y7PZqK6ulos+x8TEyBqSgIAA+vfvzxNPPMGMGTPo378/f/zjHwkKCmLx4sWEhITw6quv
      MmbMGBYsWIDN1oMXnSThKd+LoPXHZ9TzOI8tRnLZey6ey5EkXGfXo06fgSIgFnfx9o6H4R6k
      253VgoICEhISZI/FgIAAgoOD+Z//+R9+8pOfXHLRd5bBvPjvyxk3bhxvvfUW8+fPJyIigunT
      p1NfX8/bb79Nc3MzI0eOJCQkhIiICEpKSnj00Udla74FCxbg6+vL3LlzLzn+5Z/T0NDAq6++
      ikKhYMKECSgUCsLCwrjvvvv45JNPCAsLo7CwkNdeew2A5557jsbGRnl/nU7H4MGDWb58OYGB
      gUyYMAG73c7evXux2WwMHz6csrIyFi1ahNvtJiYmpsf6/wCipRF32R40Q/8DhY8Bd8U+PDXH
      UMUPg1tg9MtTfxpEN8roASgCYnAeXYQqYSRo/Xospn95IqzTRu+7CJM8Hg92u11ewNHZfbnY
      eq/Tku/ihRgWiwWNRvMvD6WWl5fzwQcf8OKLL3apFOzEbrcjCAJarRZJkrBarYiiiJ+fH4Ig
      4HQ6sVgsGAyGf1mg5eWH444Xw7W0tLBjxw6mTZt2Vb9LL7cvd3wCdA7JXt5l83Jn4FWDernj
      6TIBPB6PNwG83BF4xXBe7mi+cwJIkoTD4bjpLYXT6bxkNteLl++Tbg9af/LJJxiNRrRaLQMG
      DKBfv36sX7+eIUOGXGJndzkrV66koqKCoKAghgwZQmpq6jXHyouLiyksLGT27NlAh3nTli1b
      kCQJjUbD5MmTSU5OvoFTvHOQbK1QdRBS7kIQFEi1x0DjhxCSwq2gB5JaS8FcixA/Asllg/Ld
      0GssQg/qgW5oImzq1Kl4PB4+++wzevXqRZ8+feRCZfX19XJ9p+DgYFnycPToUbKysvD19eXd
      d9/l+eefJyEhgZqaGux2OzExMfj5+dHe3k5tbS1FRUWyMwB0KFHNZjPTpk2TnQeqq6sJCgpC
      kiQsFgsqlYr29nZsNhvBwcGEhITQ0tKCWq2mra2N8PBwjEYjra2thIeHExQUhMlkoqGhAY1G
      Q3R0NDabjYaGBlQqFdHR0T/OYVGtAcnZjlCyDSm8L1LZLoTsJ3o6qn9iiEE6uwZ8Q8BU1RGr
      omedebr96UqlkoCAAPmCc7lc7Nixg5kzZ9LS0sKCBQswGAyYzWZmz55NVlaWvF9aWhrJycl8
      8803WK1Wjh07xldffYVSqSQ1NZWHH36YpUuXUllZicvlIiIi4pLP1uv1REVFoVAo0Ol0fP75
      58TFxWE0GvHz88Nms3H06FFUKhU+Pj788pe/JC8vD7PZTHFxMU8++STLly9HqVSi1+t5/PHH
      WblyJa2trWg0Gu6//37ZX1Kr1fLggw9es1W7VREUSoS0aYgH5kHpDoTsJxB8Ans6LBlBqYFe
      45CK1oEkIuQ8haDo2YnDbj8DGI1GFi9ezPLly0lMTESv19Pe3o7L5WLfvn1kZGTw7LPPYjAY
      cLn+KXJyOp2sWrWKN998k4CAAEJDQ9m5cycDBgxg8uTJHDx4kAsXLlBaWsrLL7/MtGnTrvjs
      w4cP8+c//5kPPviAiooKcnNz2bRpE4WFhYwePRqXy8XgwYN57rnncDqdNDc3Y7Vaqa6u5oUX
      XqCiogJfX19mzZpFU1MTlZWV1NfX07t3b+655x6Cg4Opq6sjJSWFe+65h8jIyJvz7fYEah0E
      p3QsNgmI7+loriQ4GRwmCIhD0F29nNIPRbcTICQkhOeee46XXnqJsrIyysrK5PdEUUSv16PX
      66+QAigUCoKCgmhtbWXEiBEEBwdjtVopLi7m/PnzZGRkYDKZ0Gq1+Pv7d9n1GDNmDG+99Rav
      vPIKycnJshGTr6+vLJHQ6XQEBgai1+sxm80A3H333SQkJGCz2aivr6egoIC4uDhCQ0O5//77
      qaurY8GCBdTU1PDAAw/ILVlXC3t+LEh2I1LLBQiIhdpjPR3OFUh1xyGwF7RVIpmqrrv99023
      E8Bms3H8+HEOHz6M2+2Wi6EJgkBmZib79+/nww8/5Ny5c5fsp1arGTt2LM888wwbNmzg1KlT
      pKWl4fF46Nu3L1FRUURFRdHS0sKWLVs4fvz4FZ9dUVHB7t272bdvH01NTWzdupXMzEwkSWLX
      rl243W7Ky8vZsWMHTU1NcheqsxRmWloagiAQHx9Pr169UCgU1NTUMHz4cHx9famtraWyspJh
      w4bh7+9/iSDux4TkdiCd+gpF2jSEgf8fYsUeJFM13CKT/ZLDDNUHEVKnIiSORyr5pmOZZA/S
      ZaX4zpVbF9MpfVYoFIwfP56UlBTUajXx8fHy+gCNRkNpaSmjRo2SVaOCIJCYmEivXr0IDQ3F
      YrEwcuRI7HY7JSUlhISEMHDgQEJCQjh16hQhISFkZmYSGxsrf7bVaqWtrQ2r1UpkZCRWq5Vx
      48bRt29fLBYLzc3NlJWVoVarmTJlCr169UKpVBITE4PBYJAfyouLi1Gr1aSlpVFfX09hYSG9
      evVi+PDhNDQ0cOLECWJjYxk1ahQ6ne77/ea/D5wWBEGCqBwElfbbLobU8e+tIPWw1CMY4hCC
      kzoehF1WBEN0jz0Iv/322290qQW60fH9AwcOsGHDBgRBICAggGefffa6Ss3OZZKXW959Fzu+
      r776Cn9/f3Jzc6+qxrza5ykUChQKxRV/e7n90ev1XYvhbjQBPB4PdXV1CIJARETEDy4Jbm5u
      RqlUEhh464x4eLn1uWoCOJ1OrxbIy22Pr6/vnS2H9nJn43WG83LH400AL3c03U6AtrY2Wlpa
      aG1txWaz4Xa7KSgokP11roUoihw+fPimOSbY7Xby8/OvWgqzcza4vr4ei8XSZYHoayGKIidP
      npTd7C4/9sGDBy+Z7b4cj8eD2Wz+zsWkvyuS6EFy/tMOUnLZkdxO4Nbo5UoeV4cIDpAkEclp
      +cG/o8vpdgL84he/4NVXX+W1117jT3/6Ey0tLaxcubJbxck6C5l9l9qyXWEymVi2bFmXCWW3
      25k/fz6vv/468+bNY+HChfLMcHfxeDysW7dO9h26GJvNJheivho1NTX89re/veY23wcd1oj/
      +Kc14pEFiE1FP2gM10I0VuDY/26HNWJLGc6DH4LnR2CNCB1mUXPnzkWj0TBv3rxLnN9qa2tZ
      vXo1zc3NjBs3jpEjR1JcXMyKFSvw9fXl0UcfBTrG4o8cOYLJZCInJ4fPPvuM5uZmZs+ejVar
      ZdGiRSgUCubOnUtISAjz58+X1+0mJCRQWFjIiBEj6Nu3L263m0WLFtHW1sacOXNk8drhw4cp
      LS3llVdekVWmOp2Oc+fOsXLlShQKBQ8//DA+Pj5s3LgRl8tFS0sLjzzyiFyU7cyZM5SUlJCb
      m4vRaJSLxuXm5pKdnS2fd3l5OStWrMDhcDBjxgwyMzPlOYyL72wej4cNGzZw4MAB+vXrx733
      3su6desYOnQobrebXbt2cc8991BYWIjBYECr1bJ69Wq0Wi0PPfQQ7e3tFBcX43Q6CQkJYcSI
      EV3+RgrfINR9Z+E8/hnK0N4IviEowm4la8QkPIYY3KW7vrVGHA3KH4E1InSU3lyzZg3z588n
      Ojqa4OBg+T2bzUbfvn3Jzs5m0aJFVFdX884775CZmcmQIUMQRRFJkjh79izLli0jJSWFTz75
      BJfLxZQpU7DZbPz1r38lNTWVuLg45s2bR3t7O9u2baNXr16UlJRw/Phx0tLSWL9+vTxMm5SU
      RHBwMMuWLZMvuHPnzjFw4EA0Gg2rVq1ix44dNDQ08PHHHxMZGYmfnx8ffvghbW1t7Nixg+jo
      aNn17sCBA+zcuZMxY8YQEBCAJEmsW7eOc+fOMXz4cObPn39Jt8hisTBkyBD69G74QtUAACAA
      SURBVOnDxx9/fNUuXkFBAevXr2fcuHEcOnSIbdu2UVNTQ0FBAYcOHWLDhg1UVlayY8cOLBYL
      n376KQkJCSgUClauXElNTQ1Lly7l4MGDGAyGa/xKAsrwdARtIK6TX6HOuPdbZ+hbBQFV2l24
      z2/t+H/soB43I+j2t6PRaEhOTsZisXDmzJlLujMajYYTJ05QV1eHyWTi5MmT+Pj4MHXqVJRK
      peyb849//INHH32U8PBwSktLefHFF4mPj6e0tBSbzcYDDzyA2+3mueeek7X7o0ePpqqqisTE
      RFJTUzl27BiSJKHVahk9ejTZ2dn86U9/wmq1otfrUSgUeDwetFotQUFBbNy4kT59+uDxeJgy
      ZQoOh4M//vGPOBwOgoODmTp1KpIkUV5ezunTp5kwYQLDhw9n3759iKJIWVkZkydPZuTIkezZ
      s0fuFkmShI+PD3v37sVsNtPW1nbVurzFxcUMGDCASZMmYTKZKC8vJy0tjXPnzmG328nKyqKs
      rAyXy4Wfnx9lZWX4+PhgsVjweDxkZmYSGhrKr3/96+tO9kmSCC4LCAokl7VHF5t0idMKGj8k
      hwnJ4+zx+LrdAmi1WjIyMsjNzUWSJLkityRJrF+/Hr1ez4svvkhoaCgGgwG73U5dXR1tbW04
      nU50Oh1Tpkzh4MGDWCwW/P39KSkpkX9kURSprKyktLQUlUp1iRanq7tEp8N0WVkZWq1WVpFm
      ZGSwf/9+6uvryczMlCuTd85WV1RUoFKpLpFqdB5fq9VSXl6O2Wymvb0dQRDw8/OjvLxc9iXt
      FAFKksSSJUvo378/zz//vGya1Ynb7aa5uZnW1lb8/f2pra2lubmZiooKDAYDffr0obi4mJqa
      GnJzczlw4ABarZawsDCCgoJIT0/nJz/5CQ8//DDQYdd43ZluScJTthfBJwDtyF/iOnoLWiMW
      bUDddwaKgDjcJT8ia8TW1lbmzZuHSqUiNjZWFpx1it1WrFhBWVkZbW1tREREMGjQIN544w0i
      IiL46U9/ilqtZvLkyQAsX76cyZMn8+mnn7J27Vruu+8+cnNzef3115EkiQcffJDAwEBZk9Op
      37n4/2q1mrfeeov29nbmzJkjL7PMysoiKyuLt956C7Vajb+/P2FhYQwcOJC///3viKLIzJkz
      L9H8dPoCjRgxgjfeeINz585hMplQKpWMHTuW999/n927dxMeHk5CQoJ83r1792bVqlWyQvZi
      qqqqeO2114iOjmbOnDls2bKFV155BY1Gw6xZs/D390cURXr16kVSUhKVlZVMnTqV4OBgRo4c
      yYYNG9izZw8DBgwgKSmpW10F0dKIu2I/miE/ReETgLvyAJ7aAlRxQ28JMZyn4TSIIsqoLBSG
      GJxHP0WVMOrHbY3Yic1mQ61WyxeiJEk4nU6USuVV1wC7XC5EUZTvnhffda9FZ8idQ5GdsueL
      cTqduN3uS7oknYvtL7ZZvPy4nTqoi63OXS4XZrP5kqTsxGq1otVqr6t/8ng8tLW1YTAYuuUf
      6nK5cLvdt31Vm57kjneG83Jn45VCeLnj8Vojermj8Vojermj8XaBvNzR/EvWiCaT6Yrhv6tt
      azQab1qr0jmici2RW+cSx++CJEmYzeYuxXaiKGI0Gm9YYOfl1qTbCbBw4UL+/Oc/8+6777Jv
      3z6sViurV6/ulhiu003uZonhzGYzX3zxxVWlB+fPn+f9999n3rx5bN68+YZFaZ3anYutXzqx
      2WwsXrz4msdsbGxk1apViKKIw+EgLy+P1tbWG4rhuyDZWpHOfS1PLkm1R5Gaz3HLqEFbS5Eq
      9nb832VFOr+po5h3D9LtibATJ04wbdo0PB4Pn3/+ObGxsVRWVmKz2bDb7dTU1OBwOIiIiJC9
      fyorK1EqlURHR8tT/W1tbbIMobKyErvdTlxcHCqVitLSUgRBICkpCZVKRXl5uXyn1ev1GI1G
      QkNDEUWR0tJSedY4ISFBnjmuqKjg3Xff5a677iI+Pp76+nq50n1VVZVsjyIIAg0NDXg8Hlwu
      F3FxcWg0Gurr62lubqaoqIjU1FTcbjc1NTWYzWaioqJQqVSUlJTg8XiwWq1UVVUhiiIxMTH4
      +/sDHdLx/fv3M2PGDFwuF4cOHSIrKwu3243VasVqtRIWFkZoaCj19fXydxgREUFgYCBGo5Ha
      2lr8/f2JioqS1axms5mQkJCrl2PVGpDcVoTib761RtyNkP1v/8LlcZMxxP7TGrGtqkOq8WOy
      RvTz85OtES+muLiYTZs2YTKZ8Pf355e//CXLly/n3LlzhIaGyka3drudFStW0LdvX7RaLStX
      riQ8PJyxY8dSWlrKvn37kCSJiRMnMmnSJF5//XVSU1Oprq4mPDwcp9NJREQEs2fPxuFwsHbt
      Wqqrq5kyZQozZswA4MiRI6SlpTFp0iTa2tqIjIxEqVSyevVqDh8+jCiKjB8/nqysLN555x3C
      w8Opra3l/vvvJyUlhb/+9a8EBARQUVEBwMmTJ/nkk0/QarXodDp++ctfyufdWSPYbDaTlJTE
      E088cVVHCUmSWLt2LSUlJbjdbgICAvjP//xPvvjiCxoaGuQkfPjhh1myZAktLS04HA7+/d//
      nVOnTlFcXExpaSnPPPMMvXv37vIzBIUSIfXuDmvEsh0I2U8i+AR09yf+3hGUakgc/601ooSQ
      M7fHrRG7nQBGo5ElS5bIhlYX34Xi4+O56667qK+vZ8WKFeTn53Pq1Cm5SrtCocDlcrFixQoU
      CgXDhg3j7bff5pFHHiE9PZ3GxkYWL17M7373OxwOB3/+858ZOHAg/v7+zJ07l1WrVhEbG0tK
      Sgqff/65LHZ76qmnqKur46uvvmLq1KmoVCqMRiMRERE0NjbywQcfYDQaefrppykoKOBnP/sZ
      ZrOZpUuXkp6ejkaj4ZlnnmHbtm1cuHCBmpoaMjIyuO+++/jggw8QRZE9e/Ywfvx4Ro0axR//
      +Ee50DdAamoqarWahoYG8vLymDlzpuyH1BWd1eWzs7N5++23qaysxO12M3HiRFJSUpg/fz4X
      LlzgwoULzJkzhwMHDnDkyBEEQaCoqIhXXnnlEr+kLum0Rqw8AAFx3f15fziCksBhhrB0BF3P
      u3h8J2vEioqKS1SRBw8eZN26dfLqMLPZjEajITAwEF9fX5RKJS6Xi9OnTxMWFoYgCNjtdsLD
      w9HpdLLmPyQkRK4673K5ZPtDjUaDTqeTkwk69Du+vr5ERkZis9nkB9aQkBAqKiqIiIjg6aef
      JjAwEJfLhUKhwGAwEBISIs9zdLZqPj4+iKJIW1ubXB9YpVIhSRI2m42QkBD5XKxWq/ydbN26
      VTb87aw5DB3SjM46Bw6HA6vVKksldDodBoMBvV6PyWRCEAR8fHzkCpNms5nW1lYKCgrw8fEh
      OjoagIkTJ9KrV6/ryij+aY0YB7VHu/vz/mBIdQUQlNhhjdjW89aI3W4BbDYbx44dk/vMF68H
      aGhoIDAwkLCwMCRJkuvlrl69msjISFJTU9HpdDz55JOsXr2a48eP07dvX1auXMnQoUPR6XRE
      RETwxRdf4HQ6SUhIICgo6Kr1f6FjNObYsWOcPHmSpKQk+Rlg2LBh7Nq1i8WLFxMWFobD4cDf
      3x8/Pz82bdqEzWYjNja2S+OuxMREtmzZIneBFAoFvXv3ZuvWrRiNRhobG0lMTJSNtWpqaoiO
      jr5Cox8REYEgCHz55ZeoVCoEQZBbzLNnz9LQ0IDNZiM+Ph6328358+epqalBkiQSExMJDw/H
      YDAQEREhK0m70jtdToc14goUadMhKBHx8PsoAuIQ/GNuCTFchzXiIYT+czrs0Uu2QtacDtfo
      HqLb1ogulwur1YparWbChAkkJyej1WpJSEggNjaWmpoaXC4XvXv3pl+/fvTp04fz58/jcDhI
      TU1Fr9eTlZVFcnIyRqOR0aNH09TURG1tLX369CE7O5szZ84AyGpQtVpNcnIyGo2GqKgo2eIw
      ISEBf39/ysrK8PPzY9asWbLozc/Pj9TUVGpqajAajQwePJi+ffuSmJgoPzTfe++98l240ys0
      JCSE7OxszGYzdXV1ZGZmkp6eTmpqKk6nU1ZrpqSkoNVqSU5OJjo6mgsXLqBWq+nTpw+pqalo
      NBpUKhXx8fFUVlYCMHPmTKKjozly5AiNjY0olUqmTZtGXFwce/fupaWlBZ1Ox7Rp00hMTJQH
      GKxWK2lpaQQHBxMREXHN7hXwrTWiAqIGfGuNGAwCCD63ijViA0JAHEJQIuhCwO1A8L8NrBGh
      4458cbnR7pQg7dym05qwc8TnespKedH3t/929eDZeayL3+s8p4vl1V3FI0nSJTFcy7bx8vO+
      fJ/O8xFFkUWLFjFgwAAGDBgg7/PRRx+Rk5NDdnb2JbF2Fb+Xm8tNs0b0cn0kSaKxsRFfX99L
      5N4NDQ1XvOblh8FrjejljsZrjejljsa7HsDLHY83Abzc0XQ7ATweD0ajkcrKyi5t/zrXAF9N
      HWqxWMjPz5ff7xxHb2lp+RfC7zrO5uZmGhsbaWxspL29/YpYb1ck0YPk+OdvI7ls34rNbo3z
      l9xOJKel4/+S+G2sPauq7XYC7Ny5k9/97ne8//77fPnll12qIb/++msKCgq63L+lpYWvvvpK
      nrEVRZGjR49SUlLyHUPvmvr6ep5++mn++7//m//93/9l+/btd4x0WXKYcOx/D8lU02GNeHgB
      YtO56+/4AyGaqnAceP9ba8RSnIc+Bk/X/q4/FN2agegsdXr//fczePBgWV25aNEiGhsbGTFi
      BAkJCaxatQqDwUBZWRmjR49mzZo1NDQ0MGLECNm60OFw8PXXX5OVlYWPjw86nY78/HxOnz4t
      Sxjmzp3L3r17KSkpoaqqirS0NGbMmMH58+dZtWoVwcHBPPjgg5hMJoqLi2lpaSElJYXBgwcj
      SRLh4eH8+te/xsfHB61Wy4EDB3A6nfTr149t27aRk5PDpk2bsFgs+Pn58fDDD9PU1ERxcTEO
      h4OwsDDUajUbNmwgLi6O++67D5PJxOrVq7Hb7UyePJmQkBBWr16NxWJh0qRJ5OTk9Lh7g0IX
      eJE1YhoKv/BbyxoxOBFPQCzukh2IxkpUiT8Sa8TGxkYkSWLw4MH4+fnJ9iBJSUkMGjSIr776
      Co/HQ1xcHOnp6WRmZlJYWMiJEyeYOHEier0eURTxeDxs2bJFVokWFRVRU1NDaWkp+fn5DB06
      lJ07d9LS0sLZs2cpKipi9OjRbNmyhfLycj744AP69++P0+kkLy+Pmpoa3nvvPYqLiy8xjWpt
      beWzzz5j8eLFFBYWEhcXx5o1a3j//fex2+14PB4OHTrEwIEDKS4u5vDhw9TW1vLZZ59x9OhR
      NBoNCxcuZNiwYVRVVbFt2zY2bNiAxWJh3LhxqFQqNm3aRGtrK+PHj0etVt8i3SwBZXgfBF0Q
      rlOrUPWddetZI6behfvCdhCUKGMG9vxNozsbKZVKJEm6pH/v8Xg4d+4cO3fupKamBq1WS3R0
      NMnJyfTp04fExET5QhUEAZVKRUFBAV9++SWPPvqorJ3vZPDgwYwZM4bQ0FBZcDZ06FBGjx5N
      YGAgra2tVFRUcPLkSRoaGqitrcXtdpOcnMwzzzxDamqqfCwfHx8yMjLo168f4eHhREdHk5mZ
      yalTp5g2bRpqtZq4uDiGDx/OuHHj5G5YWFgYL774IjExMVRVVcn275WVlaSlpVFWVsaOHTvQ
      arWkpaXJyaHVanv8h+xEkkRwWkBQIjnbezqcK3G2g9avQ7TXw90f6GYChIWFodVq+eabb2hp
      aaGmpoZt27bhdDp55plnSEhIADqsBZuamnA4HAQGBvLmm28yceJElixZQlNTE2lpaeTk5Hyn
      VVo+Pj4EBASQmZnJo48+yr333itrbi5fIHJxAoSFhWE0GiktLcVgMLB//348Ho+8OKWqqkpO
      xpiYGAICAvD19SUwMJABAwbwb//2b0yZMoWMjAzeeust2Yw3NTWV//qv/yI6OpqlS5d2a2no
      944k4Snbg+ATiHbUL3EdWyr78d8SSBKusxtQp89AEZSAu/hHYo2oVCp5+OGHWbx4MVu3bqVP
      nz4MHDiQTZs2UVtbS1NTk1wwe8GCBbS2tpKenk5eXh6iKBIfH4+/vz9BQUHMmTOH9957j/z8
      fFQqFQqFAqVSKWtvOtWTl7+m1WoZP348a9euxWAwMHr0aMLCwq7QDQmCQFNTE6+//joKhYKJ
      EyciiiJxcXE8+OCDLF68mJCQEI4fP85rr72GWq3m2WefpaamRj6WXq9nyJAhrFixAoPBwKRJ
      k7BYLOzbtw+bzcbo0aM5cOAAu3btwuFwMGzYsFtCs9NhjXgQ7dCfImgNeCoP4qk9fmtZIwLK
      qP4oAr61Ruz1I7JGlCQJq9WKTqdDoVBcYYcIHapRl8uFTqfD4XDgcDgwGAw3rYvgcDhkZ+bv
      SklJCQsXLuRXv/oVQUFBV7147XY7giDI1o1WqxVJkuQWp3MdgJ+f3y3TBfLSfe5Ya8Smpib2
      7dvHlClTuqWz93J7cscmgBcv0JEAXT4DdLo2e/Fyu9NlAnSO2XvxcrvT80MXXrz0IDeUAJdP
      ht0Mulp/3Inb7cZoNP7Ls6ydVorfV6smSRKtra23TLdRkiSc7qt/rz2NKN468d2QL9D69eup
      rKwkKyuL3Nzcf2kExePxsG/fPvbv309gYCCzZs0iIiLikm3q6+tZv349c+fO7XKdcHt7O+vW
      rZMXnwuCwLhx4xg0aNAl27W1tbF27Vruueee69bZslgscv3jsLAwJkyYQHx8/DX3cblcLFmy
      hCeffLLHlzaKosTWo2W0WRzotCpG94sjQH/rFMprNFrZe7IKp0ckOsSP4X2jUfbgHEq3PlkU
      RT7++GNaWlqYOXMmkZGRiKJITU0NhYWF1NXVyb44paWlnDp1CpPJRHNzM2fOnOHChQs4HJd6
      QBYUFLBixQrGjBlDTk4OCoUCk8nEqVOn5O3tdjsVFRXyHfb06dNyZUXomHnuLFNaW1vL2LFj
      6dWrF7W1tVitVpxOJ7W1tdhsNkpKSjh37hxFRUXY7Xa5KF9hYeElpU/tdjuHDh1i9OjRGAwG
      /va3v1FXV0dZWRknT56ktrYWj8dDY2MjRqOR8vJyLBYLpaWleDweGhoaaG1t7ZG7mwTsPFGJ
      n07DtGHJxIcZ2H2iEo/nFmmZgC35ZWQmhnH3kCSMZjtnK26uHP5G6VYLYDabqays5OWXX5aN
      miorK3nnnXfkO/MLL7zAhQsXWLt2LUFBQYwbN466ujrOnTtHY2MjM2fOZNSoUfIx9+zZw6RJ
      kxg6dCiCIODxePjwww8pLS3F6XQyffp0kpKS5O137dpFUVERTU1NTJ48mdzcXNRqNUlJSTgc
      Do4ePUpGRga+vr7MmzePSZMmERgYyBdffMH06dNpaGhg48aN1NbW8sgjjxAVFcUnn3yCUqlE
      p9Px0ksvyRN6CoWCzMxM+vfvz+bNm2lvb5c9fiwWC3PnzmXbtm00NTXR3NzM448/DnS0SIsW
      LWL69OnXr+j4PSB6RMrqjPwkNwONWklyTBCny5twe0SUyp5/3HO5PNidbpKiAlEoBIb0iWJX
      YRUZvUJ7LKZuJYDJZEKtVl/yox46dIiUlBQeeughFi5cyN69ezlz5gyzZ8+mb9++KBQKmpqa
      iImJYd++fRw8eJDg4GBKS0vp27evXE2ycwbVbrdz8uRJXnrpJaqrq9m4caMsoQYYMmQIMTEx
      HD9+nD179pCbm3vVeNvb23G5XHg8HiwWC6IoEhkZyVNPPcWZM2c4evQo4eHhhIaGMmHCBBYs
      WEBpaaksqHO73Sxbtozm5mYyMzOJiYnhnnvuobW1lVWrVlFeXk5bWxv19fW8/PLL+Pr6Yjab
      mT9/Pv369SMjI6NHZobdHhGVUoFS0fHZGpUCUbpVlsOA3eVGp1Wh+DY+f18NNoerR2Pq1m0h
      KCgIp9NJQ0OD/JrVaiUgIAB/f3/8/f2xWCy43W6Cg4Px8fHB5XLx5ZdfUlBQgCAIuN1ubDYb
      JpMJp9NJWFgYZWVlclfB6XSiUqkwGAwEBgZe8rBttVr58ssvKSwslLe9UZRKJT4+PgQHB2My
      mbDb7dTW1nLs2DEyMzOvkFYEBQUxYcIEnnjiCVpbW1m0aBHV1dUolUo8Hg8qlYqpU6cSEhIi
      WxoWFxcTFRV1XV+j7wu1SonHI2F3dTzsWx1ulIqr+zL90Oh91LTbnLi/7ZI1GK0E6L+7pOVm
      0K0WoNPV7dNPP5W7LImJiaxZswY/Pz/OnDnDk08+iSAIrFmzhkGDBsl25unp6Zw/fx6AnJwc
      cnJygI5uxjvvvCPX/O3fvz8+Pj5s2rSJuro6evXqJf9wLpeLhoYGsrKyKC8vv268Pj4+HD58
      GK1WK0urLRYLx44dIz8/nz59+hAREcHZs2eJjY3F4XBcYpXYeXF3PtB29vvj4uLYv38/gCzx
      7owxKiqKxx57jOXLlxMcHEyfPn1+8AtPoRDISgnnm6Pl5KRGcL66lbBAX9S3QPcHQKlQEB6o
      53BRLdEhfuw9Wc2oftcx+/2+Y+qONaIgCKSlpSFJEtXV1URERDBgwAB0Oh1lZWWMGjVKLuhs
      Mpmora0lNTWV2NhYiouLiYmJISMjg9jYWNkRLSgoiNjYWKqrq+Wi071796akpITQ0FDuvvtu
      uXVJTU0lNDSU06dPExERQXp6Or169bokvoCAAOLj41EqlXLtgcDAQDIzM0lMTESj0VBXV0ds
      bCyTJk0iISEBjUZDeXk5Op2OPn36oNFoEAQBnU5HUlKSfCcPCAjAbDbT0NBA//79ZbvCTvk0
      dCTdwIEDZX/U8PDwHrnzRgTpabM4qGgwodOoGJgWiVZz6yyKiQjWU93UTl2LhaSoQFJjgnqs
      hbpha8RO+8JOa8GuLAMvtkSEjhGka3UJLrYA7Dy+IAhdKjQ9Hs9VbQ2vF2fn65fbN1683bX4
      MVkVdpyXhOIW6v5czK0Sn9ca0csdjV6v71oMdy1DWy9ebie8cmgvdyxea0QvdzzeBPByR9Pt
      BHC73bS0tFBWVobJZLph5aPT6eTIkSNYLJarbtPa2nrFOH9jY+NV3eY68Xg88r6NjY24XDc+
      u1hXV8fJkye7fK+8vJyioqIbPuYPjSS6kext/xz1clqR3HZulblgye1AcnRYtUiS+G2sPyJr
      xFdffZWPP/6YFStWXCFuux42m43Vq1djNBqvuk1VVRVHjhy55LXS0lLWrVt3zWPv2bOH119/
      nY8++oh33nlHLrV0IxQVFbF58+Yu3ysoKGD37t03fMwfGslhxnHgAyRTdYc14pEFiE0Xrr/j
      D4RoqsFx8H0kuwmxpQTnkYU/LmvEBx54QLZG7LxjWq1WYmJiUKvVrFu3jujoaObMmYPH42HZ
      smXU19czffp0UlJSgI679TfffIOvry9hYWGsXbsWl8vF3XffLVeFFEWR06dPs2bNGoxGIwaD
      QdbnFBUVMXbsWHJzc1EqlTidTlasWMGsWbMYOnQoNpsNnU6HxWLhs88+o7i4mDFjxnDXXXex
      ceNG6uvrqaqqYujQoYwfP55Tp06xefNmamtriYiIwG63k5eXR35+PllZWXKNY+gYv164cCEV
      FRX069ePKVOm9Lj8+WIUukDUGffgPP45ypAUFP5RKML7cOtYI/bCExjfYY3YVoUqccyPwxqx
      UwPUKXEICAigtbWV+fPnU1RUhEKh4P/+7/+YMGECRqORjRs3smHDBoxGIyNGjOCLL76gqakJ
      SZI4efIkmzZtIjY2Vr6zjxs3DrVaTX19PWfPnqWuro733nuPIUOG0L9/fwRBYN++fRQWFjJ9
      +nTy8vLker2NjY2IosjQoUPZvXs3X3zxBRUVFWzYsIGSkhImTpzIqlWrOHPmDMeOHaOpqYlB
      gwaxceNGysvLWbBgAWlpafTv3x+FQsH+/fvZtWsXkydPZseOHeTn51/yXURGRnL33Xeza9cu
      WZt06yCgDOuNoAvGdXotqvQZPV6J/VIEVCmTcJfsAIUSZfQt4KfanY1UKtUldXA7SUxM5Oc/
      /zl+fn5ybdvGxkbq6+s5ffo09fX1HD9+nLa2NiwWC1VVVSxcuJBJkyYRHR1Nenq6bK94sRan
      oaEBg8HAxIkT5aro58+fx2g0cvDgQWw2m6zhv9i2MT4+nurqas6ePUt5eTnjx48nNzeXPn36
      UF5ejlarZcSIEQwZMgQfHx+MRqNsuJWcnIxKpaKyspLBgwf//+2de1hU953/X3O/MBfugwwI
      AgqCoEAk8QKKukZN1NZk7ZPkiZe0j22aJ2u27XafTbLdW7Zp0263ffYxjZpqYoM2JkabqKkV
      1Ee8K4p4i8pNHG4DDDPDMMztzPn9wXJ+IWqDiSlk5fUfM2fO+Q5nvud8zznv7+tDaWkp06ZN
      GzT2D4fD2Gw29uzZg91ux+12f+kdcK8RxXB/IWq5AjHQM9zNuRV/D6gNiH1OROHuhtFfBUNW
      I2q1WsrLy+nq6qK5uZlQKITVasVoNEolRx944AFWrlzJvHnzJCfnokWLWLNmDbGxsVgsFkpL
      Szly5AhOp5O8vDz+7d/+DYPBwHvvvSdtT6VS0dnZSUdHh1R8Ozo6mujoaEpLS3n22WdJT0+X
      2qbRaNi3bx9Wq5WEhAQUCgVms5n6+nqpQw5kdgYYCOE5nU7a29ulC/uBGsFdXV00NTUNKk16
      5coVLl26xNq1a8nNzf3S//x7jigiNFQi00ejmTFC1YhXR5Yacchy3CeffJLKykpefvllyQat
      UqmQyWRYrVYKCwvZsmULb731Fk1NTcydO5f6+no2bNjAwYMHCQQCGAwGFi5cSGRkJHv27OHw
      4cP8/Oc/p6amhgkTJqBQKCTfZ2pqKi+//DJ//OMfUSqVzJw5E6/Xy4YNG/jwww/xeDxS2556
      6imOHj3KSy+9xLlz54iPj2fWrFnU1NTw0ksvodFoyMvLQ6VSSbkftVqNgapTaAAAHn5JREFU
      2WwmNTWVX/7yl+zZsweZTEZBQQFOp5MXX3yRjo4Opk2bhlKpRKVSkZSUhNPp5Kc//SlNTU3D
      Fnu+E+HeDgTbGVTZS1FYcpBpjAit52GEPOsU7Jf7rdBj8lCOK0Foq4GAd1jb9KXUiJ99z+/3
      I5fLpbnCgiDg9/vR6XR3rMs7EFfW6/WDlhFFkZ6eHvR6vTRTKxwO4/P50Gq1t92+1+tFq9VK
      P8xgMEhvby8mk+mOIbZwOIzH48FgMEjLhMNhXC4XRqNxkPYR+m8IiKIoJUdH+foyaoYb5b5m
      NAoxyn3PqBpxlPuaUTXiKPc1o0OgUe5rhl2NOEAwGBySBtHv99/SBpfL9YVMEaOMcldqxN27
      d9PU1MSUKVOYN2/eXakR+/r6uH79OtnZ2bfcWoT+p7979+5l9erV0vu/+c1v6OvrY+zYsUyb
      No3U1FT27t1LUlISU6dOlT774Ycf8tBDDw0qlPd5nD17loqKCgRBQK1Ws2zZskET7b+OiH0O
      xKajyCY8gkwmR2w+AxojstgJjIQ8kOioA3cLstRixKAXGg5B2lxkyuHLAw2pA4TDYTZs2IBe
      r2fZsmX4/X68Xi8OhwNBEPD5fOh0OhITE/F6vTidTiIjI2lqakIQBMaMGUNDQwNlZWWsWLGC
      8ePH09vbS3t7OxqNhtTUVPx+Pzdv3hx0Brh8+TLf+ta3aG1t5bXXXuPXv/41EydOJDIyElEU
      aWpqoqenh2vXrpGbm0soFKK5uRmPx4NerycpKQmfz8eNGzdQq9WkpqZKnXbgQdYjjzyCXC4n
      IiKCxsZGxo4dS2dnJ0qlklAoRE9PD16vl/j4eOLj42lpaUGv1+NyubBarbS0tNDd3Y3VaiU2
      Npauri5aW1vR6XQkJyfT29srVdFMTk7+UqWdPhdtJLKwgFi7D+In9XeGgtVf3fbulsgUxKu7
      QR+D6L4JQnDYs0pDViM2NzcPUiNeunSJd999F4/HQ0pKCj09Pfz4xz+mqqqKuro6LBYLhw8f
      Ji4ujqysLFpaWmhpaeHQoUNER0dTWVlJa2srdrudxx57jLi4uFu2q9FoyMjIICUlRar4fuLE
      CSZMmIDb7WbDhg0kJCRIYb2amhq2bt1KbGwsnZ2drF27loqKCurq6ujr62P58uUUFRVJ69dq
      tURF9Ws5wuEwW7ZsYcGCBRw8eJBvfvObnDx5kkuXLqFWq9FoNHz/+99n8+bNhMNhtFotS5Ys
      4c0338RkMqFWq/ne977Hxo0bCYfDmEwmHnnkET744AN8Ph8mk4mFCxfe1VnqbpHJ5DB+AeLx
      3yA2HkZW+B1kGtNXtr27RSZXwrhSxGt7+v8u/A4y+fA+TR/SNcDt1IjBYJCrV6/y9NNP853v
      fAe/309NTQ2nTp1i4sSJOJ1OzGYzs2fPZvr06SxYsIC0tDRWrFhBUlISJSUlFBcXM3bsWEk2
      9Vm6urrYvHkzr732GoWFhahUKvr6+vD7/ezfv5/Zs2fz/PPPS/bmyspK5s2bx+rVq4mIiKCz
      s1Mq1j1p0iSOHj06aP0nTpzg17/+Nb/97W8JBoM8/PDDvPrqq8TExJCRkYHf76ekpIR//Md/
      JBAI0NzcjM1mIzY2lueee47z588TFxfHN7/5TRwOB3V1dXR0dJCWlsbDDz+M1WrFbrczbtw4
      Hn74YZKTk7/ofho6Si1EpyEKQTBZv/rt3S1Rqf21gs1JyLTmz138q2ZIHSA6OppAIEB7e/ug
      1wsLC8nOziYiIoKpU6eyf/9+Ojo6yMnJYd68eYwdO5adO3dSXl4umSZUKhUej4d33nmH2tpa
      lErlHS9gNRqNZG6bPn26FHEQRRGPx0NkZCQajUaKMAxkfNRqNQqFQoo5XL58GUEQpDkJA8yZ
      M4dXXnmFl19+mcTEROLi4ggEAoOiE2q1Gq1Wi06nw+fzERMTw5w5c4iIiMDn89HR0cG5c+fI
      zMwkKiqKlStX4nK5eOutt6itrWXFihV4PB7eeuutv8qsMrGvG9FRhywyFVqqPnf5vzZiazVE
      p4GrGdHVNNzNGdoQSK/Xk5+fz5YtW5g6dSpyuZyoqKhBasDCwkK2b99OaWkpERERnDp1Sjri
      NTc3o1ar8fv9HDt2jLS0NBwOB8XFxZw/f/6O2zUYDMybNw+r1cqWLVv44Q9/CPTLqdLT0/nT
      n/6E3++nvb0dmUxGfn4+u3btoqamhoaGBgwGg2SL+7RpeoDa2lr279+PQqFgwoQJbN++ndWr
      V3P69GmKiooQRZGrV69Kd6gSEhKkusYAkyZN4ty5c1gsFum5ybVr18jPz6e9vR273U5XVxdT
      pkyho6NjkIb9q0AM+RAvbUeetRQiUwifeh25ORmZKXlE1AkWfS5oPo1sytPgbkasK4cpK5Ap
      hq9S55DViOPHj0cul9Pa2kpCQgKpqalER0eTmJgoWd0uX77MwoULiY+Pp6+vj4sXLyKKIg8/
      /DAWiwWz2czNmzfJysoiMTGRa9eukZqaysSJE0lOTsZoNDJ27Fjp6KvRaEhPTycjIwODwYBC
      oWDMmDGSarGnpwe32y3pCpOSkkhLS0OpVGK325k7dy4TJ06UYtUZGRnEx8f3f/H/PUP4fD5C
      oRBGo5HY2FgWLFhAbGy/rntgjrFarWbRokWMGzcOrVZLSkoKOp0Oi8WCWq2mubkZg8FARkYG
      XV1dXLt2jfHjx/Pggw/icDi4evUqaWlpTJ8+/au9CA56+39MllxkCjUyfSzI5ci0kSOiA+Dt
      RBaZ0n920kWDKCAzjBm2C+EvrUYcoK+vj7fffhulUsmTTz6JXq+XlgUGDV0GPg8MWUt4JwbW
      PzC82rdvH5WVlYiiSG5uLsuWLUOtVt+y3FD5wx/+gNVqZcaMGXdMk35aBflpXaRcLh+S7nGU
      4eOeqRFDoZA0p3Y4C08PKNy1Wi0xMTFfOq7c1dWFSqXCZBo5d1JGuXfcsQMEAoHRLNAo/+fR
      6/Wj8wFGuX8ZnQ8wyn3PaAcY5b5myPef7Ha7lMLUarVERkbe07sajY2N+Hw+srKypNdqamqI
      jY2V4hcDc3VbWlowmUxYrVbkcjmhUIju7m5JiajT6YiKirpnbfu6IIZD/doRbWT/HalAL8jk
      yFRaRkQYLuTrz/9ojIjhMPjdoDUxnAORIXeAH/zgB0RHR2M0GsnMzGT58uX39J52dXU1Dodj
      UAeoqKggPz9f6gB1dXW8/vrrmM1mlEolP/jBD9Dr9bS3t/Mv//IvREVFoVarmTRpEk888cQ9
      a9vXBdHfQ+DkBtT5T4ExgcCZTSjTS1FYcoa7aQCE3a0EL7yP5sHvEvbYCX3yEeqHnu2PbwwT
      Q+4AkZGRrFq1ShJItba2smfPHtxuN1FRUej1eurr61m2bBk5OTl8/PHHHD9+nJycHJYvX87B
      gwdRKpXU1tYyffp0Tpw4wc2bNykoKGDJkiXSdkKhEB988IEkt8rPz5feq6ioIDs7myVLliCX
      y6UOKIoikZGRPPfcc0RFRaFSqTh9+jRtbW2UlJSwe/du8vLyOHbsmFTNctWqVcjlcsrLy9Fo
      NOh0OqxWK++++y4mk4k1a9YQCoXYvHkzPp+PuXPnkp2dzcaNG+nr66O0tJTi4uJ7uCu+PHJd
      JKpJywhUb0MRk47clIg8boSpEaNSCdUdIOxqRjlu1tdDjQj9idA//vGPbNq0icrKSux2O+fP
      n2fKlCmcPHlSekpbXl7OxYsXqaioYMmSJZw7d47q6mrOnz/P22+/LeV1srKyKCkpYceOHYOE
      uefOnePQoUPMnz9feiI7QH19PdXV1bz66qu8+eabklIF+gN7f/jDH9i0aRMnTpxg3LhxHDhw
      gF/84hf4fD6USiVVVVUUFRURCoX405/+RG9vL2+99RZVVVXo9Xo2bNhAaWkpOp2O9957j/37
      9+N2u1m0aBEqlYqKigocDgePPvrosD7vuDMyFLHjkeljCF7ZjTLr0WGPGw9GhjJjLqGGw6BQ
      oUjMH3a1zJA7gEajIScnh6KiItLS0pDL5WRkZPDggw9itVopLi4mJycHQRCw2Ww4HA5OnDgh
      5eHlcjlz585l5cqVGI1GLly4wIEDB3C73XR2dkrbuXDhAiUlJTz00EMkJCQMaoNKpWLGjBl8
      +9vf5ubNm4PCZVqtlvz8fIqKikhNTSU2NpZZs2Zx8eJF5syZI1WmnDlzJvPnz6epqYlAIEBS
      UhLf+973GDNmDF1dXZw/f57W1lba29vJzMykpaWFXbt2odPpyM7Oxm63s2PHDrRa7efOXhsO
      xLDQP7aWKxD9I0/diM8NGmP/5J2Qb7hbM/QOMDChJDMzUwqF3Q6ZTIbJZMJsNlNSUsJ3v/td
      Jk+ejEKhIDk5GZVKxbFjx/B4PPzoRz8iOTl50A/JYDBQV1eH0+m8xb2ZkpKCw+EgPj4enU43
      6GGdUqkkPT2dzMxMYmNj8Xg8VFVVERMTw+nTp6WIQm9vL7W1tZhMJhQKBXFxcURFRRERESGF
      /p588kkWL15MfHw8r776Kg899BC/+93vUKlUvPrqq5SUlNxyBhoRiCKhxkpk+lg0M18YmWrE
      ax//rxpxHKH64VcjDvn82Nvby+uvv45WqyU3N5fCwkLJjqbVapHJZCgUCtRqNXl5eRw6dIiN
      GzdiMpl44oknpIgywNixY6moqOBXv/oV3d3dyOVyVCoVarWaGTNmsHv3bl5++WV8Pt8g/eC8
      efNYt24dP/nJTzCbzZI4Vy6X4/V6+fnPf45CoaCgoACr1Up8fDwrVqxgw4YNREZGcvPmTV56
      6SUEQeC5555DpVJJbY+Pj2fOnDmUlZVhMBiYNWsWbW1tfPzxx4RCIQoKCmhoaGDPnj2EQiHy
      8vLQaIZ3/PpZwr0dhJvPop76nX4tou0UQut5lMkPjogwnGC/DHIVioQ85GYrwbPvQGoJaIZP
      Mf+VPQkWRRGfz4dKpbrtHOABjeKnrdADnwsGgwQCASIiIm4ZIwqCgMvlwmQy3Xa9d+KTTz5h
      06ZN/Pu//zsqleq2Xs+BbYuiiEajQRRF+vr6EAQBo9EofadgMIjRaBz28esoX477So3Y3t7O
      yZMnB91xGuX+5r7qAKOM8llkMtntC2WPqhFHuV8YVSOOcl8zGoYb5b7mr9YBRFHE7Xbj8/kQ
      BIG+vj5EUcThcHwp3eKX1TX6fL471vryer1SJZqvE6IoEggKI/JBHUA4PHLaN+T7iG+88QYO
      hwOAjIwMli5delf3wQVB4M9//jOZmZnodDoOHTrEqlWr2LZtG8uXL7+tGOvzGChY19HRQUpK
      Co8//jg6ne6u1nHlyhXq6+t57LHHbnmvqqoKj8fDwoUL7/j5PXv2kJmZeYtyZbgQwiJ/PtOA
      q9ePTqNkVl4ykYbhC5t9Fruzl8oaG0FBIDHGyIxJVhTDOFd6yB3gk08+4dFHHyU5OZmIiAi6
      urpQq9UYjUba2tpITEzE4/Fw8+ZN9Ho9VqsVm81Gb28vCQkJREVF0d7eTmJiouT2HNAbXr9+
      nZaWFsaNG4der6e5uZmkpCRcrv6q50qlUtIxms1moqKi8Hg8/Nd//RfTp09n3rx51NbWEg6H
      8fv91NfX4/f7SUtLw2Aw0NjYKJVQGjt2LCaTCbfbjc1m49KlSzidTsLhMM3NzXR0dBAXF0dy
      cjLd3d243W4CgQB1dXX4/X6SkpIGzTe+ePEi0dHRUgfweDw0NDSgUChITU3F5XKh1+vRaDTY
      bDbGjh2L1+slEAhIhfyCwSDp6ekoFArsdjt6vR6fz0dSUtJd7UwROFR9g2ijlrn5KVyzOais
      sbHwwTSUiuEf7YrAn083MmOSlYToCA6ca+JyYxe5aXd/8LtXDLkDDPgzjUYjOp2OCxcuUFVV
      RUFBARcuXGD58uWUlZXh9XqxWCzMnTuXHTt2AP1H/2eeeUZaV3t7O+Xl5WRnZyMIAuXl5XR3
      dzN58mQWL17M5s2b+fGPf8yJEycIBoNERUVx5MgRWltbefrppykqKuKTTz7BZDKxZMkS3G43
      kydPRq1Wc+DAAfbu3YtKpSI9PZ3Vq1fzP//zP0RGRuLxeCgsLGTx4sWUlZXR3t6Oz+fDYrHQ
      2NjI+vXrUSgU+P1+/umf/mlQe3ft2oVMJkOpVLJmzZo7TpTfsWMHNTU1hMNhiouL6e3tJTY2
      loyMDP71X/+Vn/3sZ1RXVxMOh4mIiKC8vBy5XM7kyZMpKirid7/7HVqtlqSkJFatWnVXOzMs
      hGmy9/DU3GzUKgXjxkRysaEDQQiPiA4QDAoEQgIpFjNyuYypWWM4XNP09egALpeLsrIyIiIi
      yM/P52/+5m84cuQI77zzDj/60Y9wOp04nU5eeOEFIiIiEEWRRx99lNbWVj788MNBgbdQKERv
      b29/A5RKnn76aUwmEz/96U+ZNm0aHo9HOpoHg0GCwSCXL1/mP/7jPyTZltPplKLP69at48qV
      K/zkJz/h8OHDrFmzhoSEBF555RVsNhtyuZxnnnkGp9PJRx99hN1u58aNG/z93/89ly9f5sqV
      K5w9e5a0tDRWrlzJ+vXrB+ka4+PjWbhwId3d3XzwwQe0trbetgMEAgFOnz7N2rVrCQQCvPPO
      O8ydO5cLFy4QDoeJi4vj4sWLXLt2jZkzZ7Jnzx5mzpyJSqVi7969TJkyhdbWVp588klmzJhx
      1zszFA6jVMhQyPvPTmqlnLDYf+QdCfiCIXQaJfL/bZ9Bp6LP/9Xo9ofKkA8L0dHRPP/887zy
      yiv87d/+LQaDAaPRSDAYxGAwEAwG0Wq1aLVa1Go1165dY/v27bhcLqnQ9p0YGEpBf0Tidgx4
      RAfiD3FxcbS1tdHX18fatWvJyMggFAoRCoUwm82S3jAQCCCTydBoNNI1y8BrOp1OWp/f78dk
      MqHVajGbzfh8/z+peObMGXbt2kVvby9qtfqOt4hDoRAymQyDwUBERAQAFosFj8dDbW0tpaWl
      XLhwgWAwSExMDH6/n7q6Otra2igsLEQQBOLj4yktLf1Ck41USgWCIOIL9rfP6w+hkN+dC+mr
      JEKrwuMNEAz1/xbsTi+REcN7fTLkM4DX6+XIkSNcu3YNi8VCMBjE4/FIQ51vfOMbeDwe9u/f
      T1RUFD6fD7lcTmRkJH19fzmRePbsWex2u3R90NPTQ3l5OWfOnGHy5Mn9Df2UhhEgOzsbjUbD
      b3/7W7KysnA6nZhMJjIyMnjvvfeIjY1Fr9dLs8k+jdFoxOv1snfvXsl3mpGRwY4dOzAYDJw/
      f541a9Zw/fp1ALq7u6Uf9Wc7aCAQ4Pjx47S3t5Ofn09cXBy7d+/G7/djsVgYM2YM0G+ZW7Vq
      FXv37mXixInEx8eTlZVFa2srubm5dHd3SxmlLzrVVC6TUTDBwv4zDeSPt1Db3E18VASqETD8
      AVDI5ViiDZz8pIXEGAPHLzUza/LY4W3TUNSIgLRTQqEQOp0OtVrN1KlTpSNXeno6aWlpNDU1
      odVqmTJlCl6vF5/Px+TJk5kwYQJRUVFYrVbMZjPR0dEkJSWh1+txOBxoNBqWLl1KTEwMarUa
      h8NBTk4OEydOxGKxEBcXR3x8vNQJFAoFOTk5+Hw+HA4HBQUFTJo0ifT0dBwOB36/n6VLl2Kx
      WNDr9aSmpqLRaIiMjGTcuHEkJibS0tJCYmIiubm55OXlodfraWpqYtq0aVLaNT4+XpoHEAwG
      KSgoID09Hb1eDyCF+QRBIDExkfz8fFpaWjAajSxatIi4uDiMRiPjx49nwoQJmM1mcnJySEpK
      IiUlBZ/Ph91uJzk5mdTUVKKior6URTouUo/HF6S500OETkVBhgWNeuRMirFE6Wnv7qXD2UeG
      NYq0MZHDdoa6azXiUBjQAA449z9PR/hZB+nAa5/WDf4lbrdsOBxGFMW/qF28nebxTurHu23P
      3agQ72bdQ0UURcKiiPwervNeMlLad8/UiKOM8nUkIiLi9mG4e3k0GmWUkcxoHHqU+5ZRNeIo
      9z2jHWCU+5ohd4C2tjZsNhs2m43Ozs67njATDoc5f/48LS0tuN1url69Sjgc5siRI184cen3
      +2ltbaW2tha73f6FLtybm5upqam57Xv19fVcuXLlL37e4XBID816e3txuVx33YZ7hSiECHsd
      0p010e/pr8c7Qp4Fi0Fff5kk+vUtotcx7FaIIXeAf/iHf+AXv/gF69ev5+OPP77ryuyCIHDg
      wAHq6uro6uqiqqoKQRBuEWMNFVEU2bp1Kz/72c/YunUr69at+0Id6erVqxw8ePC271VXV3Pi
      xIm/+Pn//u//luqcHTp0iLKysrtuw71CDHgInN6I6LIhCiECZzYRdjQMW3s+S9jThv/kBkSf
      m7CjnsDZLSDc3e/oXjPkJyRms5mVK1dKasRjx44hiiITJ07k0KFDLFq0iEuXLlFRUYHVamXR
      okXs3LmTtrY2HnjgAUpLS6V1ffo+uyAIbN26FZfLxWOPPcb48ePZuXMny5cvp6amhlAohMFg
      oKWlBZvNRmFhIfn5+dTX13Pq1Cl++MMfYrFY6OnpQa/XY7PZ+P3vf09PTw+PP/44ubm5bNq0
      CZlMRktLC0uWLGHy5MlUVVVRXl5OW1sbSUlJeL1edu7cSXV1NVOmTOFb3/qW1F6Hw8HmzZtx
      Op3Mnj2bWbNm3dFIMZBw3bVrF16vF71ez1NPPcWVK1eorq7GbreTl5fH4sWL6ejoYNu2bfT0
      9PDEE08gCAINDQ309PSQkZExqKbxUJDrzKgmPUbg/DYU0WnIzcnI4zIZMWrEqBSE6HGEaisI
      u5tRpn3N1Ig7d+7kzTff5PDhw1itVj766CPWr1+PSqXC5XKxdetWiouLKSgoQKlUkpmZyZw5
      c9i3bx82m01al8vl4tKlS9LfGRkZFBYWUlZWhtPp5PTp04RCIW7cuEFDQwOtra2sX78el8tF
      TEwM0D88SUlJIS0tjW3btvHuu+/S2dnJ22+/TVRUFA8++CAbN26ku7ubkydPYjabpcqSdrud
      LVu2kJuby+TJk5HL5Rw9epQzZ86wePFiKisrOXv2rNQ+QRB44IEHmD9/Pu+//z7Nzc1/8X/l
      cDi4fPkys2bNor29naNHj1JXV0d3dzfFxcWUl5djs9nYtm0bcXFx5OXlsWXLFlpaWti+fTuN
      jY3S97w7ZChiMpDp4whe/Rhl1qKRp0ZMn0uosRIUGhRjpgz77fYh/3cG4g1Wq5XY2FiSk5MZ
      P348J0+eZO3atTQ1NWGxWHjooYfQ6XR0d3dz8eJF2tvbpdDa7VAoFBQVFREbG8vBgwfvWEo0
      OzubZ599dlAEIRAIIIoimZmZvP3228yaNYuuri5WrFhBQkICFRUVtLe3ExERwezZs3E4HNTW
      1uJ0OtHpdJSUlFBVVSXNDZg6dSolJSVcv36d69evD5pcc+zYMfr6+vB4PPT09EivDxjnBpxC
      AzvUYrEwbdo03G43169fx2AwkJWVRXFxMadOnaKxsRGbzUZPTw8qlYqOjg78fj8pKSn83d/9
      HQbDF5NFiWEBfC6QKRB9LmSG+C+0nq8MnxOZxoTY14UY8iFT3d0EpnvNkM8ASqWSpKQk0tPT
      iY+Pp6uri5s3b2IwGDh58iQGgwGn00lnZycOh4Pjx4/jdrt5/vnnb1ujd4AB+VRjY6OUpPT7
      /XR3d2O326XlkpOTByUks7KyuHHjBsePHycjIwOj0SglPuvq6rhx44aU8Bxg4MepVqvp7u6m
      vb0dl8tFOBzGbDbT2NhIR0cHTU1Ng47A+/btw2w288ILL9wycy0iIoLq6mra2to4e/asVIZ1
      IPJdV1eH2WxGJpMRCATo6uqis7OT6OhozGYzaWlpPP744zzzzDOoVCrGjBnzhX/8iCKhhsPI
      DHH9asTqrSNPjXj1Y5QTF6OITiNU9zVSI/p8Pt544w1JjajVasnJySEnJ4f333+f3NxcJkyY
      wGuvvUZKSgqzZs3ixo0b/OpXv8LpdKJUKtFqtSiVShQKhXR0NZlMrFu3Dq/Xy7Jly0hOTkap
      VPKf//mfKBQKZs+ejUqlumX6pcVi4Rvf+IZ00RkKhYiJiWHBggWUlZUhCALFxcXEx8ej1+ul
      Atc6nU4KxP3yl79EqVSSlZVFUVERJ0+e5J//+Z8xGAxMmzaNyspKNBoNmZmZrFu3DpvNhiAI
      g6xy8+fP54033uDcuXOoVCpmzpxJW1sbV65c4cUXX0Sj0fD973+fQ4cO8dFHH3H8+HGp9vH8
      +fMpKyvj3LlzpKSkMGXKlC+lWwz3dhBuPY966reRqQ0IttMIrTUok4tGjBpRptSgSMhFNFsJ
      nnsHxv0fUyMO6BAVCoXk9vys/vDTfHroMLDcgBpRr9d/7hhREAR8Pt+gZfv6+qSL5zt9PhwO
      4/F4MBgMUmhNEATcbrckzv10G/1+/x2/SzAYxO12S4U7qqur+eCDD3jxxRdRq9XI5XJ+//vf
      o1arWbp06aAzmSAIBAIByVE6yl8PmUwm+3/dVqAL/5htHwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='gantt_1' width='192'>
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='gantt_2' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='new' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='timeline' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nO2dWXMc2XXnf7VvWfuGpQAQIMgGSNnqlhRW21KEQ7IfPB9l5nFivsVY1ovt
      CPtpJNlq2ZZn8SLb8oTstkNLSx41u7k0CYLYC7VXVtaeVbnMA7uuABa4NQsEWHV/EQxsWbdu
      FvNk3nPOPefvsG3bRiKZUZwXPQGJ5CKRBiCZaaQBSGYaaQCSmUYagGSmkQYgmWmkAUhmGvfo
      m263y2AwuMi5TBTDMHC73c8/UDLTOKY1EdZoNIjFYhc9Dckl57m3SMuycDpnd6Vkmyb6w4eY
      lSowlfeKmWbMAMrlMtvb28RiMZLJJLVajYWFBWKxGDs7O0SjUVwuF8PhkGg0iqqqxGIxPB4P
      g8GAZrNJLBZD0zTi8TjVapVyuUwul0NRFIbDIe12m0QiQb/fx+l0MhgMCAQC9Pt9vF4vhmEQ
      iUQu4vMYQ/3On9H+x3+66GlIzokxA8hkMhSLRbF+7na77O3t8fbbb3N0dMTx8THhcJhSqcTc
      3By1Wo1YLEYoFKJYLGIYBn6/n/n5eVRVxe/3MxgMsCyL999/n2w2K17fbDaxbZt+v08kEiGV
      SlGr1Zibm3tlAzAMg263i8PhEL+zLOvMYx0OhzjOtm3EqtCyaP/oX15pHpLLzZgBjO7ggUAA
      VVWJRqPib9lsllgshqqqhEIhhsMh8XicWCzG9vY2V69epVwuE4lESKfTFItFnE4nLpdL3OV7
      vR4APp+Pq1evUiwWiUQiJBIJ9vf3WV5eJp/Ps7y8/Eon5nK5CAQCrzQGQDOTYXh09MrjSC4n
      z3SCn7X+tywLh8OBbds4nU5x7PN8hlKpRDwex+v1Ar+6447GGvGqfseknODh8THaX30fo1SS
      LsAUIqNAkplmavMAnU7noqcgeQOQTwDJTCNTpc/Btm1MVcXSmkgnYPoYM4CDgwPa7TaZTAaf
      z0coFMLhcKDrOvfv3ycej5+K0BwcHLCyssK9e/fw+Xysra2Jv42c25PfP/n1ZJjyMtL+4T/T
      eO972Lp+0VORnANjBqBpGrVajUAgQLlcptPp4PP5WF1dpd/v02g0ODo6wrIsIpEI9XqdlZUV
      VFUlk8nw4MEDer0euq5j2zY+n49AIMDh4SHJZJJWq8XKygpHR0f8xm/8Bj6f71xOzLIsDMN4
      pTFsy3p88ff7E5qV5LIxZgBOp5Pl5WU6nQ6maeJ2u0UCyePx4HA46Pf7JJNJhsOhiLX7fD4i
      kQiNRoPhcIjX68W2bYLBICsrK+zt7REOh3E4HLTbbWzbFsZ1Hti2jWmaY787iyefQqfCsYEA
      pjSAqWXMCdZ1HV3XRaLrk08+IRaLsbKygmVZmKYpvo62REQiETqdDpZliQt6Z2eH5eVlPB4P
      Ho+HZrOJ1+ul3+8TCATodrtEo9Fz22c0KSe4d/sOjW99G6NcnsCsJJeNZ0aBTv7pZdfqJ9f/
      F8Eko0C2ZcF0BstmHrEEGgwGY0uGN5nBYCC2XUgkT0MYwJsQkXkZpu18JOeDMIDRWn1a6Pf7
      +P3+Vx7Htm0wTewpejpKfsVYFKhUKqGqKouLi+i6TiqVEn/TNA2fz/fMC6vVauFyuQgGgxiG
      waNHj4hGo8zNzY0dW6/XCYfDeDweGo0Gfr9fjD3aiXrRxTj9W7dQv/UdzHpd+gFTyJgBVCoV
      Op2OKEwpFov4/X5UVRV79F0ulyhm6Xa7KIpCvV7H7XYTjUYpl8usra2h6zqxWAzbtvnoo49w
      Op2YpolhGCQSCQ4ODlheXqbRaODz+chkMty9e5fl5WVUVSUcDrO9vU2r1SISiaDrOn6/n+Fw
      SLPZJBKJYFkWN27cOJfljm1Z1P7kT7Ea2sTHllwOxgzA5XJx5coVSqUStm0zGAxQVZVcLofb
      7ebu3bvkcjmuXbvGw4cPiUajdDod5ufnCQaDFItFrl+/jqqqBINBbNumUqngcrkAxB2+1Wqx
      tLREo9FgdXWV+/fv43K5sG1bFMpYlsVgMCAcDjMcDun3+5RKJQKBAIqioOv6Uy9+wzDodDqn
      /vasbU9nHWfbNrY+PRsEJeOMhUFVVaVarbK8vMxgMKBSqZBIJNA0jXA4TCgUotPp0Gg0iEaj
      dLtd4vG4KHzp9/tUKhVWVlZwuVzs7++jKAqmaeJ0OgkGg8DjC7RSqZDL5cjn88zPz+NwODg+
      PmZhYQHDMCiXyyQSCdrtNvPz83S7XQzDIBAIkM/nyWazKIpy5jJpUmHQ9o9+ROPP38OSEaWp
      RO4GfQFMrYnVakoXYAqRu0FfAFc0git6OYr0JZNFFsRIZhq5BJLMNE/dDj3KA5xsT9LpdPB4
      PKKg/Sx6vR5OpxOfz4dt2xweHhIKhUgmk2PHtlotAoEAbrdbhF5Hybhutys2zYVCoUmc62di
      cHhI473vYZYryIKY6WPsCXDv3r1TPTVHrU8qlQp+v59AIIDT6aTRaBAMBmm320QiEarVKk6n
      k2g0SqFQYHNzUxhMMBikUCjgcrkwDAPDMEgmk2xtbXHt2jUqlQrBYJB4PE4+n2d1dZVSqcTa
      2hpbW1tid6pt2+i6fqohl2VZp4pwRkziCWDbNoX/+t8wCoVXGkdyeRl7ApzcR2+aJqZpsr29
      zerqKg6Hg48//pgrV66wubnJ/fv3URQFVVVJJpMiD7C5uUmpVBKZ3e3tbfx+v9hC7fF4qNVq
      rKysUCqVuHbtGrdv38btdmPbNrVaTRS0WJZFIBBgOBzicrkIhUJsb2+LrnPvvPPOmSc2kTyA
      ZWFUq5/tk5W8EYw9AYrFIqqqsrCwgK7r1Ot1IpGIaJjl8/no9Xq0Wi1CoRDdbpdkMiku7Far
      Ra1WY3V1FY/Hw/b2NoqiYBgGTqeTcDgsEmzVapVcLkehUCCTyeBwOCiXy8zNzeHz+dja2mJp
      aYm7d+9y9epVjo+PSSQShEIhms0miUTi1FaNk0zKB1C/+x6tv/07uQ1iSnkjnODRxraX2eA2
      KQOwLYvh3j5GpSxdgCnkjTCAz4KMAkleBJkHkMw08gkgmWnGokCWZYkYvMvlEk1wR1GSXq+H
      3+/HMIznFtCMxvJ6vc/MHVxmzGaT1g/+4XFR/FTeKmabMQPY3d3F5XKJHv6maYoiGL/fT71e
      J5FICKGLUCiEZVkiPt9oNIjH4+i6TjAYZG9vT3SUGA6H1Go1lpaWqNVq+P1+NE0jm83SbDZF
      R4mFhYXX/kE8jcrvf4PB1sOLnobknBgzgH6/z40bN4SAhdvtZnV1lZ2dHWKxGLdv3+Z3f/d3
      qdfrmKZJq9XCsiw8Ho/oDqeqKp///OfpdruicObHP/4xv/7rv042m+Xg4IDBYIBhGJimicPh
      EE+LSZQxwuTyAIOd3YnMR3I5GTOAhYUF7ty5QyAQIBgMkkgkKJVKKIrCYDDg3XffpdFoEIlE
      Tl00TqdTVHyFQiGxTBpJH/3ar/0amqZRLpdZXl7G4XAwHA5FXUGtViMcDtOfUBMqt9s9kS0U
      vS99kd7PPpjAjCSXkdfqBPf7fRwOx7l1gzvJpJxgS9fpfvABRqksk2FTiIwCSWYamQeQzDTy
      CSCZac4siXyRvp4juxn1+rcsS3R+OAvDME5ts34almVh2/Yzx3qd2MMh3Z//AqNSkT7AFDJ2
      RR4eHtJsNlleXqZcLnPlyhUODg6IxWK0221yuRyapon4fr1eJ5vNii3M6XQay7L4xS9+webm
      JslkEtM0uXXrFhsbG2JLdDQa5ac//SmRSIRMJiNkTVVVxeFwEI/HL7QQZkTtj/6YrowCTS1n
      6gTfuHGDTz75hFQqxU9/+lNu3LhBp9Nha2uLwWBAu91mc3OTQqFALBbj0aNHRCIR2u025XKZ
      L3/5y8zPzxOLxSiVSnS7XcLhMHt7e9TrdXw+H7/1W78lBLQ7nQ4HBwe4XC5u3rzJT37yE772
      ta+90olNKg/Q/X+/fKV5SC43YwaQSCS4c+cOXq+XQqFANpvl+PgY27aJRCLkcjkGgwH37t0j
      HA6Tz+cJh8M4nU76/b64a/v9ftxuN9VqFa/XS6/XIxwOC0V4h8PB2toaKysr3Lp1i3A4TCqV
      IhAIsLKyQrvdRlGUz35iE8oDtFevyEzwFHOmE3yyM5rT6TxTJ+DJY0bfP+k7jPYSjb3xGXfc
      SbY3nJQTbKgqrb//gcwDTCkyCiSZaWQeQDLTyCeAZKZ56TzAk397Uvf35O/h7HX9kzmEpx13
      GbAti+HREWalii0LAqaOM/UBRjs2RxKpHo8HwzBwuVzk83lyuZz4edQdYm9vjytXruBwOPD7
      /XzyySe4XC7W1tbo9XoEg0E6nQ7hcJhms0m9XhdRn6OjI9LpNB6P57VslHsZtL/8K5r/52+k
      AzyljC2B7t69K/IATqeTfD6P3+8XHdosyyKbzVIoFNjY2KBWq9Hv97EsC03TcLvdfOUrX2Fr
      a0u0QhlpC48MalQIM1Khd7vdGIaBqqp89atfnciJ1Wo1Mf6Ikd7x2IdwouLNtu1fRb1sm+p/
      /i9SI2CKGWusHwwGuXv3Lrqus76+jm3bJBIJ4HGOwOPxCOmkkWJ8t9tlOByKY5xOJ81mk3a7
      LarFnE6n6Ps/EsoeOd2WZVGv1ye6DHI6nXg8Htxut/g3Ks188t/J40atH71eL16fD5f0I6aa
      M53gk3XAo+9Hh41i/iPBC4fDIb6H07kDy7JEkczJfUCjfUGjZdTJ95mUEUzKCR7s79P47nsY
      pZKsCZ5CZBRIMtOI23Kv15u6PMBljSxJLg/CAE5KlE4DlmWdau0ukZzFKaX4aWJS/oRt21jt
      NlanI32AKeTM7dBHR0esrq4SCATGXnBybV0sFkmlUpRKJRqNBktLSwBEIhGOjo7I5XJjr79z
      5w7hcJiVlZVJn8u50Pm3f6PxZ9/F6nZlLmAKObMgZnNzk4cPH4rElWma1Go1crkc9+/f5+23
      3+bBgwfEYjGSySSNRgOn00mtVkPXdba2tnA4HKKx1ihS9O6771KtVgmFQnz44YcoikK5XMbv
      99Pr9chmsxwdHZFIJOh0OqRSKbrdLp/73OdeqJrsJKMo1CthWajf+g52t/tq40guLWNXlcfj
      oVwuMxgMeOedd7h16xbRaFRUhGWzWSqVCqZpCqfZ6XTS6/WIx+PU63WCwSCGYYimWKqqij7+
      4XCYRCJBpVIBEMmqVColtAPC4TDdbheHw4Gmaei6/tIGYFmWaMMy4mkBryeXSqe2f7vdcuUz
      xYyFQU3TpFqtoiiKSIpdv35dZG51Xcfr9dLtdlEUBb/fz2AwEL9zu91omkYwGGR/f5/BYMD6
      +jrD4ZBEIkGtVsPhcAgV+a2tLdbX10WiqlwuoygKrVZLVJmlUqkzxbCfxaTCoN3/+A8a3/4z
      DFWVS6Ap5Jl5gNG2gJe9+EacTJY9jVGybNJMMg9gDwbYw6F0gqcQsa4Y6XFNmpHe2OvGMIzJ
      5jWe0wlb8mYiDGDUvXlaME1zqs5Hcj4IA3iTe/ifxXA4vBRtVSSXmzPrAer1OisrK8/NDNdq
      NeLxON1uV3SH3tvbY21tDVVV0TSNlZWVS7fH/2Xo3/sE9X98SzbGmlLGDKBcLhOJRMjn86iq
      imma5HI5Dg4OyGQyVCoVFhcXKZfLhMNhOp0OR0dHbGxssL+/L8KapVKJVCpFpVJB0zScTqeI
      7auqitvtFjtFE4kE5XKZtbW1S7WBzbYsan/4R5j1+kVPRXJOjBmA0+kkGAzSarVYWVmh1+ux
      t7eHy+Wi0+mwvLxMvV6n0+kQDAap1WpCqX2kA1wsFsU4tm3z8ccfs7a2xsLCAvl8ns3NTT74
      4AOy2SzBYBBN00SRzKQMYCKNsWz78RYIydQyFgat1WpUKhWSySSRSATTNLEsi6OjI1KpFIqi
      0Gg06Ha7pFIpLMvi+PiYq1evYts2e3t7XL16FVVVUVWVRCKB1+sV6u7pdFooyluWJSSYRkm2
      SW1gm1QYtPn3P0D7i798HAaVTB2vrR7gRZvjTopJ5gGMWg2zLhNh08hruyJf58U/adzJJO5k
      8qKnITkHZGMsyUwjSyIlM83YuqTdbqNpGplM5kwh7GazKQS0w+HwmYO2Wi1ardZT9X6bzaZw
      dlut1qlxer3emXUIF8WwWET7/l9jliuyMdYUMmYAo3h/qVQSHRtGYUpd10WpYblcxrIsFhYW
      CIfDqKpKo9FgY2OD3d1d5ufnqVar5PN50uk01WqVpaUljo+P6ff7+P1+YrEYrVYLj8eD0+lk
      dXWV3d1drl27xieffEI4HEZRFHRdx+VyUSgUWFhYoFQqcf369ddiKNU/+CbDg8Nzfx/JxTBm
      AJZlUavVSKVS/OxnP2N1dZWNjQ0ePHhAtVolnU7TbDbx+/0oiiIu2OPjY65du4Zpmni9Xu7e
      vUsmk2FxcVEU0dy/f5+lpSWKxSI+nw9N03A4HHS7XdrtNqurqwCi+GZ/f5/9/X38fj9er5d2
      u02pVMLr9T43Sz0pgYzhceHlPlHJG8WZAhmaptFut/niF7+Ibdvs7Ozg8XhIp9MkP42G6LpO
      s9lkfX2d4+NjFhYWUBRFtDeMx+NkMhmKxSJXr17F6/WysrIiVGW63S6xWAy32029XiedTgOP
      DdCyLIrFIrlcTow5NzfH1tYWmUwGv9//3HrfSQlkDL7+Ndo//OdXHkdyOZFO8HOwDQP9wQOM
      clnWA0wh0gAkM43MA0hmGvkEkMw0Y05wrVajWq0+tR6g2WwKMYynbVwbbYFeX18/8+8n8wAn
      vx/9PCqQvwzbJwYHB/R++SFmtSp9gClk7AorlUokk0kqlYro9tDpdAgEArRaLdxuN5FIhFKp
      xHA4JJvNiv38rVaLmzdvUi6XSaVSFAoFEfVpNpvMzc1RKpVEV+hoNIqu61QqFQzD4K233iKf
      zxMKheh0OnS7XZLJpBDs3t3dFbmDt99++9wNxLZtKv/99zEr1XN9H8nFceYVZFmWaImytLTE
      xsYGd+/eRdM0kQcIBAKkUiny+byoC9jc3BQx9L29PcLhMEtLS2xtbfH5z3+e+/fvs7i4SKlU
      QlEUUUk26v0DMBgMcLlcDIdD1tfXuXfvHhsbG9y/f5/BYICmaSwtLT334p9UHsDSmi/4UUre
      RMZ8gEqlQq1WIxKJEAwGMU2TRqMh1F3i8TjwOA/QarVIp9NC4iiRSOB2uzk+PqbRaJDL5SgU
      CqTTadHs6vj4mFgsRqfTEXmAWq2G1+tlaWlJ9BIaDodCbklVVTY3N9nf3ycajRKPx5+bCJuU
      D6D9z/+F9lffl1uhp5RL6wQPh0PcbrfoLXRRjbFs28YsVzAqMg8wjVxaA3hVZBRI8iLIPIBk
      ppFPAMlMMxZK6fV6pxzUJ2m32yiKcuZgpmnicrlO/c62ber1Ol6v96n1A5cZo1ql+b//RvoA
      U8rYFb6zs0M8HqdUKomCmEajIb7XdZ1wOEy73SYcDjMcDmm1WkSjUR4+fMjNmzepVCqk02la
      rRZXrlxhZ2eH9fV1isUiDoeDQqFAKpViMBiIKFAul6NcLosw69WrVy+Fak3lG99kuLt70dOQ
      nBNn1gM0m03S6bSoB3jrrbd4//33RYHKo0ePRB+fz33uc6iqSr1eZ35+nlqtRjqdZmtri3fe
      eQd47F/ous7Dhw9ZXV0VtQC9Xk+0YyyVSnS7XYLBIL1eT2SbPysTqwc4lMUw08yYAcTjcVqt
      Fs1mk7fffhvbttnd3SWXy+HxeAgGgwQCAYbDIeFwGJfLhcvlEgIa0WiUcrnM6uoqiqJgWRbR
      aBTDMETBS6FQ4Pr166RSKYLBILu7uySTSSzLwuv1Cp3hVzqxCdUD6F/9Cp1/ff+Vx5FcTi7E
      CX6WHzEpJpYHGA7pffTxp/UA0gmYNmQUSDLTyDyAZKaRTwDJTPPULZVPi8KM7OUyhChfB9Zg
      QOdf35f6AFPKmAHcuXMHl8uFoihomkYkEsEwDAKBAJ1Oh3Q6Ta/XQ9M03G43qVSKWq2GbdvC
      sR1pjQ2HQ6H0uLCwwI9//GOWl5eJRqM4HA5UVSUQCOB2u0XCLJfLcXx8TDabFZoBF2ls1W98
      k/5HH13Y+0vOlzPzAPC4Y1sgECCdTlMoFOj1elSrVcLhMJVKRai+7O/v4/V66ff79Pt94PHT
      Qdd1fD4fnU5HJNFO1gr4fD5M0xQh1/n5eer1OqqqitYovV4Py7LGsssvwqTyAP27d1/6vSVv
      DmfmARYXFzk6OiIQCFAsFjk+PubKlSt4vV6hvRUMBkXnOL/fTzAYBB4bjmVZon+Qx+Ph+PgY
      QMTlg8EgDodDNNpaWloSItvz8/OiK91gMBDVYy99YhPKA3TeegtdGsHU8lwneOQLnFJPf8aS
      5Ekf4Vk+Q61WI5FIjB17aoKfcfkzKSfYbLdp//P/xSiVkZuBpg8ZBZLMNDIPIJlp5BNAMtN8
      5r4iT+YJTiorjup3pyFnYJsm+tbWp61RpvJeMdOMGcDDhw8xTZOVlRUMw6Df74uODl6vl8Fg
      gNPpFEqSwWAQwzB49OgRsViMfr/P6uoqmqahKIrY+GbbtogUvUmo3/4O7X/64UVPQ3JOjBlA
      v9/H4XDw0Ucfsbq6yvHxsRCoCAQCxONxNE1jbW2Nn/zkJ3zhC18QP5umiaZp7O/v02630XWd
      eDzOnTt3+PKXv/xaT8wwDLrd7qnfPW219+QTShxnWbT/5V/PY3qSS8KYAQQCAdGFLRqNsre3
      h9frJRqNYlkWW1tbbG5u4vF4hPB1Lpfj4cOHQge42WzS7/fx+Xw4nU5yudxrv/u73e6JKMg0
      sxmGh0cTmJHkMvJcJ9iyLBwOx5nr+FHPHofDMXacZVkv3ctnkkzKCR4eH6N9/68xSiXpAkwh
      MgokmWlkHkAy08gngGSmufgG/Jcc27YxVRWroSGdgOljzAAajQb5fJ65uTni8bjYCFcqlYjH
      4/h8PuHgPu1rtVqlXC6ztLREOBzGtm2RIHtyU93Jny/SaX4a7X/6IY33voc9RctDya8YM4B8
      Pk8mk6Hf73Pr1i2cTieFQoH5+Xn29vbIZrMcHh4SDocxTZNoNEqlUhGKLqlUCsMw0HWdTqfD
      hx9+KAplgsEgxWIRv99Pr9cjEomINipXrlxhcXFxYidmWRaGYbzSGLZl0fjeX2B/ql0gmT7G
      brmjIpZqtYqmaQwGA1ZXV4lEIsTjccrlMm63m36/z/r6uujlrygK0WhU9PWPRqN4PB6GwyG2
      bROPxzEMg42NDaE2n0wmKRaLpFIpisXiRE/Mtm1M03ylf5Zt43wNavSSi2PMCbYsS1SD6bqO
      1+vF5XJh2za9Xk/IF/n9ftxut9gu4fP5xF3dsiyxdcLtdrO/v08ymRS9QU3TRNd1Ibph2zZu
      t/u5ohcvw6Sc4P6dO6jf+van9QCSaeO1RIEuYlPcJKNAtm3LgvgpRfgAo/LDaUHX9bG9QBLJ
      kwgDcDqdn6n29rIybecjOR+EAbjd7kuhyzspPB6P6FzxKti2DYaBbZoTmJXksnGmQMb+/j6Z
      TAbDMMhkMuJvw+EQXdfHGtuOlB2vXr16KWP5r0L/w1uo3/o2Zr0u02BTyJgB7O7ukslkME1T
      9P13OBz0+33i8Thut5uPP/5YCFh/4QtfoFKpkEql2N3dRdd1BoMB/X6fSCSC2+1G0zRCoRDd
      bpe5uTkKhQI3b9689AUytmVR+5M/xdK0i56K5JwYMwCHw4HX62V/fx9AiFUoikI8Hufo6IhO
      p0MikWBhYYFQKITP5yOdTosscjqdFt3elpeX+fd//3cikQihUEiozWuadq4GMJHGWLYtM8BT
      zlgY1DAM9vb2SKfTuFwu0Q3OMAycTieKolAqlQiHw0Iso1Qq0W63SSaTuN1uHjx4wPz8PNFo
      lFAoxOHhoUiwRaNRarUay8vLE1mjP41JhUHbP/oXGt99D0tGlKaSc8kDnCWW97qZZB7AbDax
      Wi2ZC5hCziXsc9EX/6RxRSK4IpGLnobkHJAFMZKZRhbESGaasSVQp9MhGAzS6XQ+k5Cdbdvk
      83kURUFRFPb394nFYqJb9JvG4OCQxnvvYZYr2DITMHWMGcDBwQHz8/McHh4KWVRVVfF6vbTb
      bdxuN/Pz8xQKBRYWFtjf3ycej4v6gEAgQKFQYHNzU2gGeDwednZ2cLvdQkR7lDsolUosLi7S
      arVEVGgkp3rR2LZN9Q++iTHhrdqSy8OYAYwSYKN9/u12G4/HQyAQIBAIEIvFuHPnDtevX6da
      rRKJRDBNk0KhQDAYxOPxEIlE2N7eZn19XYhc3Llzhy996UssLCxQLpfx+/3U63U8Hg/tdlts
      n2632xM5sUkJZBi12kTmI7mcjBnAwsICsVgMRVGo1WooiiLEMOBxwczo4p+fnz+l+pLL5cSF
      vbi4iNfrxe/30263+c3f/E1arRblcpn19XXcbjdOp5OjoyNisRi2bYtyy4mc2IQEMob/6fdo
      /e3fyRDolDIRJ9i2bTqdDqFQ6Jl7/k3TxLIsIZl0nkxMKNuyGO4fYFTKsiZ+CpFRIMlMI/MA
      kplGPgEkM82YEzxSZTRN88wCmWc1yz1Jp9PBsixCoRCmadLv9085028KpqbR+sE/YJSlDzCN
      jF3h29vbrK2t8fDhQ9EWfRSibDabtNttstksuq6j67qQSO31evj9fjRN46233qLVarG9vc27
      777L9va26PwAEIvFhDbwJCI150nlG3/AYOvhRU9Dck6MGcBwOGR7e5t2u008HqdSqdBqtVhf
      X6fVauH3+1lYWODBgwfYts1gMMCyLAqFAolEQqjJZLNZVFXl6OiIwWDAYDBAURQMwxBJsatX
      r57biU0qDzDY2T23OUounjEDSKVSZLNZjo+PqdfrRCIREokEXq8Xj8dDKpXi6OiIeDwuXtNs
      NonFYiQSCdEvCCAajQoRjZFkUqPRIJFIEIvFzrVNyqTyAP0vfYnuz342gRlJLiPSCX4O1mBA
      74MPHjfGms6PaqaRBiCZaWQeQDLTyCeAZKaZSEnkk6LZ04Q9HNL94OcYlYr0AQy4jqwAAAYN
      SURBVKaQMw1ga2uLeDyO0+nE4/EwGAxoNpssLi4K/QCv1wvA4eEhw+GQ+fl5BoOBqAlotVqE
      QiF6vR6GYeB2u1lYWODnP/85yWSSTCaDw+Gg3W5j2zbhcBhd12m322QyGUqlEplMhmKxyMrK
      yoUl0Kp/+Mf0PvjgQt5bcv6caQCGYXDr1i38fj+2bZPL5Wi1Wty7d49Wq0WhUCASibC+vk6/
      3+fmzZvcunWLubk5bt++jaIoJBIJdnd3Rb3AKH8w0gvY2dnB4/FgftpycHd3l/X1dba2tsjn
      80I9plarkcvlXtoAJpUH6P3yly/1vpI3izMVYgAR13e5XCQSCWq1mpA7Wl1d5fbt2wQCARRF
      4d69eyiKQiqVIhKJMDc3R6VSIRwOE41GT40/Eq8eVX+NGmQtLCwQj8cJBoPC4EbdnXu9nnji
      vPCJTSgP0F5dZbC19crjSC4nZwpknLwbju7EJzW+NE0Tqi9w2gd4UgPseZTLZdLp9NjrR2OO
      3vdlmZQTbKoqzR/8w6cCGdIHmDZkFEgy08g8gGSmkU8AyUzzUnmAs7S+zlrzX4Qm2HlhWxbD
      w0OMShXpA0wfYwZw//59kskktVqNWCyG3+8nEonQbrfxer1CIdLj8dDpdMjn86JlSiaTodVq
      EQ6H0TSNQCAglCLfVLS/+Euaf/O3Mgk2pZx5ZVYqFbGGzufzzM/PY1kWLpcLp9NJs9lkY2OD
      YrHI5uYmhUKBWq1Gt9sln8+zuLgo2qx//etff60nNGJUhXaSp632nnxSieMsi9Y//qO8+KeY
      MQNwOp1C3aVWq+H1eoV2sKIoeDweDMPAMAwikQh3797F5/OxuLjI1tYWTqcT0zSxbZu1tbWX
      jt9PilEW+1VxxeIYpdIEZiS5jDzTCR7F/w3DYGtri2w2SzqdPlUXfPL7k/mCi2ZSTvBg/4DG
      e+89NgL5IJg6ZBRIMtOIJVCv10PX9Yucy0SReQDJiyAMwO/3i81v7XabUCjEYDDA7/c/9cWj
      XZ4jRgXyo/GedtzrwLbtsX1IEsmTiKtyFAl59OgRLpeLo6MjLMsil8ud6hgdCARwOByYpkkw
      GMTv96OqKqurq3z88cesrKyws7NDJpMhFArRbreFcfV6PXK53Gs5sRfpXfQi2LaN1WphySfK
      VDJ2W9Z1nRs3bnD37l1cLhcHBwfi7m1ZFv1+H8uycLvdqKqKYRjcuHEDy7JQFIVMJkOlUkHX
      dWzb5ujoiHQ6Tblc5q233nrtJ/iqdN7/Nxp//t3HKpHT6S7NNGMGMNrTn06nHwtEVKvMzc2J
      Cxoei2hEIhHi8TiGYbC/vy96/Ozt7YldoiNZ1EgkgtPpfK3C2LZtv3KrdduyUL/9HWwpkTq1
      PDcMWiqVyGazp5YTmqZd+vV1o9Gg1+sBiHDtiCe3Wo++WpYl8hijn137+9iWhcPhxLYtcDhw
      iDGcn349+bP1nK+jbSKjuSDm+PzXWp8ed/J4x+Po7Au//69e48Bxaj4vcw6n3v+lz+Hs+TCB
      z/T0/8vz5zO1YVA4vSfpWVngkwZx1teRE//kGE+O+7yxXoQXHeOsMZ8255eZx6u8/8t8pmeN
      OepH+6qf6cv8v0y1AUyKN7HoX875xbj4lO0lw7ZtWq2WyCNYliXqli8ztm2LEtJR9v6yYxgG
      mqaJuV7EnN/cbZrnSLPZ5ODggHfffZdut0uxWKTf77O8vMz+/j5zc3Ok0+mLnuYp6vU6t27d
      4nd+53cARHdvRVFQVRVFUVhaWrrgWZ5mb28P0zSFKujDhw+JRCKiRX+73WZjY+NcnwryCfAE
      DocDl8slPvRR6Nc0TXZ2dggGg9QuoXLk7du3MQxDZPMNw6Df73NwcIBlWRNT35wkc3NzmKZJ
      8VMZ2lES9vDwkFarJQIR54l8AjyBbds0Gg3Ryv3Ro0fMzc1Rr9dRFIVQKHQplxe//du/TaFQ
      wOv18ujRI+LxOJqmCQ3ny+jq9Xo9TNMkGo2Sz+fx+/0Mh0Pi8TiJRGJiycxnIZ1gyUwjl0CS
      mUYagGSmkQYgmWmkAUhmGmkAkplGGoBkppEGIJlppAFIZpr/D0+dSasBeFtDAAAAAElFTkSu
      QmCC
    </thumbnail>
    <thumbnail height='192' name='via_status _changes_old' width='192'>
      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
      8hIn3+8AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='via_status_changes' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
