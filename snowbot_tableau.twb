<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20192.19.1210.2209                               -->
<workbook locale='en_CA' original-version='18.1' source-build='2019.2.7 (20192.19.1210.2209)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <SheetIdentifierTracking ignorable='true' predowngraded='true' />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='data copy (2)' inline='true' name='federated.0zhkbyo1mslrtt1ghsz8u1ynl7tl' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='data copy' name='semistructpassivestore-direct.0kvg3nx1kz3d570zsc5sa03u2x5k'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/dev/snowbot' filename='data copy.json' password='' server=''>
              <semistruct-schemas />
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.0kvg3nx1kz3d570zsc5sa03u2x5k' name='data copy.json' table='[data copy.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[data copy.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[data copy.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[data copy.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[data copy.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[data copy.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[data copy.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[data copy.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[data copy.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='string' name='[timestamp]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Data Copy' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.573758' measure-ordering='alphabetic' measure-percentage='0.426242' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='data copy' inline='true' name='federated.0jlna3j08tgpzl11pw1dy1ruxk4h' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='data_2019_20' name='semistructpassivestore-direct.186jri006b94kh18mih311yzp959'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/Downloads' filename='/Users/paul/Downloads/data_2019_20.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[data copy.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='terrain' value='false' />
                  <map key='terrain.Value' value='false' />
                  <map key='weather' value='false' />
                  <map key='weather.Value' value='false' />
                  <map key='weather.Value.weatherForecast' value='false' />
                  <map key='weather.Value.weatherForecast.Value' value='false' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
                <semistruct-schema table='[data_2019_20.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='terrain' value='false' />
                  <map key='terrain.Value' value='false' />
                  <map key='weather' value='false' />
                  <map key='weather.Value' value='false' />
                  <map key='weather.Value.weatherForecast' value='false' />
                  <map key='weather.Value.weatherForecast.Value' value='false' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.186jri006b94kh18mih311yzp959' name='data_2019_20.json' table='[data_2019_20.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[data_2019_20.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[data_2019_20.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[data_2019_20.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[data_2019_20.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[data_2019_20.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[data_2019_20.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[data_2019_20.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[data_2019_20.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per data_2019_20.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at data_2019_20.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per lifts]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([lifts Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at lifts level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' datatype-customized='true' default-role='measure' default-type='quantitative' name='[Number of Records]' role='dimension' type='nominal' user:auto-column='numrec'>
        <calculation class='tableau' formula='STR(1)' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='real' name='[resortID (lifts)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status (Lifts)' datatype='string' name='[status (lifts)]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='string' name='[timestamp]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Data 2019 20' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <folder name='Terrain' role='dimensions' />
      <folder name='Weather' role='dimensions' />
      <folder name='Weather Forecast' role='dimensions' />
      <folder name='Source Measures' role='measures' />
      <layout dim-ordering='alphabetic' dim-percentage='0.59116' measure-ordering='alphabetic' measure-percentage='0.40884' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='data_2019_20 (2)' inline='true' name='federated.0eybhs500l9ylc1gsy6ck1v4ikyq' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='data_2019_20' name='semistructpassivestore-direct.0osfbb209jkg4v1giubl70heh35e'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/Downloads' filename='data_2019_20.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[data_2019_20.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='terrain' value='false' />
                  <map key='terrain.Value' value='false' />
                  <map key='weather' value='false' />
                  <map key='weather.Value' value='false' />
                  <map key='weather.Value.weatherForecast' value='false' />
                  <map key='weather.Value.weatherForecast.Value' value='false' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.0osfbb209jkg4v1giubl70heh35e' name='data_2019_20.json' table='[data_2019_20.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[data_2019_20.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[data_2019_20.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[data_2019_20.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[data_2019_20.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[data_2019_20.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[data_2019_20.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[data_2019_20.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[data_2019_20.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per data_2019_20.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at data_2019_20.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per lifts]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([lifts Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at lifts level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='string' name='[timestamp]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Data 2019 20' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.556914' measure-ordering='alphabetic' measure-percentage='0.443086' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='2020_01_02_14_32_wb_lifts' inline='true' name='federated.08opw1o1eo1nck11s6rpo1owp9ss' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='2020_01_02_14_32_wb_lifts' name='semistructpassivestore-direct.1dtv35r0u4esro1fk07v0187u0xa'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/Downloads' filename='2020_01_02_14_32_wb_lifts.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[2020_01_02_14_32_wb_lifts.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.1dtv35r0u4esro1fk07v0187u0xa' name='2020_01_02_14_32_wb_lifts.json' table='[2020_01_02_14_32_wb_lifts.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[2020_01_02_14_32_wb_lifts.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[2020_01_02_14_32_wb_lifts.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per 2020_01_02_14_32_wb_lifts.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at 2020_01_02_14_32_wb_lifts.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per lifts]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([lifts Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at lifts level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='2020 01 02 14 32 Wb Lifts' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.558011' measure-ordering='alphabetic' measure-percentage='0.441989' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='merged_file' inline='true' name='federated.1wvy67g1wt3g6h1ew11of0gyjrne' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='merged_file' name='semistructpassivestore-direct.02oo5wi11mul0x1dlv3tb0vfen1p'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/dev/snowbot/data' filename='merged_file.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[merged_file.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.02oo5wi11mul0x1dlv3tb0vfen1p' name='merged_file.json' table='[merged_file.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[merged_file.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[merged_file.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[merged_file.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[merged_file.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[merged_file.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[merged_file.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[merged_file.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[merged_file.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Placeholder' datatype='integer' name='[Calculation_1068338277994426371]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='min(0)' />
      </column>
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per lifts]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([lifts Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at lifts level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per merged_file.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at merged_file.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <column-instance column='[status]' derivation='Attribute' name='[attr:status:nk]' pivot='key' type='nominal' />
      <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <folder name='Merged File' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.558011' measure-ordering='alphabetic' measure-percentage='0.441989' show-structure='false' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[attr:status:nk]' type='palette'>
            <map to='#59a14f'>
              <bucket>&quot;O&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;X&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;H&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:status:nk]' type='palette'>
            <map to='#59a14f'>
              <bucket>&quot;O&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;X&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;H&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='data copy' name='federated.0jlna3j08tgpzl11pw1dy1ruxk4h' />
            <datasource caption='data_2019_20 (2)' name='federated.0eybhs500l9ylc1gsy6ck1v4ikyq' />
          </datasources>
          <datasource-dependencies datasource='federated.0eybhs500l9ylc1gsy6ck1v4ikyq'>
            <column-instance column='[resortID]' derivation='None' name='[none:resortID:ok]' pivot='key' type='ordinal' />
            <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
            <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.resortID</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.status</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0jlna3j08tgpzl11pw1dy1ruxk4h'>
            <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.liftName</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
            <column-instance column='[timestamp]' derivation='None' name='[none:timestamp:nk]' pivot='key' type='nominal' />
            <column caption='Timestamp' datatype='string' name='[timestamp]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>timestamp</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:resortID:ok]'>
            <groupfilter function='member' level='[none:resortID:ok]' member='13.0' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:resortID:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='background-color' field='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Text' />
            <encodings>
              <color column='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]' />
              <text column='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:liftName:nk]</rows>
        <cols>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:timestamp:nk]</cols>
      </table>
      <simple-id uuid='{8F8EEEED-A901-4EB9-B7ED-7B2903E48F21}' />
    </worksheet>
    <worksheet name='gant'>
      <table>
        <view>
          <datasources>
            <datasource caption='merged_file' name='federated.1wvy67g1wt3g6h1ew11of0gyjrne' />
          </datasources>
          <datasource-dependencies datasource='federated.1wvy67g1wt3g6h1ew11of0gyjrne'>
            <column-instance column='[timestamp]' derivation='Day' name='[dy:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[timestamp]' derivation='Hour' name='[hr:timestamp:ok]' pivot='key' type='ordinal' />
            <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.liftName</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
            <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
            <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.status</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>timestamp</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[timestamp]' derivation='Year' name='[yr:timestamp:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[hr:timestamp:ok]' value='29' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</rows>
        <cols>([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[yr:timestamp:ok] / ([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[dy:timestamp:ok] / [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[hr:timestamp:ok]))</cols>
      </table>
      <simple-id uuid='{CF19F586-1043-4507-B393-15B04F09D8E8}' />
    </worksheet>
    <worksheet name='new'>
      <table>
        <view>
          <datasources>
            <datasource caption='merged_file' name='federated.1wvy67g1wt3g6h1ew11of0gyjrne' />
          </datasources>
          <datasource-dependencies datasource='federated.1wvy67g1wt3g6h1ew11of0gyjrne'>
            <column-instance column='[timestamp]' derivation='Day' name='[dy:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[timestamp]' derivation='Hour' name='[hr:timestamp:ok]' pivot='key' type='ordinal' />
            <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.liftName</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[timestamp]' derivation='Minute' name='[mi:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[timestamp]' derivation='Month' name='[mn:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
            <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
            <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.status</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>timestamp</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[timestamp]' derivation='Minute-Trunc' name='[tmi:timestamp:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mi:timestamp:ok]' value='27' />
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[hr:timestamp:ok]' value='27' />
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[tmi:timestamp:qk]' value='27' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
              <text column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</rows>
        <cols>(([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mn:timestamp:ok] / [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[dy:timestamp:ok]) * [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[tmi:timestamp:qk])</cols>
      </table>
      <simple-id uuid='{8AF9394B-D388-40C1-AAF3-CD0A3FC0B2C5}' />
    </worksheet>
    <worksheet name='timeline'>
      <table>
        <view>
          <datasources>
            <datasource caption='merged_file' name='federated.1wvy67g1wt3g6h1ew11of0gyjrne' />
          </datasources>
          <datasource-dependencies datasource='federated.1wvy67g1wt3g6h1ew11of0gyjrne'>
            <column caption='Placeholder' datatype='integer' name='[Calculation_1068338277994426371]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='min(0)' />
            </column>
            <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.liftName</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
            <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
            <column-instance column='[timestamp]' derivation='None' name='[none:timestamp:qk]' pivot='key' type='quantitative' />
            <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.status</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>timestamp</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Calculation_1068338277994426371]' derivation='User' name='[usr:Calculation_1068338277994426371:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[usr:Calculation_1068338277994426371:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]' value='172' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
              <text column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
                <format attr='shape' value=':filled/square' />
                <format attr='size' value='6.3166670799255371' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='27' />
                <format attr='maxheight' value='27' />
                <format attr='minwidth' value='1275' />
                <format attr='maxwidth' value='1275' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk] * [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[usr:Calculation_1068338277994426371:qk])</rows>
        <cols>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:timestamp:qk]</cols>
      </table>
      <simple-id uuid='{72607584-BE1D-403D-87F4-C59FDBCA1B2A}' />
    </worksheet>
  </worksheets>
  <windows source-height='114'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:resortID:ok]</field>
            <field>[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]</field>
            <field>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:liftName:nk]</field>
            <field>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:resortID (lifts):ok]</field>
            <field>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:status (lifts):nk]</field>
            <field>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:timestamp:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{AC71A15C-2472-495D-A4B5-6332B4494A2A}' />
    </window>
    <window class='worksheet' name='new'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[yr:timestamp:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{9BE1E5AD-5C4D-49AA-9B75-02211099098F}' />
    </window>
    <window class='worksheet' name='gant'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftID:ok]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[qr:timestamp:ok]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[yr:timestamp:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{10BA01CD-F85F-472E-875C-123E143BA18D}' />
    </window>
    <window class='worksheet' maximized='true' name='timeline'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08opw1o1eo1nck11s6rpo1owp9ss].[none:liftName:nk]</field>
            <field>[federated.08opw1o1eo1nck11s6rpo1owp9ss].[none:status:nk]</field>
            <field>[federated.08opw1o1eo1nck11s6rpo1owp9ss].[yr:timestamp:ok]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:Calculation_1068338277993893889:qk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[yr:timestamp:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{18471A19-C3BC-4BB0-9682-D90FB603A4C9}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
      +2ltbaW2tha73f6FLtybm5upqam57Xv19fVcuXLlL37e4XBID816e3txuVx33YZ7hSiECHsd
      0p010e/pr8c7Qp4Fi0Fff5kk+vUtotcx7FaIIXeAf/iHf+AXv/gF69ev5+OPP77ryuyCIHDg
      wAHq6uro6uqiqqoKQRBuEWMNFVEU2bp1Kz/72c/YunUr69at+0Id6erVqxw8ePC271VXV3Pi
      xIm/+Pn//u//luqcHTp0iLKysrtuw71CDHgInN6I6LIhCiECZzYRdjQMW3s+S9jThv/kBkSf
      m7CjnsDZLSDc3e/oXjPkJyRms5mVK1dKasRjx44hiiITJ07k0KFDLFq0iEuXLlFRUYHVamXR
      okXs3LmTtrY2HnjgAUpLS6V1ffo+uyAIbN26FZfLxWOPPcb48ePZuXMny5cvp6amhlAohMFg
      oKWlBZvNRmFhIfn5+dTX13Pq1Cl++MMfYrFY6OnpQa/XY7PZ+P3vf09PTw+PP/44ubm5bNq0
      CZlMRktLC0uWLGHy5MlUVVVRXl5OW1sbSUlJeL1edu7cSXV1NVOmTOFb3/qW1F6Hw8HmzZtx
      Op3Mnj2bWbNm3dFIMZBw3bVrF16vF71ez1NPPcWVK1eorq7GbreTl5fH4sWL6ejoYNu2bfT0
      9PDEE08gCAINDQ309PSQkZExqKbxUJDrzKgmPUbg/DYU0WnIzcnI4zIZMWrEqBSE6HGEaisI
      u5tRpn3N1Ig7d+7kzTff5PDhw1itVj766CPWr1+PSqXC5XKxdetWiouLKSgoQKlUkpmZyZw5
      c9i3bx82m01al8vl4tKlS9LfGRkZFBYWUlZWhtPp5PTp04RCIW7cuEFDQwOtra2sX78el8tF
      TEwM0D88SUlJIS0tjW3btvHuu+/S2dnJ22+/TVRUFA8++CAbN26ku7ubkydPYjabpcqSdrud
      LVu2kJuby+TJk5HL5Rw9epQzZ86wePFiKisrOXv2rNQ+QRB44IEHmD9/Pu+//z7Nzc1/8X/l
      cDi4fPkys2bNor29naNHj1JXV0d3dzfFxcWUl5djs9nYtm0bcXFx5OXlsWXLFlpaWti+fTuN
      jY3S97w7ZChiMpDp4whe/Rhl1qKRp0ZMn0uosRIUGhRjpgz77fYh/3cG4g1Wq5XY2FiSk5MZ
      P348J0+eZO3atTQ1NWGxWHjooYfQ6XR0d3dz8eJF2tvbpdDa7VAoFBQVFREbG8vBgwfvWEo0
      OzubZ599dlAEIRAIIIoimZmZvP3228yaNYuuri5WrFhBQkICFRUVtLe3ExERwezZs3E4HNTW
      1uJ0OtHpdJSUlFBVVSXNDZg6dSolJSVcv36d69evD5pcc+zYMfr6+vB4PPT09EivDxjnBpxC
      AzvUYrEwbdo03G43169fx2AwkJWVRXFxMadOnaKxsRGbzUZPTw8qlYqOjg78fj8pKSn83d/9
      HQbDF5NFiWEBfC6QKRB9LmSG+C+0nq8MnxOZxoTY14UY8iFT3d0EpnvNkM8ASqWSpKQk0tPT
      iY+Pp6uri5s3b2IwGDh58iQGgwGn00lnZycOh4Pjx4/jdrt5/vnnb1ujd4AB+VRjY6OUpPT7
      /XR3d2O326XlkpOTByUks7KyuHHjBsePHycjIwOj0SglPuvq6rhx44aU8Bxg4MepVqvp7u6m
      vb0dl8tFOBzGbDbT2NhIR0cHTU1Ng47A+/btw2w288ILL9wycy0iIoLq6mra2to4e/asVIZ1
      IPJdV1eH2WxGJpMRCATo6uqis7OT6OhozGYzaWlpPP744zzzzDOoVCrGjBnzhX/8iCKhhsPI
      DHH9asTqrSNPjXj1Y5QTF6OITiNU9zVSI/p8Pt544w1JjajVasnJySEnJ4f333+f3NxcJkyY
      wGuvvUZKSgqzZs3ixo0b/OpXv8LpdKJUKtFqtSiVShQKhXR0NZlMrFu3Dq/Xy7Jly0hOTkap
      VPKf//mfKBQKZs+ejUqlumX6pcVi4Rvf+IZ00RkKhYiJiWHBggWUlZUhCALFxcXEx8ej1+ul
      Atc6nU4KxP3yl79EqVSSlZVFUVERJ0+e5J//+Z8xGAxMmzaNyspKNBoNmZmZrFu3DpvNhiAI
      g6xy8+fP54033uDcuXOoVCpmzpxJW1sbV65c4cUXX0Sj0fD973+fQ4cO8dFHH3H8+HGp9vH8
      +fMpKyvj3LlzpKSkMGXKlC+lWwz3dhBuPY966reRqQ0IttMIrTUok4tGjBpRptSgSMhFNFsJ
      nnsHxv0fUyMO6BAVCoXk9vys/vDTfHroMLDcgBpRr9d/7hhREAR8Pt+gZfv6+qSL5zt9PhwO
      4/F4MBgMUmhNEATcbrckzv10G/1+/x2/SzAYxO12S4U7qqur+eCDD3jxxRdRq9XI5XJ+//vf
      o1arWbp06aAzmSAIBAIByVE6yl8PmUwm+3/dVqAL/5htHwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='gant' width='192'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='new' width='192'>
      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
      f0jCYARKutTBAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='timeline' width='192'>
      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
      AElFTkSuQmCC
    </thumbnail>
  </thumbnails>
</workbook>
