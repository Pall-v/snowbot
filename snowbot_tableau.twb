<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20192.19.1210.2209                               -->
<workbook locale='en_CA' original-version='18.1' source-build='2019.2.7 (20192.19.1210.2209)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <SheetIdentifierTracking ignorable='true' predowngraded='true' />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='data copy (2)' inline='true' name='federated.0zhkbyo1mslrtt1ghsz8u1ynl7tl' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='data copy' name='semistructpassivestore-direct.0kvg3nx1kz3d570zsc5sa03u2x5k'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/dev/snowbot' filename='data copy.json' password='' server=''>
              <semistruct-schemas />
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.0kvg3nx1kz3d570zsc5sa03u2x5k' name='data copy.json' table='[data copy.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[data copy.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[data copy.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[data copy.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[data copy.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[data copy.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[data copy.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[data copy.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[data copy.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='string' name='[timestamp]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Data Copy' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.573758' measure-ordering='alphabetic' measure-percentage='0.426242' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='data copy' inline='true' name='federated.0jlna3j08tgpzl11pw1dy1ruxk4h' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='data_2019_20' name='semistructpassivestore-direct.186jri006b94kh18mih311yzp959'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/Downloads' filename='/Users/paul/Downloads/data_2019_20.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[data copy.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='terrain' value='false' />
                  <map key='terrain.Value' value='false' />
                  <map key='weather' value='false' />
                  <map key='weather.Value' value='false' />
                  <map key='weather.Value.weatherForecast' value='false' />
                  <map key='weather.Value.weatherForecast.Value' value='false' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
                <semistruct-schema table='[data_2019_20.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='terrain' value='false' />
                  <map key='terrain.Value' value='false' />
                  <map key='weather' value='false' />
                  <map key='weather.Value' value='false' />
                  <map key='weather.Value.weatherForecast' value='false' />
                  <map key='weather.Value.weatherForecast.Value' value='false' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.186jri006b94kh18mih311yzp959' name='data_2019_20.json' table='[data_2019_20.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[data_2019_20.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[data_2019_20.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[data_2019_20.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[data_2019_20.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[data_2019_20.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[data_2019_20.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[data_2019_20.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[data_2019_20.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per data_2019_20.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at data_2019_20.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per lifts]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([lifts Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at lifts level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' datatype-customized='true' default-role='measure' default-type='quantitative' name='[Number of Records]' role='dimension' type='nominal' user:auto-column='numrec'>
        <calculation class='tableau' formula='STR(1)' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='real' name='[resortID (lifts)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status (Lifts)' datatype='string' name='[status (lifts)]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='string' name='[timestamp]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Data 2019 20' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <folder name='Terrain' role='dimensions' />
      <folder name='Weather' role='dimensions' />
      <folder name='Weather Forecast' role='dimensions' />
      <folder name='Source Measures' role='measures' />
      <layout dim-ordering='alphabetic' dim-percentage='0.59116' measure-ordering='alphabetic' measure-percentage='0.40884' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='data_2019_20 (2)' inline='true' name='federated.0eybhs500l9ylc1gsy6ck1v4ikyq' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='data_2019_20' name='semistructpassivestore-direct.0osfbb209jkg4v1giubl70heh35e'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/Downloads' filename='data_2019_20.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[data_2019_20.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='terrain' value='false' />
                  <map key='terrain.Value' value='false' />
                  <map key='weather' value='false' />
                  <map key='weather.Value' value='false' />
                  <map key='weather.Value.weatherForecast' value='false' />
                  <map key='weather.Value.weatherForecast.Value' value='false' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.0osfbb209jkg4v1giubl70heh35e' name='data_2019_20.json' table='[data_2019_20.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[data_2019_20.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[data_2019_20.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[data_2019_20.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[data_2019_20.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[data_2019_20.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[data_2019_20.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[data_2019_20.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[data_2019_20.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per data_2019_20.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at data_2019_20.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per lifts]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([lifts Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at lifts level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='string' name='[timestamp]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Data 2019 20' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.556914' measure-ordering='alphabetic' measure-percentage='0.443086' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='2020_01_02_14_32_wb_lifts' inline='true' name='federated.08opw1o1eo1nck11s6rpo1owp9ss' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='2020_01_02_14_32_wb_lifts' name='semistructpassivestore-direct.1dtv35r0u4esro1fk07v0187u0xa'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/Downloads' filename='2020_01_02_14_32_wb_lifts.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[2020_01_02_14_32_wb_lifts.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.1dtv35r0u4esro1fk07v0187u0xa' name='2020_01_02_14_32_wb_lifts.json' table='[2020_01_02_14_32_wb_lifts.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[2020_01_02_14_32_wb_lifts.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[2020_01_02_14_32_wb_lifts.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per 2020_01_02_14_32_wb_lifts.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at 2020_01_02_14_32_wb_lifts.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per lifts]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([lifts Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at lifts level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='2020 01 02 14 32 Wb Lifts' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.558011' measure-ordering='alphabetic' measure-percentage='0.441989' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='merged_file' inline='true' name='federated.1wvy67g1wt3g6h1ew11of0gyjrne' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='merged_file' name='semistructpassivestore-direct.02oo5wi11mul0x1dlv3tb0vfen1p'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/dev/snowbot/data' filename='merged_file.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[merged_file.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.02oo5wi11mul0x1dlv3tb0vfen1p' name='merged_file.json' table='[merged_file.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[merged_file.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[merged_file.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[merged_file.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[merged_file.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[merged_file.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[merged_file.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[merged_file.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[merged_file.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Placeholder' datatype='integer' name='[Calculation_1068338277994426371]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='min(0)' />
      </column>
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Area' datatype='string' name='[Lift Name (group)]' role='dimension' type='nominal'>
        <calculation class='categorical-bin' column='[liftName]' new-bin='true'>
          <bin default-name='false' value='&quot;Alpine&quot;'>
            <value>&quot;7th Heaven Express&quot;</value>
            <value>&quot;Glacier Express&quot;</value>
            <value>&quot;Harmony 6 Express&quot;</value>
            <value>&quot;Horstman T-Bar&quot;</value>
            <value>&quot;Peak Express&quot;</value>
            <value>&quot;Showcase T-Bar&quot;</value>
            <value>&quot;Symphony Express&quot;</value>
            <value>&quot;T-Bars&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Sub-alpine&quot;'>
            <value>&quot;Big Red Express&quot;</value>
            <value>&quot;Blackcomb Gondola Lower&quot;</value>
            <value>&quot;Blackcomb Gondola Upper&quot;</value>
            <value>&quot;Catskinner Express&quot;</value>
            <value>&quot;Coca-Cola Tube Park&quot;</value>
            <value>&quot;Creekside Gondola&quot;</value>
            <value>&quot;Crystal Ridge Express&quot;</value>
            <value>&quot;Emerald 6 Express&quot;</value>
            <value>&quot;Excalibur Gondola Lower&quot;</value>
            <value>&quot;Excalibur Gondola Upper&quot;</value>
            <value>&quot;Excelerator Express&quot;</value>
            <value>&quot;Fitzsimmons Express&quot;</value>
            <value>&quot;Franz&apos;s Chair&quot;</value>
            <value>&quot;Garbanzo Express&quot;</value>
            <value>&quot;Jersey Cream Express&quot;</value>
            <value>&quot;Magic Chair&quot;</value>
            <value>&quot;Olympic Chair&quot;</value>
            <value>&quot;Peak 2 Peak Gondola&quot;</value>
            <value>&quot;Whistler Village Gondola Lower&quot;</value>
            <value>&quot;Whistler Village Gondola Upper&quot;</value>
          </bin>
        </calculation>
      </column>
      <column datatype='string' name='[Mountain]' role='dimension' type='nominal'>
        <calculation class='categorical-bin' column='[liftName]' new-bin='true'>
          <bin default-name='false' value='&quot;Blackcomb&quot;'>
            <value>&quot;7th Heaven Express&quot;</value>
            <value>&quot;Blackcomb Gondola Lower&quot;</value>
            <value>&quot;Blackcomb Gondola Upper&quot;</value>
            <value>&quot;Catskinner Express&quot;</value>
            <value>&quot;Coca-Cola Tube Park&quot;</value>
            <value>&quot;Crystal Ridge Express&quot;</value>
            <value>&quot;Excalibur Gondola Lower&quot;</value>
            <value>&quot;Excalibur Gondola Upper&quot;</value>
            <value>&quot;Excelerator Express&quot;</value>
            <value>&quot;Glacier Express&quot;</value>
            <value>&quot;Horstman T-Bar&quot;</value>
            <value>&quot;Jersey Cream Express&quot;</value>
            <value>&quot;Magic Chair&quot;</value>
            <value>&quot;Showcase T-Bar&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Whistler&quot;'>
            <value>&quot;Big Red Express&quot;</value>
            <value>&quot;Creekside Gondola&quot;</value>
            <value>&quot;Emerald 6 Express&quot;</value>
            <value>&quot;Fitzsimmons Express&quot;</value>
            <value>&quot;Franz&apos;s Chair&quot;</value>
            <value>&quot;Garbanzo Express&quot;</value>
            <value>&quot;Harmony 6 Express&quot;</value>
            <value>&quot;Olympic Chair&quot;</value>
            <value>&quot;Peak Express&quot;</value>
            <value>&quot;Symphony Express&quot;</value>
            <value>&quot;T-Bars&quot;</value>
            <value>&quot;Whistler Village Gondola Lower&quot;</value>
            <value>&quot;Whistler Village Gondola Upper&quot;</value>
          </bin>
        </calculation>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per lifts]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([lifts Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at lifts level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per merged_file.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at merged_file.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;H&quot;' value='Standby' />
          <alias key='&quot;O&quot;' value='Open' />
          <alias key='&quot;X&quot;' value='Closed' />
        </aliases>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <column-instance column='[status]' derivation='Attribute' name='[attr:status:nk]' pivot='key' type='nominal' />
      <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[Lift Name (group)]' type='field' />
        <folder-item name='[Mountain]' type='field' />
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <folder name='Merged File' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.550118' measure-ordering='alphabetic' measure-percentage='0.449882' show-structure='false' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[attr:status:nk]' type='palette'>
            <map to='#59a14f'>
              <bucket>&quot;O&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;X&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;H&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:status:nk]' type='palette'>
            <map to='#59a14f'>
              <bucket>&quot;O&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;X&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;H&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='data copy' name='federated.0jlna3j08tgpzl11pw1dy1ruxk4h' />
            <datasource caption='data_2019_20 (2)' name='federated.0eybhs500l9ylc1gsy6ck1v4ikyq' />
          </datasources>
          <datasource-dependencies datasource='federated.0eybhs500l9ylc1gsy6ck1v4ikyq'>
            <column-instance column='[resortID]' derivation='None' name='[none:resortID:ok]' pivot='key' type='ordinal' />
            <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
            <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.resortID</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.status</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0jlna3j08tgpzl11pw1dy1ruxk4h'>
            <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.liftName</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
            <column-instance column='[timestamp]' derivation='None' name='[none:timestamp:nk]' pivot='key' type='nominal' />
            <column caption='Timestamp' datatype='string' name='[timestamp]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>timestamp</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:resortID:ok]'>
            <groupfilter function='member' level='[none:resortID:ok]' member='13.0' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:resortID:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='background-color' field='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Text' />
            <encodings>
              <color column='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]' />
              <text column='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:liftName:nk]</rows>
        <cols>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:timestamp:nk]</cols>
      </table>
      <simple-id uuid='{8F8EEEED-A901-4EB9-B7ED-7B2903E48F21}' />
    </worksheet>
    <worksheet name='gant'>
      <table>
        <view>
          <datasources>
            <datasource caption='merged_file' name='federated.1wvy67g1wt3g6h1ew11of0gyjrne' />
          </datasources>
          <datasource-dependencies datasource='federated.1wvy67g1wt3g6h1ew11of0gyjrne'>
            <column caption='Lift Area' datatype='string' name='[Lift Name (group)]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[liftName]' new-bin='true'>
                <bin default-name='false' value='&quot;Alpine&quot;'>
                  <value>&quot;7th Heaven Express&quot;</value>
                  <value>&quot;Glacier Express&quot;</value>
                  <value>&quot;Harmony 6 Express&quot;</value>
                  <value>&quot;Horstman T-Bar&quot;</value>
                  <value>&quot;Peak Express&quot;</value>
                  <value>&quot;Showcase T-Bar&quot;</value>
                  <value>&quot;Symphony Express&quot;</value>
                  <value>&quot;T-Bars&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Sub-alpine&quot;'>
                  <value>&quot;Big Red Express&quot;</value>
                  <value>&quot;Blackcomb Gondola Lower&quot;</value>
                  <value>&quot;Blackcomb Gondola Upper&quot;</value>
                  <value>&quot;Catskinner Express&quot;</value>
                  <value>&quot;Coca-Cola Tube Park&quot;</value>
                  <value>&quot;Creekside Gondola&quot;</value>
                  <value>&quot;Crystal Ridge Express&quot;</value>
                  <value>&quot;Emerald 6 Express&quot;</value>
                  <value>&quot;Excalibur Gondola Lower&quot;</value>
                  <value>&quot;Excalibur Gondola Upper&quot;</value>
                  <value>&quot;Excelerator Express&quot;</value>
                  <value>&quot;Fitzsimmons Express&quot;</value>
                  <value>&quot;Franz&apos;s Chair&quot;</value>
                  <value>&quot;Garbanzo Express&quot;</value>
                  <value>&quot;Jersey Cream Express&quot;</value>
                  <value>&quot;Magic Chair&quot;</value>
                  <value>&quot;Olympic Chair&quot;</value>
                  <value>&quot;Peak 2 Peak Gondola&quot;</value>
                  <value>&quot;Whistler Village Gondola Lower&quot;</value>
                  <value>&quot;Whistler Village Gondola Upper&quot;</value>
                </bin>
              </calculation>
            </column>
            <column datatype='string' name='[Mountain]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[liftName]' new-bin='true'>
                <bin default-name='false' value='&quot;Blackcomb&quot;'>
                  <value>&quot;7th Heaven Express&quot;</value>
                  <value>&quot;Blackcomb Gondola Lower&quot;</value>
                  <value>&quot;Blackcomb Gondola Upper&quot;</value>
                  <value>&quot;Catskinner Express&quot;</value>
                  <value>&quot;Coca-Cola Tube Park&quot;</value>
                  <value>&quot;Crystal Ridge Express&quot;</value>
                  <value>&quot;Excalibur Gondola Lower&quot;</value>
                  <value>&quot;Excalibur Gondola Upper&quot;</value>
                  <value>&quot;Excelerator Express&quot;</value>
                  <value>&quot;Glacier Express&quot;</value>
                  <value>&quot;Horstman T-Bar&quot;</value>
                  <value>&quot;Jersey Cream Express&quot;</value>
                  <value>&quot;Magic Chair&quot;</value>
                  <value>&quot;Showcase T-Bar&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Whistler&quot;'>
                  <value>&quot;Big Red Express&quot;</value>
                  <value>&quot;Creekside Gondola&quot;</value>
                  <value>&quot;Emerald 6 Express&quot;</value>
                  <value>&quot;Fitzsimmons Express&quot;</value>
                  <value>&quot;Franz&apos;s Chair&quot;</value>
                  <value>&quot;Garbanzo Express&quot;</value>
                  <value>&quot;Harmony 6 Express&quot;</value>
                  <value>&quot;Olympic Chair&quot;</value>
                  <value>&quot;Peak Express&quot;</value>
                  <value>&quot;Symphony Express&quot;</value>
                  <value>&quot;T-Bars&quot;</value>
                  <value>&quot;Whistler Village Gondola Lower&quot;</value>
                  <value>&quot;Whistler Village Gondola Upper&quot;</value>
                </bin>
              </calculation>
            </column>
            <column-instance column='[timestamp]' derivation='Day' name='[dy:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[timestamp]' derivation='Hour' name='[hr:timestamp:ok]' pivot='key' type='ordinal' />
            <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.liftName</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[timestamp]' derivation='Minute' name='[mi:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[timestamp]' derivation='Month' name='[mn:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
            <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
            <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;H&quot;' value='Standby' />
                <alias key='&quot;O&quot;' value='Open' />
                <alias key='&quot;X&quot;' value='Closed' />
              </aliases>
              <desc>
                <formatted-text>
                  <run>lifts.Value.status</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>timestamp</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[timestamp]' derivation='Year' name='[yr:timestamp:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[hr:timestamp:ok]' value='29' />
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mi:timestamp:ok]' value='28' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Lift Name (group)] / ([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Mountain] / [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]))</rows>
        <cols>([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[yr:timestamp:ok] / ([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mn:timestamp:ok] / ([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[dy:timestamp:ok] / ([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[hr:timestamp:ok] / [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mi:timestamp:ok]))))</cols>
      </table>
      <simple-id uuid='{CF19F586-1043-4507-B393-15B04F09D8E8}' />
    </worksheet>
    <worksheet name='new'>
      <table>
        <view>
          <datasources>
            <datasource caption='merged_file' name='federated.1wvy67g1wt3g6h1ew11of0gyjrne' />
          </datasources>
          <datasource-dependencies datasource='federated.1wvy67g1wt3g6h1ew11of0gyjrne'>
            <column-instance column='[timestamp]' derivation='Day' name='[dy:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[timestamp]' derivation='Hour' name='[hr:timestamp:ok]' pivot='key' type='ordinal' />
            <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.liftName</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[timestamp]' derivation='Minute' name='[mi:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[timestamp]' derivation='Month' name='[mn:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
            <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
            <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;H&quot;' value='Standby' />
                <alias key='&quot;O&quot;' value='Open' />
                <alias key='&quot;X&quot;' value='Closed' />
              </aliases>
              <desc>
                <formatted-text>
                  <run>lifts.Value.status</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>timestamp</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[timestamp]' derivation='Minute-Trunc' name='[tmi:timestamp:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mi:timestamp:ok]' value='27' />
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[hr:timestamp:ok]' value='27' />
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[tmi:timestamp:qk]' value='27' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
              <text column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</rows>
        <cols>(([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mn:timestamp:ok] / [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[dy:timestamp:ok]) * [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[tmi:timestamp:qk])</cols>
      </table>
      <simple-id uuid='{8AF9394B-D388-40C1-AAF3-CD0A3FC0B2C5}' />
    </worksheet>
    <worksheet name='timeline'>
      <table>
        <view>
          <datasources>
            <datasource caption='merged_file' name='federated.1wvy67g1wt3g6h1ew11of0gyjrne' />
          </datasources>
          <datasource-dependencies datasource='federated.1wvy67g1wt3g6h1ew11of0gyjrne'>
            <column caption='Placeholder' datatype='integer' name='[Calculation_1068338277994426371]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='min(0)' />
            </column>
            <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.liftName</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
            <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
            <column-instance column='[timestamp]' derivation='None' name='[none:timestamp:qk]' pivot='key' type='quantitative' />
            <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;H&quot;' value='Standby' />
                <alias key='&quot;O&quot;' value='Open' />
                <alias key='&quot;X&quot;' value='Closed' />
              </aliases>
              <desc>
                <formatted-text>
                  <run>lifts.Value.status</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>timestamp</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Calculation_1068338277994426371]' derivation='User' name='[usr:Calculation_1068338277994426371:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[usr:Calculation_1068338277994426371:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]' value='172' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
              <text column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
                <format attr='shape' value=':filled/square' />
                <format attr='size' value='6.3166670799255371' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='27' />
                <format attr='maxheight' value='27' />
                <format attr='minwidth' value='1275' />
                <format attr='maxwidth' value='1275' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk] * [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[usr:Calculation_1068338277994426371:qk])</rows>
        <cols>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:timestamp:qk]</cols>
      </table>
      <simple-id uuid='{72607584-BE1D-403D-87F4-C59FDBCA1B2A}' />
    </worksheet>
  </worksheets>
  <windows source-height='114'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:resortID:ok]</field>
            <field>[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]</field>
            <field>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:liftName:nk]</field>
            <field>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:resortID (lifts):ok]</field>
            <field>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:status (lifts):nk]</field>
            <field>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:timestamp:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{AC71A15C-2472-495D-A4B5-6332B4494A2A}' />
    </window>
    <window class='worksheet' name='new'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[yr:timestamp:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{9BE1E5AD-5C4D-49AA-9B75-02211099098F}' />
    </window>
    <window class='worksheet' maximized='true' name='gant'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Lift Area]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Lift Name (group)]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Mountain]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mn:timestamp:ok]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftID:ok]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[qr:timestamp:ok]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[yr:timestamp:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{10BA01CD-F85F-472E-875C-123E143BA18D}' />
    </window>
    <window class='worksheet' name='timeline'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08opw1o1eo1nck11s6rpo1owp9ss].[none:liftName:nk]</field>
            <field>[federated.08opw1o1eo1nck11s6rpo1owp9ss].[none:status:nk]</field>
            <field>[federated.08opw1o1eo1nck11s6rpo1owp9ss].[yr:timestamp:ok]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:Calculation_1068338277993893889:qk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[yr:timestamp:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{18471A19-C3BC-4BB0-9682-D90FB603A4C9}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
      +2ltbaW2tha73f6FLtybm5upqam57Xv19fVcuXLlL37e4XBID816e3txuVx33YZ7hSiECHsd
      0p010e/pr8c7Qp4Fi0Fff5kk+vUtotcx7FaIIXeAf/iHf+AXv/gF69ev5+OPP77ryuyCIHDg
      wAHq6uro6uqiqqoKQRBuEWMNFVEU2bp1Kz/72c/YunUr69at+0Id6erVqxw8ePC271VXV3Pi
      xIm/+Pn//u//luqcHTp0iLKysrtuw71CDHgInN6I6LIhCiECZzYRdjQMW3s+S9jThv/kBkSf
      m7CjnsDZLSDc3e/oXjPkJyRms5mVK1dKasRjx44hiiITJ07k0KFDLFq0iEuXLlFRUYHVamXR
      okXs3LmTtrY2HnjgAUpLS6V1ffo+uyAIbN26FZfLxWOPPcb48ePZuXMny5cvp6amhlAohMFg
      oKWlBZvNRmFhIfn5+dTX13Pq1Cl++MMfYrFY6OnpQa/XY7PZ+P3vf09PTw+PP/44ubm5bNq0
      CZlMRktLC0uWLGHy5MlUVVVRXl5OW1sbSUlJeL1edu7cSXV1NVOmTOFb3/qW1F6Hw8HmzZtx
      Op3Mnj2bWbNm3dFIMZBw3bVrF16vF71ez1NPPcWVK1eorq7GbreTl5fH4sWL6ejoYNu2bfT0
      9PDEE08gCAINDQ309PSQkZExqKbxUJDrzKgmPUbg/DYU0WnIzcnI4zIZMWrEqBSE6HGEaisI
      u5tRpn3N1Ig7d+7kzTff5PDhw1itVj766CPWr1+PSqXC5XKxdetWiouLKSgoQKlUkpmZyZw5
      c9i3bx82m01al8vl4tKlS9LfGRkZFBYWUlZWhtPp5PTp04RCIW7cuEFDQwOtra2sX78el8tF
      TEwM0D88SUlJIS0tjW3btvHuu+/S2dnJ22+/TVRUFA8++CAbN26ku7ubkydPYjabpcqSdrud
      LVu2kJuby+TJk5HL5Rw9epQzZ86wePFiKisrOXv2rNQ+QRB44IEHmD9/Pu+//z7Nzc1/8X/l
      cDi4fPkys2bNor29naNHj1JXV0d3dzfFxcWUl5djs9nYtm0bcXFx5OXlsWXLFlpaWti+fTuN
      jY3S97w7ZChiMpDp4whe/Rhl1qKRp0ZMn0uosRIUGhRjpgz77fYh/3cG4g1Wq5XY2FiSk5MZ
      P348J0+eZO3atTQ1NWGxWHjooYfQ6XR0d3dz8eJF2tvbpdDa7VAoFBQVFREbG8vBgwfvWEo0
      OzubZ599dlAEIRAIIIoimZmZvP3228yaNYuuri5WrFhBQkICFRUVtLe3ExERwezZs3E4HNTW
      1uJ0OtHpdJSUlFBVVSXNDZg6dSolJSVcv36d69evD5pcc+zYMfr6+vB4PPT09EivDxjnBpxC
      AzvUYrEwbdo03G43169fx2AwkJWVRXFxMadOnaKxsRGbzUZPTw8qlYqOjg78fj8pKSn83d/9
      HQbDF5NFiWEBfC6QKRB9LmSG+C+0nq8MnxOZxoTY14UY8iFT3d0EpnvNkM8ASqWSpKQk0tPT
      iY+Pp6uri5s3b2IwGDh58iQGgwGn00lnZycOh4Pjx4/jdrt5/vnnb1ujd4AB+VRjY6OUpPT7
      /XR3d2O326XlkpOTByUks7KyuHHjBsePHycjIwOj0SglPuvq6rhx44aU8Bxg4MepVqvp7u6m
      vb0dl8tFOBzGbDbT2NhIR0cHTU1Ng47A+/btw2w288ILL9wycy0iIoLq6mra2to4e/asVIZ1
      IPJdV1eH2WxGJpMRCATo6uqis7OT6OhozGYzaWlpPP744zzzzDOoVCrGjBnzhX/8iCKhhsPI
      DHH9asTqrSNPjXj1Y5QTF6OITiNU9zVSI/p8Pt544w1JjajVasnJySEnJ4f333+f3NxcJkyY
      wGuvvUZKSgqzZs3ixo0b/OpXv8LpdKJUKtFqtSiVShQKhXR0NZlMrFu3Dq/Xy7Jly0hOTkap
      VPKf//mfKBQKZs+ejUqlumX6pcVi4Rvf+IZ00RkKhYiJiWHBggWUlZUhCALFxcXEx8ej1+ul
      Atc6nU4KxP3yl79EqVSSlZVFUVERJ0+e5J//+Z8xGAxMmzaNyspKNBoNmZmZrFu3DpvNhiAI
      g6xy8+fP54033uDcuXOoVCpmzpxJW1sbV65c4cUXX0Sj0fD973+fQ4cO8dFHH3H8+HGp9vH8
      +fMpKyvj3LlzpKSkMGXKlC+lWwz3dhBuPY966reRqQ0IttMIrTUok4tGjBpRptSgSMhFNFsJ
      nnsHxv0fUyMO6BAVCoXk9vys/vDTfHroMLDcgBpRr9d/7hhREAR8Pt+gZfv6+qSL5zt9PhwO
      4/F4MBgMUmhNEATcbrckzv10G/1+/x2/SzAYxO12S4U7qqur+eCDD3jxxRdRq9XI5XJ+//vf
      o1arWbp06aAzmSAIBAIByVE6yl8PmUwm+3/dVqAL/5htHwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='gant' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='new' width='192'>
      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
      f0jCYARKutTBAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='timeline' width='192'>
      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
      AElFTkSuQmCC
    </thumbnail>
  </thumbnails>
</workbook>
