<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20192.19.1210.2209                               -->
<workbook locale='en_CA' original-version='18.1' source-build='2019.2.7 (20192.19.1210.2209)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <SheetIdentifierTracking ignorable='true' predowngraded='true' />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='data copy (2)' inline='true' name='federated.0zhkbyo1mslrtt1ghsz8u1ynl7tl' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='data copy' name='semistructpassivestore-direct.0kvg3nx1kz3d570zsc5sa03u2x5k'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/dev/snowbot' filename='data copy.json' password='' server=''>
              <semistruct-schemas />
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.0kvg3nx1kz3d570zsc5sa03u2x5k' name='data copy.json' table='[data copy.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[data copy.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[data copy.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[data copy.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[data copy.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[data copy.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[data copy.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[data copy.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[data copy.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='string' name='[timestamp]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Data Copy' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.573758' measure-ordering='alphabetic' measure-percentage='0.426242' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='data copy' inline='true' name='federated.0jlna3j08tgpzl11pw1dy1ruxk4h' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='data_2019_20' name='semistructpassivestore-direct.186jri006b94kh18mih311yzp959'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/Downloads' filename='/Users/paul/Downloads/data_2019_20.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[data copy.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='terrain' value='false' />
                  <map key='terrain.Value' value='false' />
                  <map key='weather' value='false' />
                  <map key='weather.Value' value='false' />
                  <map key='weather.Value.weatherForecast' value='false' />
                  <map key='weather.Value.weatherForecast.Value' value='false' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
                <semistruct-schema table='[data_2019_20.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='terrain' value='false' />
                  <map key='terrain.Value' value='false' />
                  <map key='weather' value='false' />
                  <map key='weather.Value' value='false' />
                  <map key='weather.Value.weatherForecast' value='false' />
                  <map key='weather.Value.weatherForecast.Value' value='false' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.186jri006b94kh18mih311yzp959' name='data_2019_20.json' table='[data_2019_20.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[data_2019_20.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[data_2019_20.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[data_2019_20.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[data_2019_20.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[data_2019_20.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[data_2019_20.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[data_2019_20.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[data_2019_20.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per data_2019_20.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at data_2019_20.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per lifts]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([lifts Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at lifts level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' datatype-customized='true' default-role='measure' default-type='quantitative' name='[Number of Records]' role='dimension' type='nominal' user:auto-column='numrec'>
        <calculation class='tableau' formula='STR(1)' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='real' name='[resortID (lifts)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status (Lifts)' datatype='string' name='[status (lifts)]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='string' name='[timestamp]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Data 2019 20' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <folder name='Terrain' role='dimensions' />
      <folder name='Weather' role='dimensions' />
      <folder name='Weather Forecast' role='dimensions' />
      <folder name='Source Measures' role='measures' />
      <layout dim-ordering='alphabetic' dim-percentage='0.59116' measure-ordering='alphabetic' measure-percentage='0.40884' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='data_2019_20 (2)' inline='true' name='federated.0eybhs500l9ylc1gsy6ck1v4ikyq' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='data_2019_20' name='semistructpassivestore-direct.0osfbb209jkg4v1giubl70heh35e'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/Downloads' filename='data_2019_20.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[data_2019_20.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='terrain' value='false' />
                  <map key='terrain.Value' value='false' />
                  <map key='weather' value='false' />
                  <map key='weather.Value' value='false' />
                  <map key='weather.Value.weatherForecast' value='false' />
                  <map key='weather.Value.weatherForecast.Value' value='false' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.0osfbb209jkg4v1giubl70heh35e' name='data_2019_20.json' table='[data_2019_20.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[data_2019_20.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[data_2019_20.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[data_2019_20.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[data_2019_20.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[data_2019_20.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[data_2019_20.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[data_2019_20.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[data_2019_20.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per data_2019_20.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at data_2019_20.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per lifts]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([lifts Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at lifts level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='string' name='[timestamp]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Data 2019 20' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.556914' measure-ordering='alphabetic' measure-percentage='0.443086' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='2020_01_02_14_32_wb_lifts' inline='true' name='federated.08opw1o1eo1nck11s6rpo1owp9ss' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='2020_01_02_14_32_wb_lifts' name='semistructpassivestore-direct.1dtv35r0u4esro1fk07v0187u0xa'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/Downloads' filename='2020_01_02_14_32_wb_lifts.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[2020_01_02_14_32_wb_lifts.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.1dtv35r0u4esro1fk07v0187u0xa' name='2020_01_02_14_32_wb_lifts.json' table='[2020_01_02_14_32_wb_lifts.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[2020_01_02_14_32_wb_lifts.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[2020_01_02_14_32_wb_lifts.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[2020_01_02_14_32_wb_lifts.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[2020_01_02_14_32_wb_lifts.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per 2020_01_02_14_32_wb_lifts.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at 2020_01_02_14_32_wb_lifts.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per lifts]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([lifts Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at lifts level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='2020 01 02 14 32 Wb Lifts' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.558011' measure-ordering='alphabetic' measure-percentage='0.441989' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='merged_file' inline='true' name='federated.1wvy67g1wt3g6h1ew11of0gyjrne' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='merged_file' name='semistructpassivestore-direct.02oo5wi11mul0x1dlv3tb0vfen1p'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/dev/snowbot/data' filename='merged_file.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[merged_file.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.02oo5wi11mul0x1dlv3tb0vfen1p' name='merged_file.json' table='[merged_file.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[merged_file.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[merged_file.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[merged_file.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[merged_file.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[merged_file.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[merged_file.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[merged_file.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[merged_file.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Placeholder' datatype='integer' name='[Calculation_1068338277994426371]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='min(0)' />
      </column>
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Area' datatype='string' name='[Lift Name (group)]' role='dimension' type='nominal'>
        <calculation class='categorical-bin' column='[liftName]' new-bin='true'>
          <bin default-name='false' value='&quot;Alpine&quot;'>
            <value>&quot;7th Heaven Express&quot;</value>
            <value>&quot;Glacier Express&quot;</value>
            <value>&quot;Harmony 6 Express&quot;</value>
            <value>&quot;Horstman T-Bar&quot;</value>
            <value>&quot;Peak Express&quot;</value>
            <value>&quot;Showcase T-Bar&quot;</value>
            <value>&quot;Symphony Express&quot;</value>
            <value>&quot;T-Bars&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Sub-alpine&quot;'>
            <value>&quot;Big Red Express&quot;</value>
            <value>&quot;Blackcomb Gondola Lower&quot;</value>
            <value>&quot;Blackcomb Gondola Upper&quot;</value>
            <value>&quot;Catskinner Express&quot;</value>
            <value>&quot;Coca-Cola Tube Park&quot;</value>
            <value>&quot;Creekside Gondola&quot;</value>
            <value>&quot;Crystal Ridge Express&quot;</value>
            <value>&quot;Emerald 6 Express&quot;</value>
            <value>&quot;Excalibur Gondola Lower&quot;</value>
            <value>&quot;Excalibur Gondola Upper&quot;</value>
            <value>&quot;Excelerator Express&quot;</value>
            <value>&quot;Fitzsimmons Express&quot;</value>
            <value>&quot;Franz&apos;s Chair&quot;</value>
            <value>&quot;Garbanzo Express&quot;</value>
            <value>&quot;Jersey Cream Express&quot;</value>
            <value>&quot;Magic Chair&quot;</value>
            <value>&quot;Olympic Chair&quot;</value>
            <value>&quot;Peak 2 Peak Gondola&quot;</value>
            <value>&quot;Whistler Village Gondola Lower&quot;</value>
            <value>&quot;Whistler Village Gondola Upper&quot;</value>
          </bin>
        </calculation>
      </column>
      <column datatype='string' name='[Mountain]' role='dimension' type='nominal'>
        <calculation class='categorical-bin' column='[liftName]' new-bin='true'>
          <bin default-name='false' value='&quot;Blackcomb&quot;'>
            <value>&quot;7th Heaven Express&quot;</value>
            <value>&quot;Blackcomb Gondola Lower&quot;</value>
            <value>&quot;Blackcomb Gondola Upper&quot;</value>
            <value>&quot;Catskinner Express&quot;</value>
            <value>&quot;Coca-Cola Tube Park&quot;</value>
            <value>&quot;Crystal Ridge Express&quot;</value>
            <value>&quot;Excalibur Gondola Lower&quot;</value>
            <value>&quot;Excalibur Gondola Upper&quot;</value>
            <value>&quot;Excelerator Express&quot;</value>
            <value>&quot;Glacier Express&quot;</value>
            <value>&quot;Horstman T-Bar&quot;</value>
            <value>&quot;Jersey Cream Express&quot;</value>
            <value>&quot;Magic Chair&quot;</value>
            <value>&quot;Showcase T-Bar&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Whistler&quot;'>
            <value>&quot;Big Red Express&quot;</value>
            <value>&quot;Creekside Gondola&quot;</value>
            <value>&quot;Emerald 6 Express&quot;</value>
            <value>&quot;Fitzsimmons Express&quot;</value>
            <value>&quot;Franz&apos;s Chair&quot;</value>
            <value>&quot;Garbanzo Express&quot;</value>
            <value>&quot;Harmony 6 Express&quot;</value>
            <value>&quot;Olympic Chair&quot;</value>
            <value>&quot;Peak Express&quot;</value>
            <value>&quot;Symphony Express&quot;</value>
            <value>&quot;T-Bars&quot;</value>
            <value>&quot;Whistler Village Gondola Lower&quot;</value>
            <value>&quot;Whistler Village Gondola Upper&quot;</value>
          </bin>
        </calculation>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per lifts]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([lifts Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at lifts level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per merged_file.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at merged_file.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;H&quot;' value='Standby' />
          <alias key='&quot;O&quot;' value='Open' />
          <alias key='&quot;X&quot;' value='Closed' />
        </aliases>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <column-instance column='[status]' derivation='Attribute' name='[attr:status:nk]' pivot='key' type='nominal' />
      <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <folder name='Merged File' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.64903' measure-ordering='alphabetic' measure-percentage='0.35097' show-structure='false' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[attr:status:nk]' type='palette'>
            <map to='#59a14f'>
              <bucket>&quot;O&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;X&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;H&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:status:nk]' type='palette'>
            <map to='#59a14f'>
              <bucket>&quot;O&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;X&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;H&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='data copy' name='federated.0jlna3j08tgpzl11pw1dy1ruxk4h' />
            <datasource caption='data_2019_20 (2)' name='federated.0eybhs500l9ylc1gsy6ck1v4ikyq' />
          </datasources>
          <datasource-dependencies datasource='federated.0eybhs500l9ylc1gsy6ck1v4ikyq'>
            <column-instance column='[resortID]' derivation='None' name='[none:resortID:ok]' pivot='key' type='ordinal' />
            <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
            <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.resortID</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.status</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0jlna3j08tgpzl11pw1dy1ruxk4h'>
            <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.liftName</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
            <column-instance column='[timestamp]' derivation='None' name='[none:timestamp:nk]' pivot='key' type='nominal' />
            <column caption='Timestamp' datatype='string' name='[timestamp]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>timestamp</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:resortID:ok]'>
            <groupfilter function='member' level='[none:resortID:ok]' member='13.0' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:resortID:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='background-color' field='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Text' />
            <encodings>
              <color column='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]' />
              <text column='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:liftName:nk]</rows>
        <cols>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:timestamp:nk]</cols>
      </table>
      <simple-id uuid='{8F8EEEED-A901-4EB9-B7ED-7B2903E48F21}' />
    </worksheet>
    <worksheet name='gantt_1'>
      <table>
        <view>
          <datasources>
            <datasource caption='merged_file' name='federated.1wvy67g1wt3g6h1ew11of0gyjrne' />
          </datasources>
          <datasource-dependencies datasource='federated.1wvy67g1wt3g6h1ew11of0gyjrne'>
            <column caption='Lift Area' datatype='string' name='[Lift Name (group)]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[liftName]' new-bin='true'>
                <bin default-name='false' value='&quot;Alpine&quot;'>
                  <value>&quot;7th Heaven Express&quot;</value>
                  <value>&quot;Glacier Express&quot;</value>
                  <value>&quot;Harmony 6 Express&quot;</value>
                  <value>&quot;Horstman T-Bar&quot;</value>
                  <value>&quot;Peak Express&quot;</value>
                  <value>&quot;Showcase T-Bar&quot;</value>
                  <value>&quot;Symphony Express&quot;</value>
                  <value>&quot;T-Bars&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Sub-alpine&quot;'>
                  <value>&quot;Big Red Express&quot;</value>
                  <value>&quot;Blackcomb Gondola Lower&quot;</value>
                  <value>&quot;Blackcomb Gondola Upper&quot;</value>
                  <value>&quot;Catskinner Express&quot;</value>
                  <value>&quot;Coca-Cola Tube Park&quot;</value>
                  <value>&quot;Creekside Gondola&quot;</value>
                  <value>&quot;Crystal Ridge Express&quot;</value>
                  <value>&quot;Emerald 6 Express&quot;</value>
                  <value>&quot;Excalibur Gondola Lower&quot;</value>
                  <value>&quot;Excalibur Gondola Upper&quot;</value>
                  <value>&quot;Excelerator Express&quot;</value>
                  <value>&quot;Fitzsimmons Express&quot;</value>
                  <value>&quot;Franz&apos;s Chair&quot;</value>
                  <value>&quot;Garbanzo Express&quot;</value>
                  <value>&quot;Jersey Cream Express&quot;</value>
                  <value>&quot;Magic Chair&quot;</value>
                  <value>&quot;Olympic Chair&quot;</value>
                  <value>&quot;Peak 2 Peak Gondola&quot;</value>
                  <value>&quot;Whistler Village Gondola Lower&quot;</value>
                  <value>&quot;Whistler Village Gondola Upper&quot;</value>
                </bin>
              </calculation>
            </column>
            <column datatype='string' name='[Mountain]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[liftName]' new-bin='true'>
                <bin default-name='false' value='&quot;Blackcomb&quot;'>
                  <value>&quot;7th Heaven Express&quot;</value>
                  <value>&quot;Blackcomb Gondola Lower&quot;</value>
                  <value>&quot;Blackcomb Gondola Upper&quot;</value>
                  <value>&quot;Catskinner Express&quot;</value>
                  <value>&quot;Coca-Cola Tube Park&quot;</value>
                  <value>&quot;Crystal Ridge Express&quot;</value>
                  <value>&quot;Excalibur Gondola Lower&quot;</value>
                  <value>&quot;Excalibur Gondola Upper&quot;</value>
                  <value>&quot;Excelerator Express&quot;</value>
                  <value>&quot;Glacier Express&quot;</value>
                  <value>&quot;Horstman T-Bar&quot;</value>
                  <value>&quot;Jersey Cream Express&quot;</value>
                  <value>&quot;Magic Chair&quot;</value>
                  <value>&quot;Showcase T-Bar&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Whistler&quot;'>
                  <value>&quot;Big Red Express&quot;</value>
                  <value>&quot;Creekside Gondola&quot;</value>
                  <value>&quot;Emerald 6 Express&quot;</value>
                  <value>&quot;Fitzsimmons Express&quot;</value>
                  <value>&quot;Franz&apos;s Chair&quot;</value>
                  <value>&quot;Garbanzo Express&quot;</value>
                  <value>&quot;Harmony 6 Express&quot;</value>
                  <value>&quot;Olympic Chair&quot;</value>
                  <value>&quot;Peak Express&quot;</value>
                  <value>&quot;Symphony Express&quot;</value>
                  <value>&quot;T-Bars&quot;</value>
                  <value>&quot;Whistler Village Gondola Lower&quot;</value>
                  <value>&quot;Whistler Village Gondola Upper&quot;</value>
                </bin>
              </calculation>
            </column>
            <column-instance column='[timestamp]' derivation='Day' name='[dy:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[timestamp]' derivation='Hour' name='[hr:timestamp:ok]' pivot='key' type='ordinal' />
            <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.liftName</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[timestamp]' derivation='Minute' name='[mi:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[timestamp]' derivation='Month' name='[mn:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
            <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
            <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;H&quot;' value='Standby' />
                <alias key='&quot;O&quot;' value='Open' />
                <alias key='&quot;X&quot;' value='Closed' />
              </aliases>
              <desc>
                <formatted-text>
                  <run>lifts.Value.status</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>timestamp</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[timestamp]' derivation='Year' name='[yr:timestamp:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[hr:timestamp:ok]' value='29' />
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mi:timestamp:ok]' value='28' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mi:timestamp:ok]' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Lift Name (group)] / ([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Mountain] / [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]))</rows>
        <cols>([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[yr:timestamp:ok] / ([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mn:timestamp:ok] / ([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[dy:timestamp:ok] / ([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[hr:timestamp:ok] / [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mi:timestamp:ok]))))</cols>
      </table>
      <simple-id uuid='{CF19F586-1043-4507-B393-15B04F09D8E8}' />
    </worksheet>
    <worksheet name='gantt_2'>
      <table>
        <view>
          <datasources>
            <datasource caption='merged_file' name='federated.1wvy67g1wt3g6h1ew11of0gyjrne' />
          </datasources>
          <datasource-dependencies datasource='federated.1wvy67g1wt3g6h1ew11of0gyjrne'>
            <column caption='ATTR([Timestamp])-LOOKUP(ATTR([Timestamp]), -1)' datatype='real' name='[Calculation_26669759692615683]' role='measure' type='quantitative' user:unnamed='Sheet 6'>
              <calculation class='tableau' formula='ATTR([timestamp])-LOOKUP(ATTR([timestamp]), -1)'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='DATEDIFF(&apos;minute&apos;, LOOKUP(ATTR([Timestamp]), 0), LOOKUP(ATTR(...' datatype='integer' name='[Calculation_26669759696773131]' role='measure' type='quantitative' user:unnamed='Sheet 6'>
              <calculation class='tableau' formula='DATEDIFF(&apos;minute&apos;, LOOKUP(ATTR([timestamp]), 0), LOOKUP(ATTR([timestamp]), 0))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Lift Area' datatype='string' name='[Lift Name (group)]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[liftName]' new-bin='true'>
                <bin default-name='false' value='&quot;Alpine&quot;'>
                  <value>&quot;7th Heaven Express&quot;</value>
                  <value>&quot;Glacier Express&quot;</value>
                  <value>&quot;Harmony 6 Express&quot;</value>
                  <value>&quot;Horstman T-Bar&quot;</value>
                  <value>&quot;Peak Express&quot;</value>
                  <value>&quot;Showcase T-Bar&quot;</value>
                  <value>&quot;Symphony Express&quot;</value>
                  <value>&quot;T-Bars&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Sub-alpine&quot;'>
                  <value>&quot;Big Red Express&quot;</value>
                  <value>&quot;Blackcomb Gondola Lower&quot;</value>
                  <value>&quot;Blackcomb Gondola Upper&quot;</value>
                  <value>&quot;Catskinner Express&quot;</value>
                  <value>&quot;Coca-Cola Tube Park&quot;</value>
                  <value>&quot;Creekside Gondola&quot;</value>
                  <value>&quot;Crystal Ridge Express&quot;</value>
                  <value>&quot;Emerald 6 Express&quot;</value>
                  <value>&quot;Excalibur Gondola Lower&quot;</value>
                  <value>&quot;Excalibur Gondola Upper&quot;</value>
                  <value>&quot;Excelerator Express&quot;</value>
                  <value>&quot;Fitzsimmons Express&quot;</value>
                  <value>&quot;Franz&apos;s Chair&quot;</value>
                  <value>&quot;Garbanzo Express&quot;</value>
                  <value>&quot;Jersey Cream Express&quot;</value>
                  <value>&quot;Magic Chair&quot;</value>
                  <value>&quot;Olympic Chair&quot;</value>
                  <value>&quot;Peak 2 Peak Gondola&quot;</value>
                  <value>&quot;Whistler Village Gondola Lower&quot;</value>
                  <value>&quot;Whistler Village Gondola Upper&quot;</value>
                </bin>
              </calculation>
            </column>
            <column datatype='string' name='[Mountain]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[liftName]' new-bin='true'>
                <bin default-name='false' value='&quot;Blackcomb&quot;'>
                  <value>&quot;7th Heaven Express&quot;</value>
                  <value>&quot;Blackcomb Gondola Lower&quot;</value>
                  <value>&quot;Blackcomb Gondola Upper&quot;</value>
                  <value>&quot;Catskinner Express&quot;</value>
                  <value>&quot;Coca-Cola Tube Park&quot;</value>
                  <value>&quot;Crystal Ridge Express&quot;</value>
                  <value>&quot;Excalibur Gondola Lower&quot;</value>
                  <value>&quot;Excalibur Gondola Upper&quot;</value>
                  <value>&quot;Excelerator Express&quot;</value>
                  <value>&quot;Glacier Express&quot;</value>
                  <value>&quot;Horstman T-Bar&quot;</value>
                  <value>&quot;Jersey Cream Express&quot;</value>
                  <value>&quot;Magic Chair&quot;</value>
                  <value>&quot;Showcase T-Bar&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Whistler&quot;'>
                  <value>&quot;Big Red Express&quot;</value>
                  <value>&quot;Creekside Gondola&quot;</value>
                  <value>&quot;Emerald 6 Express&quot;</value>
                  <value>&quot;Fitzsimmons Express&quot;</value>
                  <value>&quot;Franz&apos;s Chair&quot;</value>
                  <value>&quot;Garbanzo Express&quot;</value>
                  <value>&quot;Harmony 6 Express&quot;</value>
                  <value>&quot;Olympic Chair&quot;</value>
                  <value>&quot;Peak Express&quot;</value>
                  <value>&quot;Symphony Express&quot;</value>
                  <value>&quot;T-Bars&quot;</value>
                  <value>&quot;Whistler Village Gondola Lower&quot;</value>
                  <value>&quot;Whistler Village Gondola Upper&quot;</value>
                </bin>
              </calculation>
            </column>
            <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.liftName</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
            <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
            <column-instance column='[timestamp]' derivation='None' name='[none:timestamp:qk]' pivot='key' type='quantitative' />
            <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;H&quot;' value='Standby' />
                <alias key='&quot;O&quot;' value='Open' />
                <alias key='&quot;X&quot;' value='Closed' />
              </aliases>
              <desc>
                <formatted-text>
                  <run>lifts.Value.status</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>timestamp</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Calculation_26669759692615683]' derivation='User' name='[usr:Calculation_26669759692615683:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' />
            </column-instance>
            <column-instance column='[Calculation_26669759696773131]' derivation='User' name='[usr:Calculation_26669759696773131:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' />
            </column-instance>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='GanttBar' />
            <encodings>
              <color column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
            </encodings>
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:timestamp:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='GanttBar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.1974033117294312' />
              </style-rule>
            </style>
          </pane>
          <pane id='5' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[usr:Calculation_26669759692615683:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='GanttBar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.6041989326477051' />
              </style-rule>
            </style>
          </pane>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[usr:Calculation_26669759696773131:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='GanttBar' />
            <encodings>
              <color column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Lift Name (group)] / ([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Mountain] / [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]))</rows>
        <cols>([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:timestamp:qk] + ([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[usr:Calculation_26669759692615683:qk] + [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[usr:Calculation_26669759696773131:qk]))</cols>
      </table>
      <simple-id uuid='{660FC254-837E-4D64-990B-D506E7D38672}' />
    </worksheet>
    <worksheet name='new'>
      <table>
        <view>
          <datasources>
            <datasource caption='merged_file' name='federated.1wvy67g1wt3g6h1ew11of0gyjrne' />
          </datasources>
          <datasource-dependencies datasource='federated.1wvy67g1wt3g6h1ew11of0gyjrne'>
            <column-instance column='[timestamp]' derivation='Day' name='[dy:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[timestamp]' derivation='Hour' name='[hr:timestamp:ok]' pivot='key' type='ordinal' />
            <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.liftName</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[timestamp]' derivation='Minute' name='[mi:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[timestamp]' derivation='Month' name='[mn:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
            <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
            <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;H&quot;' value='Standby' />
                <alias key='&quot;O&quot;' value='Open' />
                <alias key='&quot;X&quot;' value='Closed' />
              </aliases>
              <desc>
                <formatted-text>
                  <run>lifts.Value.status</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>timestamp</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[timestamp]' derivation='Minute-Trunc' name='[tmi:timestamp:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mi:timestamp:ok]' value='27' />
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[hr:timestamp:ok]' value='27' />
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[tmi:timestamp:qk]' value='27' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
              <text column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</rows>
        <cols>(([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mn:timestamp:ok] / [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[dy:timestamp:ok]) * [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[tmi:timestamp:qk])</cols>
      </table>
      <simple-id uuid='{8AF9394B-D388-40C1-AAF3-CD0A3FC0B2C5}' />
    </worksheet>
    <worksheet name='timeline'>
      <table>
        <view>
          <datasources>
            <datasource caption='merged_file' name='federated.1wvy67g1wt3g6h1ew11of0gyjrne' />
          </datasources>
          <datasource-dependencies datasource='federated.1wvy67g1wt3g6h1ew11of0gyjrne'>
            <column caption='Placeholder' datatype='integer' name='[Calculation_1068338277994426371]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='min(0)' />
            </column>
            <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.liftName</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
            <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
            <column-instance column='[timestamp]' derivation='None' name='[none:timestamp:qk]' pivot='key' type='quantitative' />
            <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;H&quot;' value='Standby' />
                <alias key='&quot;O&quot;' value='Open' />
                <alias key='&quot;X&quot;' value='Closed' />
              </aliases>
              <desc>
                <formatted-text>
                  <run>lifts.Value.status</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>timestamp</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Calculation_1068338277994426371]' derivation='User' name='[usr:Calculation_1068338277994426371:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[usr:Calculation_1068338277994426371:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]' value='172' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
              <text column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
                <format attr='shape' value=':filled/square' />
                <format attr='size' value='6.3166670799255371' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='27' />
                <format attr='maxheight' value='27' />
                <format attr='minwidth' value='1275' />
                <format attr='maxwidth' value='1275' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk] * [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[usr:Calculation_1068338277994426371:qk])</rows>
        <cols>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:timestamp:qk]</cols>
      </table>
      <simple-id uuid='{72607584-BE1D-403D-87F4-C59FDBCA1B2A}' />
    </worksheet>
  </worksheets>
  <windows source-height='114'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:resortID:ok]</field>
            <field>[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]</field>
            <field>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:liftName:nk]</field>
            <field>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:resortID (lifts):ok]</field>
            <field>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:status (lifts):nk]</field>
            <field>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:timestamp:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{AC71A15C-2472-495D-A4B5-6332B4494A2A}' />
    </window>
    <window class='worksheet' name='new'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[yr:timestamp:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{9BE1E5AD-5C4D-49AA-9B75-02211099098F}' />
    </window>
    <window class='worksheet' name='gantt_1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Lift Area]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Lift Name (group)]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Mountain]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mn:timestamp:ok]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftID:ok]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[qr:timestamp:ok]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[yr:timestamp:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{10BA01CD-F85F-472E-875C-123E143BA18D}' />
    </window>
    <window class='worksheet' maximized='true' name='gantt_2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='4' param='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Lift Name (group)]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[Mountain]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:timestamp:qk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[yr:timestamp:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5102F243-A273-4572-83AE-ED7556A95883}' />
    </window>
    <window class='worksheet' name='timeline'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08opw1o1eo1nck11s6rpo1owp9ss].[none:liftName:nk]</field>
            <field>[federated.08opw1o1eo1nck11s6rpo1owp9ss].[none:status:nk]</field>
            <field>[federated.08opw1o1eo1nck11s6rpo1owp9ss].[yr:timestamp:ok]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:Calculation_1068338277993893889:qk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[yr:timestamp:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{18471A19-C3BC-4BB0-9682-D90FB603A4C9}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
      +2ltbaW2tha73f6FLtybm5upqam57Xv19fVcuXLlL37e4XBID816e3txuVx33YZ7hSiECHsd
      0p010e/pr8c7Qp4Fi0Fff5kk+vUtotcx7FaIIXeAf/iHf+AXv/gF69ev5+OPP77ryuyCIHDg
      wAHq6uro6uqiqqoKQRBuEWMNFVEU2bp1Kz/72c/YunUr69at+0Id6erVqxw8ePC271VXV3Pi
      xIm/+Pn//u//luqcHTp0iLKysrtuw71CDHgInN6I6LIhCiECZzYRdjQMW3s+S9jThv/kBkSf
      m7CjnsDZLSDc3e/oXjPkJyRms5mVK1dKasRjx44hiiITJ07k0KFDLFq0iEuXLlFRUYHVamXR
      okXs3LmTtrY2HnjgAUpLS6V1ffo+uyAIbN26FZfLxWOPPcb48ePZuXMny5cvp6amhlAohMFg
      oKWlBZvNRmFhIfn5+dTX13Pq1Cl++MMfYrFY6OnpQa/XY7PZ+P3vf09PTw+PP/44ubm5bNq0
      CZlMRktLC0uWLGHy5MlUVVVRXl5OW1sbSUlJeL1edu7cSXV1NVOmTOFb3/qW1F6Hw8HmzZtx
      Op3Mnj2bWbNm3dFIMZBw3bVrF16vF71ez1NPPcWVK1eorq7GbreTl5fH4sWL6ejoYNu2bfT0
      9PDEE08gCAINDQ309PSQkZExqKbxUJDrzKgmPUbg/DYU0WnIzcnI4zIZMWrEqBSE6HGEaisI
      u5tRpn3N1Ig7d+7kzTff5PDhw1itVj766CPWr1+PSqXC5XKxdetWiouLKSgoQKlUkpmZyZw5
      c9i3bx82m01al8vl4tKlS9LfGRkZFBYWUlZWhtPp5PTp04RCIW7cuEFDQwOtra2sX78el8tF
      TEwM0D88SUlJIS0tjW3btvHuu+/S2dnJ22+/TVRUFA8++CAbN26ku7ubkydPYjabpcqSdrud
      LVu2kJuby+TJk5HL5Rw9epQzZ86wePFiKisrOXv2rNQ+QRB44IEHmD9/Pu+//z7Nzc1/8X/l
      cDi4fPkys2bNor29naNHj1JXV0d3dzfFxcWUl5djs9nYtm0bcXFx5OXlsWXLFlpaWti+fTuN
      jY3S97w7ZChiMpDp4whe/Rhl1qKRp0ZMn0uosRIUGhRjpgz77fYh/3cG4g1Wq5XY2FiSk5MZ
      P348J0+eZO3atTQ1NWGxWHjooYfQ6XR0d3dz8eJF2tvbpdDa7VAoFBQVFREbG8vBgwfvWEo0
      OzubZ599dlAEIRAIIIoimZmZvP3228yaNYuuri5WrFhBQkICFRUVtLe3ExERwezZs3E4HNTW
      1uJ0OtHpdJSUlFBVVSXNDZg6dSolJSVcv36d69evD5pcc+zYMfr6+vB4PPT09EivDxjnBpxC
      AzvUYrEwbdo03G43169fx2AwkJWVRXFxMadOnaKxsRGbzUZPTw8qlYqOjg78fj8pKSn83d/9
      HQbDF5NFiWEBfC6QKRB9LmSG+C+0nq8MnxOZxoTY14UY8iFT3d0EpnvNkM8ASqWSpKQk0tPT
      iY+Pp6uri5s3b2IwGDh58iQGgwGn00lnZycOh4Pjx4/jdrt5/vnnb1ujd4AB+VRjY6OUpPT7
      /XR3d2O326XlkpOTByUks7KyuHHjBsePHycjIwOj0SglPuvq6rhx44aU8Bxg4MepVqvp7u6m
      vb0dl8tFOBzGbDbT2NhIR0cHTU1Ng47A+/btw2w288ILL9wycy0iIoLq6mra2to4e/asVIZ1
      IPJdV1eH2WxGJpMRCATo6uqis7OT6OhozGYzaWlpPP744zzzzDOoVCrGjBnzhX/8iCKhhsPI
      DHH9asTqrSNPjXj1Y5QTF6OITiNU9zVSI/p8Pt544w1JjajVasnJySEnJ4f333+f3NxcJkyY
      wGuvvUZKSgqzZs3ixo0b/OpXv8LpdKJUKtFqtSiVShQKhXR0NZlMrFu3Dq/Xy7Jly0hOTkap
      VPKf//mfKBQKZs+ejUqlumX6pcVi4Rvf+IZ00RkKhYiJiWHBggWUlZUhCALFxcXEx8ej1+ul
      Atc6nU4KxP3yl79EqVSSlZVFUVERJ0+e5J//+Z8xGAxMmzaNyspKNBoNmZmZrFu3DpvNhiAI
      g6xy8+fP54033uDcuXOoVCpmzpxJW1sbV65c4cUXX0Sj0fD973+fQ4cO8dFHH3H8+HGp9vH8
      +fMpKyvj3LlzpKSkMGXKlC+lWwz3dhBuPY966reRqQ0IttMIrTUok4tGjBpRptSgSMhFNFsJ
      nnsHxv0fUyMO6BAVCoXk9vys/vDTfHroMLDcgBpRr9d/7hhREAR8Pt+gZfv6+qSL5zt9PhwO
      4/F4MBgMUmhNEATcbrckzv10G/1+/x2/SzAYxO12S4U7qqur+eCDD3jxxRdRq9XI5XJ+//vf
      o1arWbp06aAzmSAIBAIByVE6yl8PmUwm+3/dVqAL/5htHwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='gantt_1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='gantt_2' width='192'>
      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
      7YrkxQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='new' width='192'>
      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
      f0jCYARKutTBAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='timeline' width='192'>
      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
      AElFTkSuQmCC
    </thumbnail>
  </thumbnails>
</workbook>
