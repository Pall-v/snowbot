<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20192.19.1210.2209                               -->
<workbook locale='en_CA' original-version='18.1' source-build='2019.2.7 (20192.19.1210.2209)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <SheetIdentifierTracking ignorable='true' predowngraded='true' />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='data copy (2)' inline='true' name='federated.0zhkbyo1mslrtt1ghsz8u1ynl7tl' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='data copy' name='semistructpassivestore-direct.0kvg3nx1kz3d570zsc5sa03u2x5k'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/dev/snowbot' filename='data copy.json' password='' server=''>
              <semistruct-schemas />
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.0kvg3nx1kz3d570zsc5sa03u2x5k' name='data copy.json' table='[data copy.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[data copy.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[data copy.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[data copy.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[data copy.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[data copy.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[data copy.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[data copy.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[data copy.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[data copy.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='string' name='[timestamp]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Data Copy' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.573758' measure-ordering='alphabetic' measure-percentage='0.426242' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='data copy' inline='true' name='federated.0jlna3j08tgpzl11pw1dy1ruxk4h' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='data_2019_20' name='semistructpassivestore-direct.186jri006b94kh18mih311yzp959'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/Downloads' filename='/Users/paul/Downloads/data_2019_20.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[data copy.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='terrain' value='false' />
                  <map key='terrain.Value' value='false' />
                  <map key='weather' value='false' />
                  <map key='weather.Value' value='false' />
                  <map key='weather.Value.weatherForecast' value='false' />
                  <map key='weather.Value.weatherForecast.Value' value='false' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
                <semistruct-schema table='[data_2019_20.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='terrain' value='false' />
                  <map key='terrain.Value' value='false' />
                  <map key='weather' value='false' />
                  <map key='weather.Value' value='false' />
                  <map key='weather.Value.weatherForecast' value='false' />
                  <map key='weather.Value.weatherForecast.Value' value='false' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.186jri006b94kh18mih311yzp959' name='data_2019_20.json' table='[data_2019_20.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[data_2019_20.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[data_2019_20.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[data_2019_20.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[data_2019_20.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[data_2019_20.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[data_2019_20.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[data_2019_20.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[data_2019_20.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per data_2019_20.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at data_2019_20.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per lifts]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([lifts Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at lifts level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' datatype-customized='true' default-role='measure' default-type='quantitative' name='[Number of Records]' role='dimension' type='nominal' user:auto-column='numrec'>
        <calculation class='tableau' formula='STR(1)' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='real' name='[resortID (lifts)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status (Lifts)' datatype='string' name='[status (lifts)]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='string' name='[timestamp]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Data 2019 20' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <folder name='Terrain' role='dimensions' />
      <folder name='Weather' role='dimensions' />
      <folder name='Weather Forecast' role='dimensions' />
      <folder name='Source Measures' role='measures' />
      <layout dim-ordering='alphabetic' dim-percentage='0.590062' measure-ordering='alphabetic' measure-percentage='0.409938' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='data_2019_20 (2)' inline='true' name='federated.0eybhs500l9ylc1gsy6ck1v4ikyq' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='data_2019_20' name='semistructpassivestore-direct.0osfbb209jkg4v1giubl70heh35e'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/Downloads' filename='data_2019_20.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[data_2019_20.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='terrain' value='false' />
                  <map key='terrain.Value' value='false' />
                  <map key='weather' value='false' />
                  <map key='weather.Value' value='false' />
                  <map key='weather.Value.weatherForecast' value='false' />
                  <map key='weather.Value.weatherForecast.Value' value='false' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.0osfbb209jkg4v1giubl70heh35e' name='data_2019_20.json' table='[data_2019_20.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[data_2019_20.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[data_2019_20.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[data_2019_20.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[data_2019_20.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[data_2019_20.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[data_2019_20.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[data_2019_20.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[data_2019_20.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[data_2019_20.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per data_2019_20.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at data_2019_20.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per lifts]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([lifts Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at lifts level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='string' name='[timestamp]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Data 2019 20' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.556914' measure-ordering='alphabetic' measure-percentage='0.443086' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='merged_file' inline='true' name='federated.1wvy67g1wt3g6h1ew11of0gyjrne' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='merged_file' name='semistructpassivestore-direct.02oo5wi11mul0x1dlv3tb0vfen1p'>
            <connection class='semistructpassivestore-direct' directory='/Users/paul/dev/snowbot/data' filename='merged_file.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[merged_file.json]'>
                  <map key='lifts' value='true' />
                  <map key='lifts.Value' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.02oo5wi11mul0x1dlv3tb0vfen1p' name='merged_file.json' table='[merged_file.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[merged_file.json].[Document Index (generated)]' />
          <map key='[liftID]' value='[merged_file.json].[lifts.Value.liftID]' />
          <map key='[liftName]' value='[merged_file.json].[lifts.Value.liftName]' />
          <map key='[lifts Index (generated)]' value='[merged_file.json].[lifts.Index (generated)]' />
          <map key='[resortID]' value='[merged_file.json].[lifts.Value.resortID]' />
          <map key='[status]' value='[merged_file.json].[lifts.Value.status]' />
          <map key='[timeToRide]' value='[merged_file.json].[lifts.Value.timeToRide]' />
          <map key='[timestamp]' value='[merged_file.json].[timestamp]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[lifts Index (generated)]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[liftID]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.liftID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.liftName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[liftName]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.liftName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.resortID</remote-name>
            <remote-type>5</remote-type>
            <local-name>[resortID]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.resortID</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.status</remote-name>
            <remote-type>130</remote-type>
            <local-name>[status]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.status</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lifts.Value.timeToRide</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeToRide]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>lifts.Value.timeToRide</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[merged_file.json]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per lifts]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([lifts Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at lifts level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per merged_file.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at merged_file.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Lift ID' datatype='real' name='[liftID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.liftName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[lifts Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.resortID</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.status</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time To Ride' datatype='string' name='[timeToRide]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>lifts.Value.timeToRide</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>timestamp</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Lifts' role='dimensions'>
        <folder-item name='[liftID]' type='field' />
        <folder-item name='[liftName]' type='field' />
        <folder-item name='[lifts Index (generated)]' type='field' />
        <folder-item name='[resortID]' type='field' />
        <folder-item name='[status]' type='field' />
        <folder-item name='[timeToRide]' type='field' />
      </folder>
      <folder name='Merged File' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[timestamp]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.557453' measure-ordering='alphabetic' measure-percentage='0.442547' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='data copy' name='federated.0jlna3j08tgpzl11pw1dy1ruxk4h' />
            <datasource caption='data_2019_20 (2)' name='federated.0eybhs500l9ylc1gsy6ck1v4ikyq' />
          </datasources>
          <datasource-dependencies datasource='federated.0eybhs500l9ylc1gsy6ck1v4ikyq'>
            <column-instance column='[resortID]' derivation='None' name='[none:resortID:ok]' pivot='key' type='ordinal' />
            <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
            <column aggregation='Sum' caption='Resort ID' datatype='real' name='[resortID]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.resortID</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.status</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0jlna3j08tgpzl11pw1dy1ruxk4h'>
            <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.liftName</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
            <column-instance column='[timestamp]' derivation='None' name='[none:timestamp:nk]' pivot='key' type='nominal' />
            <column caption='Timestamp' datatype='string' name='[timestamp]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>timestamp</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:resortID:ok]'>
            <groupfilter function='member' level='[none:resortID:ok]' member='13.0' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:resortID:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='background-color' field='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Text' />
            <encodings>
              <color column='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]' />
              <text column='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:liftName:nk]</rows>
        <cols>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:timestamp:nk]</cols>
      </table>
      <simple-id uuid='{8F8EEEED-A901-4EB9-B7ED-7B2903E48F21}' />
    </worksheet>
    <worksheet name='gant'>
      <table>
        <view>
          <datasources>
            <datasource caption='merged_file' name='federated.1wvy67g1wt3g6h1ew11of0gyjrne' />
          </datasources>
          <datasource-dependencies datasource='federated.1wvy67g1wt3g6h1ew11of0gyjrne'>
            <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.liftName</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
            <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
            <column-instance column='[timestamp]' derivation='None' name='[none:timestamp:ok]' pivot='key' type='ordinal' />
            <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.status</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>timestamp</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:timestamp:ok]' value='30' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</rows>
        <cols>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:timestamp:ok]</cols>
      </table>
      <simple-id uuid='{CF19F586-1043-4507-B393-15B04F09D8E8}' />
    </worksheet>
    <worksheet name='new'>
      <table>
        <view>
          <datasources>
            <datasource caption='merged_file' name='federated.1wvy67g1wt3g6h1ew11of0gyjrne' />
          </datasources>
          <datasource-dependencies datasource='federated.1wvy67g1wt3g6h1ew11of0gyjrne'>
            <column-instance column='[timestamp]' derivation='Day' name='[dy:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[timestamp]' derivation='Hour' name='[hr:timestamp:ok]' pivot='key' type='ordinal' />
            <column caption='Lift Name' datatype='string' name='[liftName]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.liftName</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[timestamp]' derivation='Minute' name='[mi:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[timestamp]' derivation='Month' name='[mn:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[liftName]' derivation='None' name='[none:liftName:nk]' pivot='key' type='nominal' />
            <column-instance column='[status]' derivation='None' name='[none:status:nk]' pivot='key' type='nominal' />
            <column caption='Status' datatype='string' name='[status]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>lifts.Value.status</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[timestamp]' derivation='Hour-Trunc' name='[thr:timestamp:qk]' pivot='key' type='quantitative' />
            <column caption='Timestamp' datatype='datetime' datatype-customized='true' name='[timestamp]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>timestamp</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mi:timestamp:ok]' value='27' />
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[hr:timestamp:ok]' value='27' />
            <format attr='width' field='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[thr:timestamp:qk]' value='27' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
              <text column='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</rows>
        <cols>(([federated.1wvy67g1wt3g6h1ew11of0gyjrne].[mn:timestamp:ok] / [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[dy:timestamp:ok]) * [federated.1wvy67g1wt3g6h1ew11of0gyjrne].[thr:timestamp:qk])</cols>
      </table>
      <simple-id uuid='{8AF9394B-D388-40C1-AAF3-CD0A3FC0B2C5}' />
    </worksheet>
  </worksheets>
  <windows source-height='93'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:resortID:ok]</field>
            <field>[federated.0eybhs500l9ylc1gsy6ck1v4ikyq].[none:status:nk]</field>
            <field>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:liftName:nk]</field>
            <field>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:resortID (lifts):ok]</field>
            <field>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:status (lifts):nk]</field>
            <field>[federated.0jlna3j08tgpzl11pw1dy1ruxk4h].[none:timestamp:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{AC71A15C-2472-495D-A4B5-6332B4494A2A}' />
    </window>
    <window class='worksheet' name='new'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[yr:timestamp:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{9BE1E5AD-5C4D-49AA-9B75-02211099098F}' />
    </window>
    <window class='worksheet' maximized='true' name='gant'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftID:ok]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:liftName:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[none:status:nk]</field>
            <field>[federated.1wvy67g1wt3g6h1ew11of0gyjrne].[yr:timestamp:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{10BA01CD-F85F-472E-875C-123E143BA18D}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
      +2ltbaW2tha73f6FLtybm5upqam57Xv19fVcuXLlL37e4XBID816e3txuVx33YZ7hSiECHsd
      0p010e/pr8c7Qp4Fi0Fff5kk+vUtotcx7FaIIXeAf/iHf+AXv/gF69ev5+OPP77ryuyCIHDg
      wAHq6uro6uqiqqoKQRBuEWMNFVEU2bp1Kz/72c/YunUr69at+0Id6erVqxw8ePC271VXV3Pi
      xIm/+Pn//u//luqcHTp0iLKysrtuw71CDHgInN6I6LIhCiECZzYRdjQMW3s+S9jThv/kBkSf
      m7CjnsDZLSDc3e/oXjPkJyRms5mVK1dKasRjx44hiiITJ07k0KFDLFq0iEuXLlFRUYHVamXR
      okXs3LmTtrY2HnjgAUpLS6V1ffo+uyAIbN26FZfLxWOPPcb48ePZuXMny5cvp6amhlAohMFg
      oKWlBZvNRmFhIfn5+dTX13Pq1Cl++MMfYrFY6OnpQa/XY7PZ+P3vf09PTw+PP/44ubm5bNq0
      CZlMRktLC0uWLGHy5MlUVVVRXl5OW1sbSUlJeL1edu7cSXV1NVOmTOFb3/qW1F6Hw8HmzZtx
      Op3Mnj2bWbNm3dFIMZBw3bVrF16vF71ez1NPPcWVK1eorq7GbreTl5fH4sWL6ejoYNu2bfT0
      9PDEE08gCAINDQ309PSQkZExqKbxUJDrzKgmPUbg/DYU0WnIzcnI4zIZMWrEqBSE6HGEaisI
      u5tRpn3N1Ig7d+7kzTff5PDhw1itVj766CPWr1+PSqXC5XKxdetWiouLKSgoQKlUkpmZyZw5
      c9i3bx82m01al8vl4tKlS9LfGRkZFBYWUlZWhtPp5PTp04RCIW7cuEFDQwOtra2sX78el8tF
      TEwM0D88SUlJIS0tjW3btvHuu+/S2dnJ22+/TVRUFA8++CAbN26ku7ubkydPYjabpcqSdrud
      LVu2kJuby+TJk5HL5Rw9epQzZ86wePFiKisrOXv2rNQ+QRB44IEHmD9/Pu+//z7Nzc1/8X/l
      cDi4fPkys2bNor29naNHj1JXV0d3dzfFxcWUl5djs9nYtm0bcXFx5OXlsWXLFlpaWti+fTuN
      jY3S97w7ZChiMpDp4whe/Rhl1qKRp0ZMn0uosRIUGhRjpgz77fYh/3cG4g1Wq5XY2FiSk5MZ
      P348J0+eZO3atTQ1NWGxWHjooYfQ6XR0d3dz8eJF2tvbpdDa7VAoFBQVFREbG8vBgwfvWEo0
      OzubZ599dlAEIRAIIIoimZmZvP3228yaNYuuri5WrFhBQkICFRUVtLe3ExERwezZs3E4HNTW
      1uJ0OtHpdJSUlFBVVSXNDZg6dSolJSVcv36d69evD5pcc+zYMfr6+vB4PPT09EivDxjnBpxC
      AzvUYrEwbdo03G43169fx2AwkJWVRXFxMadOnaKxsRGbzUZPTw8qlYqOjg78fj8pKSn83d/9
      HQbDF5NFiWEBfC6QKRB9LmSG+C+0nq8MnxOZxoTY14UY8iFT3d0EpnvNkM8ASqWSpKQk0tPT
      iY+Pp6uri5s3b2IwGDh58iQGgwGn00lnZycOh4Pjx4/jdrt5/vnnb1ujd4AB+VRjY6OUpPT7
      /XR3d2O326XlkpOTByUks7KyuHHjBsePHycjIwOj0SglPuvq6rhx44aU8Bxg4MepVqvp7u6m
      vb0dl8tFOBzGbDbT2NhIR0cHTU1Ng47A+/btw2w288ILL9wycy0iIoLq6mra2to4e/asVIZ1
      IPJdV1eH2WxGJpMRCATo6uqis7OT6OhozGYzaWlpPP744zzzzDOoVCrGjBnzhX/8iCKhhsPI
      DHH9asTqrSNPjXj1Y5QTF6OITiNU9zVSI/p8Pt544w1JjajVasnJySEnJ4f333+f3NxcJkyY
      wGuvvUZKSgqzZs3ixo0b/OpXv8LpdKJUKtFqtSiVShQKhXR0NZlMrFu3Dq/Xy7Jly0hOTkap
      VPKf//mfKBQKZs+ejUqlumX6pcVi4Rvf+IZ00RkKhYiJiWHBggWUlZUhCALFxcXEx8ej1+ul
      Atc6nU4KxP3yl79EqVSSlZVFUVERJ0+e5J//+Z8xGAxMmzaNyspKNBoNmZmZrFu3DpvNhiAI
      g6xy8+fP54033uDcuXOoVCpmzpxJW1sbV65c4cUXX0Sj0fD973+fQ4cO8dFHH3H8+HGp9vH8
      +fMpKyvj3LlzpKSkMGXKlC+lWwz3dhBuPY966reRqQ0IttMIrTUok4tGjBpRptSgSMhFNFsJ
      nnsHxv0fUyMO6BAVCoXk9vys/vDTfHroMLDcgBpRr9d/7hhREAR8Pt+gZfv6+qSL5zt9PhwO
      4/F4MBgMUmhNEATcbrckzv10G/1+/x2/SzAYxO12S4U7qqur+eCDD3jxxRdRq9XI5XJ+//vf
      o1arWbp06aAzmSAIBAIByVE6yl8PmUwm+3/dVqAL/5htHwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='gant' width='192'>
      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
      UPhdogAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='new' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
